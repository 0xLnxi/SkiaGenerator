name: 编译 Skia + Dawn 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    # 每天 UTC 00:00（北京时间 08:00）触发
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write
  actions: read

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64 (MSVC2022 + Clang18)
          - os: windows-2022
            platform: x64_windows
            target_os: win
            arch: x64
            compiler: msvc2022
          # Linux x64 (Clang18)
          - os: ubuntu-24.04
            platform: x64_linux
            target_os: linux
            arch: x64
            compiler: clang18
          # Android x64 (Clang18)
          - os: ubuntu-24.04
            platform: x64_android
            target_os: android
            arch: x64
            android_api: 21
            compiler: clang18
          # Android ARM64 (Clang18)
          - os: ubuntu-24.04
            platform: arm64_android
            target_os: android
            arch: arm64
            android_api: 21
            compiler: clang18

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build cmake \
            clang-18 gcc-13 g++-13 libfontconfig1-dev libfreetype6-dev \
            libgl1-mesa-dev libvulkan-dev vulkan-tools libxrandr-dev \
            libxinerama-dev libxcursor-dev libxi-dev libx11-dev \
            libicu-dev libharfbuzz-dev openjdk-11-jdk
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: Install Windows deps
        if: runner.os == 'Windows'
        run: |
          choco install ninja -y
          choco install llvm --version=18.1.8 --force -y
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup MSBuild
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Android NDK
        if: matrix.target_os == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Fetch depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH

      - name: Prepare depot_tools on Windows
        if: runner.os == 'Windows'
        run: |
          echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Fetch Skia
        run: |
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          mkdir skia-build && cd skia-build
          gclient config --name skia https://skia.googlesource.com/skia.git
          gclient sync

      - name: Fetch Dawn
        run: |
          git clone --recursive https://dawn.googlesource.com/dawn.git dawn-source
          cd dawn-source
          python3 tools/fetch_dawn_dependencies.py

      - name: Configure Dawn
        run: |
          cd dawn-source
          mkdir -p build-${{ matrix.platform }} && cd build-${{ matrix.platform }}
          case "${{ matrix.target_os }}" in
            win)
              cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.arch == 'x64' && 'x64' || 'Win32' }} \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_D3D11=ON -DDAWN_ENABLE_D3D12=ON -DDAWN_ENABLE_VULKAN=ON \
                -DDAWN_ENABLE_OPENGL=ON -DCMAKE_CXX_STANDARD=20 -DDAWN_USE_BUILT_DXC=ON
              ;;
            linux)
              cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF -DDAWN_ENABLE_VULKAN=ON \
                -DDAWN_ENABLE_OPENGL=ON -DCMAKE_CXX_STANDARD=20
              ;;
            android)
              if [ "${{ matrix.arch }}" = "arm64" ]; then ANDROID_ABI="arm64-v8a"; else ANDROID_ABI="x86_64"; fi
              cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_SYSTEM_NAME=Android -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
                -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME} -DCMAKE_ANDROID_STL_TYPE=c++_static \
                -DCMAKE_ANDROID_API=${{ matrix.android_api }} -DDAWN_BUILD_SAMPLES=OFF \
                -DDAWN_BUILD_TESTS=OFF -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGLES=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
          esac

      - name: Build Dawn
        run: |
          cd dawn-source/build-${{ matrix.platform }}
          if [ "${{ matrix.target_os }}" = "win" ]; then
            cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
          else
            ninja -j4
          fi
          echo "✅ Dawn 编译完成"

      - name: Configure Skia
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          python3 tools/git-sync-deps
          args="is_official_build=false is_debug=false extra_cflags=[\"-O2\",\"-g\"]"
          args="$args skia_use_dawn=true skia_dawn_dir=\"../../dawn-source\""
          args="$args skia_use_system_expat=false skia_use_system_icu=false skia_use_system_libjpeg_turbo=false"
          args="$args skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false"
          args="$args skia_enable_pdf=true skia_enable_skottie=true skia_enable_skshaper=true skia_enable_svg=true skia_use_icu=true"
          args="$args skia_enable_gpu=true skia_use_gl=true skia_use_vulkan=true skia_enable_spirv_validation=false skia_enable_tools=false"
          args="$args target_os=\"${{ matrix.target_os }}\" target_cpu=\"${{ matrix.arch }}\""
          case "${{ matrix.target_os }}" in
            win)
              args="$args skia_use_angle=true skia_use_direct3d=true skia_use_freetype=true"
              args="$args skia_use_system_freetype2=false skia_use_harfbuzz=true skia_use_system_harfbuzz=false"
              args="$args cc=\"clang\" cxx=\"clang++\" clang_win=\"C:/Program Files/LLVM\""
              ;;
            linux)
              args="$args skia_use_x11=true skia_use_freetype=true skia_use_fontconfig=true skia_use_harfbuzz=true"
              args="$args cc=\"clang-18\" cxx=\"clang++-18\""
              ;;
            android)
              args="$args ndk=\"$ANDROID_NDK_HOME\" android_api_level=${{ matrix.android_api }}"
              args="$args skia_use_system_freetype2=false skia_use_freetype=true skia_enable_fontmgr_android=true"
              ;;
          esac
          echo "BUILD_ARGS=$args" >> $GITHUB_ENV

      - name: GN Generate Skia
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          bin/gn gen out/Release --args="$BUILD_ARGS"

      - name: Build Skia
        run: |
          cd skia-build/skia
          ninja -C out/Release -j4
          echo "✅ Skia 编译完成"

      - name: Collect Dawn generated files
        run: |
          mkdir -p dawn-generated/{include/{dawn,webgpu},src/{dawn,emdawnwebgpu},webgpu-headers}
          for dir in include dawn gen/include; do
            cp -r dawn-source/build-${{ matrix.platform }}/gen/$dir/* dawn-generated/include/dawn/ 2>/dev/null || true
          done
          cp -r dawn-source/build-${{ matrix.platform }}/gen/include/webgpu/* dawn-generated/include/webgpu/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/src/dawn/* dawn-generated/src/dawn/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/src/emdawnwebgpu/* dawn-generated/src/emdawnwebgpu/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/webgpu-headers/* dawn-generated/webgpu-headers/ 2>/dev/null || true

      - name: Package Skia + Dawn
        run: |
          # 目录结构
          mkdir -p Skia/{include/{core,dawn,modules},lib/${{ matrix.target_os }}/${{ matrix.arch }},bin/${{ matrix.target_os }}/${{ matrix.arch }}}
          cp -r skia-build/skia/include/* Skia/include/core/
          cp -r skia-build/skia/modules/* Skia/include/modules/ 2>/dev/null || true
          cp -r dawn-source/include/* Skia/include/dawn/ 2>/dev/null || true
          cp -r dawn-generated/include/* Skia/include/dawn/ 2>/dev/null || true

          if [ "${{ matrix.target_os }}" = "win" ]; then
            find skia-build/skia/out/Release -name "*.{lib,dll}" -exec cp {} Skia/{lib,bin}/${{ matrix.target_os }}/${{ matrix.arch }}/ \; 2>/dev/null
            find dawn-source/build-${{ matrix.platform }}/${{ BUILD_TYPE }} -name "*.{lib,dll}" -exec cp {} Skia/{lib,bin}/${{ matrix.target_os }}/${{ matrix.arch }}/ \; 2>/dev/null
          else
            find skia-build/skia/out/Release -name "*.{a,so}" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \; 2>/dev/null
            find dawn-source/build-${{ matrix.platform }} -name "*.{a,so}" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \; 2>/dev/null
          fi

      - name: Create CMake files
        run: |
          cat > Skia/CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.20)
          project(SkiaDawnPrebuilt VERSION 1.0.0 LANGUAGES CXX C)
          set(CMAKE_CXX_STANDARD 20)
          get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
          if(WIN32)
            set(PLATFORM_DIR "win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8) set(ARCH_DIR "x64") else() set(ARCH_DIR "x86") endif()
          elseif(ANDROID)
            set(PLATFORM_DIR "android")
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a") set(ARCH_DIR "arm64") else() set(ARCH_DIR "x64") endif()
          else()
            set(PLATFORM_DIR "linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8) set(ARCH_DIR "x64") else() set(ARCH_DIR "x86") endif()
          endif()
          set(LIB_DIR "${SKIA_ROOT_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
          set(BIN_DIR "${SKIA_ROOT_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

          add_library(DawnDynamic INTERFACE)
          target_include_directories(DawnDynamic INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/dawn>
            $<INSTALL_INTERFACE:include/dawn>
          )
          file(GLOB DAWN_LIBS "${LIB_DIR}/*dawn*.a" "${LIB_DIR}/*dawn*.lib" "${LIB_DIR}/*webgpu*.a" "${LIB_DIR}/*webgpu*.lib")
          target_link_libraries(DawnDynamic INTERFACE ${DAWN_LIBS})

          add_library(Skia INTERFACE)
          add_library(skia::skia ALIAS Skia)
          target_include_directories(Skia INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/core>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/dawn>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/modules>
            $<INSTALL_INTERFACE:include>
          )
          file(GLOB SKIA_LIBS "${LIB_DIR}/*skia*.a" "${LIB_DIR}/*skia*.lib")
          target_link_libraries(Skia INTERFACE ${SKIA_LIBS} DawnDynamic)

          if(WIN32)
            target_link_libraries(Skia INTERFACE d3d11 d3d12 dxgi dxguid d3dcompiler opengl32 vulkan-1 gdi32 user32 kernel32 ole32 oleaut32 uuid advapi32 shell32 usp10 ws2_32)
            target_compile_definitions(Skia INTERFACE SK_GANESH=1 SK_VULKAN=1 SK_GL=1 SK_DIRECT3D=1 SK_DAWN=1 WIN32_LEAN_AND_MEAN NOMINMAX)
          elseif(ANDROID)
            target_link_libraries(Skia INTERFACE GLESv2 EGL vulkan android log jnigraphics mediandk dl m z)
            target_compile_definitions(Skia INTERFACE ANDROID SK_GANESH=1 SK_VULKAN=1 SK_GL=1 SK_DAWN=1 __ANDROID_API__=21)
          else()
            target_link_libraries(Skia INTERFACE GL vulkan X11 Xrandr Xinerama Xcursor Xi pthread dl m)
            target_compile_definitions(Skia INTERFACE SK_GANESH=1 SK_VULKAN=1 SK_GL=1 SK_DAWN=1)
          endif()

          export(TARGETS Skia DawnDynamic FILE SkiaTargets.cmake)
          EOF

          cat > Skia/SkiaConfig.cmake << 'EOF'
          include(CMakeFindDependencyMacro)
          include("${CMAKE_CURRENT_LIST_DIR}/SkiaTargets.cmake")
          set(Skia_FOUND TRUE)
          set(Skia_VERSION "1.0.0")
          EOF

          cat > Skia/SkiaConfigVersion.cmake << 'EOF'
          set(PACKAGE_VERSION "1.0.0")
          if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if(PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF

      - name: Zip & Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            ${{ matrix.platform }}.zip
          retention-days: 30
