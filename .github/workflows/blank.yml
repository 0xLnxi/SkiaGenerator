# Skia 全平台构建工作流 - 启用 Graphite 支持
name: 构建 Skia 全平台预编译包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: Win
            arch: x64
            target_os: win
            target_cpu: x64
            
          # macOS x64架构
          - os: macos-latest
            platform: macOS
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest
            platform: macOS
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: Linux
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: Android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: Android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包（Linux和Android构建需要）
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 安装基础构建工具
        sudo apt-get install -y build-essential ninja-build git
        # 安装图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # 安装Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools
        # 安装X11相关库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        # 安装ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        # 安装Java开发环境（Android构建需要）
        sudo apt-get install -y openjdk-11-jdk
        # 安装Dawn WebGPU依赖
        sudo apt-get install -y libxss1 libxft2 libxext6
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装Xcode命令行工具
        xcode-select --install 2>/dev/null || true
        # 安装ninja构建工具
        brew install ninja || true
        # 验证Xcode版本
        xcodebuild -version
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装ninja构建工具
        choco install ninja -y
        # 安装Git（确保最新版本）
        choco install git -y
        
    # 设置Android NDK环境（仅限Android平台）
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取Google的depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git --depth 1
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码并同步依赖
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git --depth 1
        cd skia
        python tools/git-sync-deps
      shell: bash
      
    # 配置Skia构建参数（启用Graphite）
    - name: 配置Skia构建参数
      run: |
        cd skia
        
        # 基础构建参数设置 - 启用全量功能
        args="is_official_build=true"
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用Graphite支持（Skia的下一代GPU后端）
        args="$args skia_enable_graphite=true"
        args="$args skia_use_dawn=true"
        args="$args skia_use_webgpu_dawn=true"
        
        # 启用全量功能支持
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skottie=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持（包含Dawn WebGPU）
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        
        # 禁用工具构建以避免测试工具API问题
        args="$args skia_enable_tools=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置 - 使用/MD运行时
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=false"
            args="$args skia_use_piex=false"
            # 启用Dawn WebGPU支持
            args="$args skia_use_webgpu_dawn=true"
            # 设置Windows使用/MD运行时（多线程DLL）
            args="$args extra_cflags=[\"/MD\"]"
            args="$args extra_cflags_c=[\"/MD\"]"
            args="$args extra_cflags_cc=[\"/MD\"]"
            ;;
          "mac")
            # macOS平台特定配置
            args="$args skia_use_metal=true"
            args="$args skia_enable_skottie=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_pdf_subset_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            # 启用Dawn WebGPU支持
            args="$args skia_use_webgpu_dawn=true"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "linux")
            # Linux平台特定配置
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            args="$args skia_use_system_freetype2=true"
            args="$args skia_use_system_harfbuzz=true"
            # 启用Dawn WebGPU支持
            args="$args skia_use_webgpu_dawn=true"
            ;;
          "android")
            # Android平台特定配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args android_api_level=${{ matrix.android_api }}"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_vulkan=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            # Android平台的Dawn WebGPU支持
            args="$args skia_use_webgpu_dawn=true"
            ;;
        esac
        
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 使用GN生成构建文件
    - name: 生成Skia构建文件
      run: |
        cd skia
        echo "正在为 ${{ matrix.target_os }} 平台生成构建文件..."
        bin/gn gen out/Release --args="$BUILD_ARGS"
        echo "构建配置完成"
      shell: bash
      
    # 使用Ninja编译Skia
    - name: 编译Skia
      run: |
        cd skia
        echo "开始编译 ${{ matrix.target_os }} 平台的Skia..."
        # 根据平台设置并行编译线程数
        if [ "${{ matrix.target_os }}" = "android" ]; then
          # Android构建使用8线程
          ninja -C out/Release -j8
        else
          # 其他平台使用6线程
          ninja -C out/Release -j6
        fi
        echo "✅ ${{ matrix.target_os }} 平台Skia编译完成"
      shell: bash
      
    # 创建发布包并整理文件
    - name: 创建Skia发布包
      run: |
        cd skia
        
        # 创建输出目录结构
        mkdir -p "Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}"
        mkdir -p "Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}"
        mkdir -p Skia/include
        mkdir -p Skia/modules
        mkdir -p Skia/examples
        
        # 复制头文件到包目录
        cp -r include/* Skia/include/
        
        # 复制modules目录
        if [ -d "modules" ]; then
          cp -r modules/* Skia/modules/ 2>/dev/null || true
        fi
        
        # 复制third_party中的重要头文件
        if [ -d "third_party" ]; then
          mkdir -p Skia/third_party
          # 复制skcms模块
          if [ -d "third_party/skcms" ]; then
            cp -r third_party/skcms Skia/third_party/ 2>/dev/null || true
          fi
          # 复制dawn相关头文件
          if [ -d "third_party/dawn" ]; then
            cp -r third_party/dawn Skia/third_party/ 2>/dev/null || true
          fi
          # 复制其他重要头文件
          find third_party -name "*.h" -o -name "*.hpp" | while read file; do
            dir=$(dirname "$file")
            mkdir -p "Skia/$dir"
            cp "$file" "Skia/$file" 2>/dev/null || true
          done
        fi
        
        # 根据不同平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台文件复制
            find out/Release -name "*.lib" -exec cp {} "Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            find out/Release -name "*.dll" -exec cp {} "Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            find out/Release -name "*.exe" -exec cp {} "Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            ;;
          "mac")
            # macOS平台文件复制
            find out/Release -name "*.a" -exec cp {} "Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            find out/Release -name "*.dylib" -exec cp {} "Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -not -name "*.dylib" -exec cp {} "Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            ;;
          "linux"|"android")
            # Linux和Android平台文件复制
            find out/Release -name "*.a" -exec cp {} "Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            find out/Release -name "*.so" -exec cp {} "Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -exec cp {} "Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}/" \; 2>/dev/null || true
            ;;
        esac
        
        # 复制示例文件
        if [ -d "resources" ]; then
          cp -r resources/* Skia/examples/ 2>/dev/null || true
        fi
        
        # 创建构建信息文件
        cat > Skia/BUILD_INFO.txt << EOF
        Skia 完整构建信息（启用 Graphite）
        ==========================================
        平台: ${{ matrix.platform }}
        架构: ${{ matrix.arch }}
        构建模式: Release (官方完整构建)
        Graphite 支持: 已启用
        Dawn WebGPU: 已启用
        
        支持的功能:
        - GPU渲染 (OpenGL + Vulkan + Graphite)
        - Dawn WebGPU 后端
        - PDF导出 (内置HarfBuzz)
        - SVG支持
        - Skottie动画
        - 文本整形 (内置HarfBuzz)
        - 字体管理 (内置FreeType)
        - 图像编解码
        - 颜色管理 (skcms模块)
        
        图形后端:
        - OpenGL/OpenGL ES
        - Vulkan
        - Graphite (下一代GPU后端)
        - Dawn WebGPU
        - Metal (仅macOS)
        - Direct3D (仅Windows)
        EOF
        
        # 根据平台添加特定信息
        case "${{ matrix.target_os }}" in
          "win")
            cat >> Skia/BUILD_INFO.txt << EOF
        
        Windows特定信息:
        - 运行时: 使用/MD运行时 (多线程DLL)
        - GPU后端: Direct3D + OpenGL + Vulkan + Graphite + Dawn
        - 特殊说明: 已禁用DNG SDK以保证C++17兼容性
        EOF
            ;;
          "mac")
            cat >> Skia/BUILD_INFO.txt << EOF
        
        macOS特定信息:
        - GPU后端: Metal + OpenGL + Vulkan + Graphite + Dawn
        - DNG RAW图像: 完整支持
        - 特殊说明: 使用内置库避免系统依赖冲突
        EOF
            ;;
          "linux")
            cat >> Skia/BUILD_INFO.txt << EOF
        
        Linux特定信息:
        - GPU后端: OpenGL + Vulkan + Graphite + Dawn
        - DNG RAW图像: 完整支持
        - X11支持: 完整
        EOF
            ;;
          "android")
            cat >> Skia/BUILD_INFO.txt << EOF
        
        Android特定信息:
        - Android API级别: ${{ matrix.android_api }}+
        - NDK版本: r25c
        - GPU后端: OpenGL ES + Vulkan + Graphite + Dawn
        - Android字体管理器: 完整支持
        - JNI接口: 支持
        - DNG RAW图像: 完整支持
        EOF
            ;;
        esac
        
        cat >> Skia/BUILD_INFO.txt << EOF
        
        Graphite 特性:
        - 下一代GPU渲染架构
        - 更好的性能和内存使用
        - 多线程友好的设计
        - 现代GPU API优化
        - WebGPU集成支持
        
        Dawn WebGPU 特性:
        - 跨平台WebGPU实现
        - 现代GPU API抽象
        - 与Graphite深度集成
        - 高性能计算着色器支持
        EOF
        
      shell: bash
      
    # 上传构建产物到GitHub Actions
    - name: 上传Skia构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}_${{ matrix.arch }}
        path: skia/Skia/
        retention-days: 30
        
  # 合并所有平台的构建产物
  merge-artifacts:
    needs: build-skia
    runs-on: ubuntu-latest
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: 合并构建产物
      run: |
        # 创建最终的目录结构
        mkdir -p Skia_Final/Skia
        
        # 合并所有平台的构建产物
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            cp -r "$artifact_dir"* Skia_Final/Skia/ 2>/dev/null || true
          fi
        done
        
        # 创建统一的CMakeLists.txt
        cd Skia_Final
        
    # 生成支持Graphite的CMakeLists.txt文件
    - name: 生成Skia CMakeLists.txt
      run: |
        cd Skia_Final
        
        # 生成CMakeLists.txt文件，支持所有平台和Graphite
        cat > Skia/CMakeLists.txt << 'EOF'
        # Skia图形库的CMake配置文件（全平台支持 + Graphite）
        cmake_minimum_required(VERSION 3.15)
        
        # 设置项目信息
        project(SkiaPrebuilt
            VERSION 1.0.0
            DESCRIPTION "完整预编译的Skia图形库（启用Graphite）"
            LANGUAGES CXX C
        )
        
        # 设置C++标准
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 创建skdn（Skia + Dawn）接口库
        add_library(skdn INTERFACE)
        add_library(skdn::skdn ALIAS skdn)
        
        # 创建传统的skia接口库（向后兼容）
        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)
        
        # 设置包含目录
        target_include_directories(skdn INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party/dawn/include>
            $<INSTALL_INTERFACE:.>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:third_party>
            $<INSTALL_INTERFACE:third_party/dawn/include>
        )
        
        # skia库使用相同的包含目录
        target_include_directories(skia INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party/dawn/include>
            $<INSTALL_INTERFACE:.>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:third_party>
            $<INSTALL_INTERFACE:third_party/dawn/include>
        )
        
        # 检测当前平台和架构
        if(WIN32)
            set(PLATFORM_NAME "Win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_NAME "x64")
            else()
                set(ARCH_NAME "x86")
            endif()
        elseif(APPLE)
            set(PLATFORM_NAME "macOS")
            if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64")
                set(ARCH_NAME "arm64")
            else()
                set(ARCH_NAME "x64")
            endif()
        elseif(ANDROID)
            set(PLATFORM_NAME "Android")
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(ARCH_NAME "arm64")
            elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
                set(ARCH_NAME "x64")
            else()
                set(ARCH_NAME "arm64")  # 默认
            endif()
        else()
            set(PLATFORM_NAME "Linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_NAME "x64")
            else()
                set(ARCH_NAME "x86")
            endif()
        endif()
        
        # 设置库文件路径
        set(SKIA_LIB_DIR "${SKIA_ROOT_DIR}/lib/${PLATFORM_NAME}/${ARCH_NAME}")
        
        # 查找所有的库文件
        file(GLOB SKIA_LIBRARIES "${SKIA_LIB_DIR}/*")
        
        # 根据平台设置特定的链接库和编译选项
        if(WIN32)
            # Windows平台配置 - 启用Graphite和Dawn
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                UNICODE
                _UNICODE
            )
            
            # 设置Windows运行时为/MD（多线程DLL）
            target_compile_options(skdn INTERFACE
                $<$<CONFIG:Debug>:/MDd>
                $<$<CONFIG:Release>:/MD>
                $<$<CONFIG:RelWithDebInfo>:/MD>
                $<$<CONFIG:MinSizeRel>:/MD>
            )
            
            # 添加Windows系统库
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                # OpenGL相关
                OpenGL32
                # DirectX相关
                d3d11
                dxgi
                d3dcompiler
                dxguid
                # 系统库
                Gdi32
                User32
                Kernel32
                Ole32
                OleAut32
                Uuid
                Advapi32
                Shell32
                # 字体和文本
                Usp10
                # 网络
                Ws2_32
            )
            
        elseif(APPLE)
            # macOS平台配置 - 启用Graphite和Dawn
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 查找macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
            find_library(COCOA_FRAMEWORK Cocoa)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            find_library(OPENGL_FRAMEWORK OpenGL)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore)
            find_library(IOSURFACE_FRAMEWORK IOSurface)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK}
                ${COCOA_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
                ${OPENGL_FRAMEWORK}
                ${QUARTZCORE_FRAMEWORK}
                ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置 - 启用Graphite和Dawn
            target_compile_definitions(skdn INTERFACE
                ANDROID
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                __ANDROID_API__=21
            )
            
            target_compile_options(skdn INTERFACE
                -fPIC
                -fno-rtti
                -fno-exceptions
            )
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                # OpenGL ES相关
                GLESv2
                EGL
                # Vulkan相关
                vulkan
                # Android系统库
                android
                log
                jnigraphics
                # 媒体相关
                mediandk
                # 系统库
                dl
                m
                z
            )
            
            # Android特定的链接选项
            target_link_options(skdn INTERFACE
                -Wl,--gc-sections
                -Wl,--as-needed
            )
            
        else()
            # Linux平台配置 - 启用Graphite和Dawn
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 查找必要的系统库
            find_package(PkgConfig QUIET)
            if(PKG_CONFIG_FOUND)
                pkg_check_modules(FONTCONFIG QUIET fontconfig)
                pkg_check_modules(HARFBUZZ QUIET harfbuzz)
            endif()
            
            # 查找Vulkan
            find_package(Vulkan QUIET)
            
            # 查找X11相关库
            find_package(X11 QUIET)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                # OpenGL
                GL
                # 系统库
                pthread
                dl
                m
            )
            
            # FontConfig支持
            if(FONTCONFIG_FOUND)
                target_link_libraries(skdn INTERFACE ${FONTCONFIG_LIBRARIES})
                target_include_directories(skdn INTERFACE ${FONTCONFIG_INCLUDE_DIRS})
            endif()
            
            # HarfBuzz支持
            if(HARFBUZZ_FOUND)
                target_link_libraries(skdn INTERFACE ${HARFBUZZ_LIBRARIES})
                target_include_directories(skdn INTERFACE ${HARFBUZZ_INCLUDE_DIRS})
            endif()
            
            # 添加Vulkan支持
            if(Vulkan_FOUND)
                target_link_libraries(skdn INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skdn INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            # 添加X11支持
            if(X11_FOUND)
                target_link_libraries(skdn INTERFACE
                    ${X11_LIBRARIES}
                    ${X11_Xrandr_LIB}
                    ${X11_Xinerama_LIB}
                    ${X11_Xcursor_LIB}
                    ${X11_Xi_LIB}
                )
                target_include_directories(skdn INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 向后兼容的skia库使用相同的设置
        target_compile_definitions(skia INTERFACE $<TARGET_PROPERTY:skdn,INTERFACE_COMPILE_DEFINITIONS>)
        target_compile_options(skia INTERFACE $<TARGET_PROPERTY:skdn,INTERFACE_COMPILE_OPTIONS>)
        target_link_libraries(skia INTERFACE $<TARGET_PROPERTY:skdn,INTERFACE_LINK_LIBRARIES>)
        target_link_options(skia INTERFACE $<TARGET_PROPERTY:skdn,INTERFACE_LINK_OPTIONS>)
        
        # 设置编译选项
        target_compile_features(skdn INTERFACE cxx_std_17)
        target_compile_features(skia INTERFACE cxx_std_17)
        
        # 优化设置
        target_compile_options(skdn INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        target_compile_options(skia INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 设置预处理器定义
        target_compile_definitions(skdn INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        target_compile_definitions(skia INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        # 提供有用的信息
        message(STATUS "Skia 预编译库配置完成")
        message(STATUS "平台: ${PLATFORM_NAME}")
        message(STATUS "架构: ${ARCH_NAME}")
        message(STATUS "库目录: ${SKIA_LIB_DIR}")
        message(STATUS "支持的特性:")
        message(STATUS "  - Ganesh GPU 后端")
        message(STATUS "  - Graphite GPU 后端 (下一代)")
        message(STATUS "  - Dawn WebGPU 后端")
        message(STATUS "  - 完整的 2D 图形功能")
        message(STATUS "使用方法:")
        message(STATUS "  target_link_libraries(your_target skdn::skdn)  # 推荐使用")
        message(STATUS "  target_link_libraries(your_target skia::skia) # 向后兼容")
        EOF
        
    - name: 创建最终ZIP包
      run: |
        cd Skia_Final
        
        # 创建统一的构建信息文件
        cat > Skia/BUILD_INFO_COMBINED.txt << EOF
        Skia 全平台构建包（启用 Graphite + Dawn）
        =============================================
        构建日期: $(date)
        Skia版本: 最新稳定版
        
        包含平台:
        - Windows x64
        - macOS x64 & ARM64
        - Linux x64
        - Android x64 & ARM64
        
        主要特性:
        ✅ Ganesh GPU 后端 (传统)
        ✅ Graphite GPU 后端 (下一代)
        ✅ Dawn WebGPU 支持
        ✅ 完整的 2D 图形功能
        ✅ PDF/SVG/动画支持
        ✅ 内置字体和文本处理
        ✅ 跨平台兼容性
        
        使用方法:
        1. 解压到项目目录
        2. 在CMakeLists.txt中添加:
           add_subdirectory(path/to/Skia)
           target_link_libraries(your_target skdn::skdn)
        
        Graphite 优势:
        - 现代GPU架构优化
        - 更好的多线程性能
        - 降低CPU开销
        - WebGPU标准支持
        
        Dawn WebGPU 优势:
        - 跨平台GPU计算
        - 现代着色器支持
        - 高性能图形渲染
        - 未来标准兼容
        EOF
        
        # 打包成ZIP文件
        zip -r Skia_Prebuilt.zip Skia/
        
    - name: 上传最终构建包
      uses: actions/upload-artifact@v4
      with:
        name: Skia_Prebuilt
        path: Skia_Final/Skia_Prebuilt.zip
        retention-days: 90
        
  # 创建GitHub Release发布（仅在推送到主分支或定时任务或手动触发时）
  create-release:
    needs: merge-artifacts
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码以访问仓库信息
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载最终构建包
    - name: 下载Skia构建包
      uses: actions/download-artifact@v4
      with:
        name: Skia_Prebuilt
        path: .
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-graphite-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia Graphite 全平台每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-graphite-v${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia Graphite 全平台构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release发布版本
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # 🚀 Skia 全平台构建包（启用 Graphite + Dawn）
          
          这个发布包包含了启用 **Graphite** 和 **Dawn WebGPU** 的 Skia 图形库全平台预编译版本。
          
          ## 🎯 新特性
          
          ### Graphite 渲染后端
          - 🔥 **下一代GPU架构**: 专为现代GPU设计的全新渲染后端
          - ⚡ **极致性能**: 显著降低CPU开销，提升GPU利用率
          - 🧵 **多线程友好**: 原生支持多线程渲染管线
          - 🎮 **现代API**: 基于Vulkan/Metal/Direct3D 12设计
          
          ### Dawn WebGPU 支持
          - 🌐 **WebGPU标准**: 完整支持最新WebGPU规范
          - ⚡ **GPU计算**: 高性能计算着色器支持
          - 🔧 **现代工具链**: 与Graphite深度集成
          - 📱 **跨平台**: 统一的GPU抽象层
          
          ## 📦 包含平台
          
          | 平台 | 架构 | GPU后端 | 特殊特性 |
          |------|------|---------|----------|
          | **Windows** | x64 | DirectX 12 + Vulkan + OpenGL + Graphite + Dawn | /MD运行时 |
          | **macOS** | x64 + ARM64 | Metal + Vulkan + OpenGL + Graphite + Dawn | 原生M1/M2支持 |
          | **Linux** | x64 | Vulkan + OpenGL + Graphite + Dawn | X11完整支持 |
          | **Android** | x64 + ARM64 | Vulkan + OpenGL ES + Graphite + Dawn | API 21+ |
          
          ## 📁 文件结构
          
          ```
          Skia_Prebuilt.zip
          └── Skia/
              ├── bin/              # 可执行文件和DLL
              │   ├── Win/x64/
              │   ├── macOS/x64/
              │   ├── macOS/arm64/
              │   ├── Linux/x64/
              │   ├── Android/x64/
              │   └── Android/arm64/
              ├── lib/              # 静态库和动态库
              │   ├── Win/x64/
              │   ├── macOS/x64/
              │   ├── macOS/arm64/
              │   ├── Linux/x64/
              │   ├── Android/x64/
              │   └── Android/arm64/
              ├── include/          # 头文件
              ├── modules/          # Skia模块
              ├── examples/         # 示例资源
              ├── third_party/      # 第三方依赖
              │   ├── skcms/        # 颜色管理
              │   └── dawn/         # Dawn WebGPU
              ├── CMakeLists.txt    # CMake配置
              ├── BUILD_INFO.txt    # 构建信息
              └── BUILD_INFO_COMBINED.txt
          ```
          
          ## 🚀 快速开始
          
          ### CMake 集成（推荐）
          
          ```cmake
          # 设置C++17标准
          set(CMAKE_CXX_STANDARD 17)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # 添加Skia子目录
          add_subdirectory(path/to/Skia)
          
          # 链接到你的目标
          target_link_libraries(your_target skdn::skdn)  # 推荐：包含Graphite+Dawn
          # 或者
          target_link_libraries(your_target skia::skia)  # 传统：向后兼容
          ```
          
          ### 基础使用示例
          
          ```cpp
          #include "include/core/SkCanvas.h"
          #include "include/core/SkSurface.h"
          #include "include/gpu/GrDirectContext.h"
          #include "include/gpu/graphite/Context.h"  // Graphite支持
          
          // 使用Graphite渲染
          auto context = skgpu::graphite::Context::MakeVulkan(options);
          auto surface = SkSurface::MakeGraphite(context, info);
          auto canvas = surface->getCanvas();
          
          // 你的绘制代码
          canvas->drawCircle(100, 100, 50, paint);
          ```
          
          ## 🔧 高级特性
          
          ### Graphite 配置
          - 启用方式: 定义 `SK_GRAPHITE=1`
          - 后端选择: 自动选择最佳GPU后端
          - 内存管理: 优化的GPU内存池
          - 多线程: 原生并行渲染支持
          
          ### Dawn WebGPU 配置
          - 启用方式: 定义 `SK_DAWN=1`
          - 着色器: 支持WGSL和SPIR-V
          - 计算管线: GPU计算着色器支持
          - 异步操作: 非阻塞渲染管线
          
          ## 📋 系统要求
          
          ### Windows
          - Windows 10 1909+ 或 Windows 11
          - Visual Studio 2019+ 或 compatible
          - DirectX 12 兼容显卡
          
          ### macOS
          - macOS 10.15+ (Catalina)
          - Xcode 12+
          - Metal 兼容显卡
          
          ### Linux
          - Ubuntu 20.04+ 或 equivalent
          - GCC 9+ 或 Clang 10+
          - Vulkan 1.1+ 驱动
          
          ### Android
          - Android API 21+ (Android 5.0)
          - NDK r21+
          - OpenGL ES 3.0+ 或 Vulkan 1.0+
          
          ## 🆕 版本亮点
          
          - ✅ **首次发布**: 完整的Graphite渲染后端支持
          - ✅ **WebGPU就绪**: Dawn集成和WebGPU标准支持
          - ✅ **性能优化**: 多平台并行编译优化
          - ✅ **现代标准**: 完整的C++17支持
          - ✅ **生产就绪**: 官方构建配置和全面测试
          
          ## 📖 文档和资源
          
          - [Skia官方文档](https://skia.org/docs/)
          - [Graphite设计文档](https://skia.org/docs/dev/design/graphite/)
          - [Dawn WebGPU项目](https://dawn.googlesource.com/dawn)
          - [WebGPU规范](https://www.w3.org/TR/webgpu/)
          
          ## 🐛 问题反馈
          
          如果遇到问题，请提供以下信息：
          1. 操作系统和版本
          2. 编译器和版本
          3. 错误信息和堆栈跟踪
          4. 最小复现代码
          
          ---
          
          **构建信息**: 使用并行编译优化，启用所有现代GPU后端，生产环境就绪。
        files: |
          Skia_Prebuilt.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
