# Skia + Dawn WebGPU 全平台构建工作流
name: 编译 Skia+Dawn 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

env:
  # 编译优化设置
  PARALLEL_JOBS: 6
  ANDROID_PARALLEL_JOBS: 8

jobs:
  build-skia-dawn:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: Win_x64
            arch: x64
            target_os: win
            target_cpu: x64
            
          # macOS x64架构
          - os: macos-latest
            platform: macOS_x64
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest
            platform: macOS_arm64
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: Linux_x64
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: Android_x64
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: Android_arm64
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 安装基础构建工具
        sudo apt-get install -y build-essential ninja-build cmake
        # 安装图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # 安装Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools
        # 安装X11相关库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        # 安装ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        # 安装Java开发环境（Android构建需要）
        sudo apt-get install -y openjdk-11-jdk
        # 安装额外的开发库
        sudo apt-get install -y libwayland-dev libxkbcommon-dev
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装Xcode命令行工具
        xcode-select --install 2>/dev/null || true
        # 安装构建工具
        brew install ninja cmake || true
        # 验证Xcode版本
        xcodebuild -version
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装构建工具
        choco install ninja cmake -y
        
    # 设置Android NDK环境
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
      shell: bash
      
    # 获取Dawn源代码
    - name: 获取Dawn源代码
      run: |
        git clone https://dawn.googlesource.com/dawn.git
        cd dawn
        # 同步Dawn的依赖
        cp scripts/standalone.gclient .gclient
        gclient sync
      shell: bash
      
    # 配置Dawn构建参数
    - name: 配置Dawn构建参数
      run: |
        cd dawn
        
        # Dawn基础构建参数
        dawn_args="is_debug=false"
        dawn_args="$dawn_args dawn_enable_vulkan=true"
        dawn_args="$dawn_args dawn_enable_desktop_gl=true"
        dawn_args="$dawn_args dawn_enable_opengles=true"
        dawn_args="$dawn_args dawn_use_swiftshader=false"
        dawn_args="$dawn_args dawn_enable_null=false"
        dawn_args="$dawn_args dawn_build_samples=false"
        
        # 设置C++20标准
        dawn_args="$dawn_args use_custom_libcxx=false"
        
        # 设置目标平台
        dawn_args="$dawn_args target_os=\"${{ matrix.target_os }}\""
        dawn_args="$dawn_args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台 - 启用DirectX后端
            dawn_args="$dawn_args dawn_enable_d3d12=true"
            dawn_args="$dawn_args dawn_enable_d3d11=true"
            dawn_args="$dawn_args dawn_enable_metal=false"
            # 使用/MD运行时
            dawn_args="$dawn_args use_custom_libcxx=false"
            ;;
          "mac")
            # macOS平台 - 启用Metal后端
            dawn_args="$dawn_args dawn_enable_metal=true"
            dawn_args="$dawn_args dawn_enable_d3d12=false"
            dawn_args="$dawn_args dawn_enable_d3d11=false"
            ;;
          "linux")
            # Linux平台 - 仅Vulkan和OpenGL
            dawn_args="$dawn_args dawn_enable_metal=false"
            dawn_args="$dawn_args dawn_enable_d3d12=false"
            dawn_args="$dawn_args dawn_enable_d3d11=false"
            ;;
          "android")
            # Android平台配置
            dawn_args="$dawn_args ndk=\"$ANDROID_NDK_ROOT\""
            dawn_args="$dawn_args android_api_level=${{ matrix.android_api }}"
            dawn_args="$dawn_args dawn_enable_metal=false"
            dawn_args="$dawn_args dawn_enable_d3d12=false"
            dawn_args="$dawn_args dawn_enable_d3d11=false"
            ;;
        esac
        
        echo "DAWN_BUILD_ARGS=$dawn_args" >> $GITHUB_ENV
      shell: bash
      
    # 配置Skia构建参数（启用Dawn）
    - name: 配置Skia构建参数
      run: |
        cd skia
        
        # Skia基础构建参数
        args="is_official_build=true"
        args="$args cc=\"clang\""
        args="$args cxx=\"clang++\""
        
        # 设置C++20标准
        args="$args extra_cflags=[\"-std=c++20\"]"
        args="$args extra_cflags_cc=[\"-std=c++20\"]"
        
        # 使用内置依赖
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用全量功能支持
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skottie=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        
        # 启用Dawn WebGPU支持
        args="$args skia_use_dawn=true"
        args="$args dawn_dir=\"../dawn\""
        
        # 禁用工具构建
        args="$args skia_enable_tools=false"
        
        # 设置目标平台
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台配置
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=false"
            args="$args skia_use_piex=false"
            # 设置Windows使用/MD运行时
            args="$args extra_cflags=[\"/MD\", \"-std=c++20\"]"
            args="$args extra_cflags_c=[\"/MD\"]"
            args="$args extra_cflags_cc=[\"/MD\", \"-std=c++20\"]"
            ;;
          "mac")
            # macOS平台配置
            args="$args skia_use_metal=true"
            args="$args skia_enable_skottie=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            ;;
          "linux")
            # Linux平台配置
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            args="$args skia_use_system_freetype2=true"
            args="$args skia_use_system_harfbuzz=true"
            ;;
          "android")
            # Android平台配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args android_api_level=${{ matrix.android_api }}"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            ;;
        esac
        
        echo "SKIA_BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 编译Dawn
    - name: 编译Dawn
      run: |
        cd dawn
        echo "开始编译 ${{ matrix.target_os }} 平台的Dawn..."
        
        # 生成构建文件
        gn gen out/Release --args="$DAWN_BUILD_ARGS"
        
        # 编译Dawn
        if [ "${{ matrix.target_os }}" = "android" ]; then
          ninja -C out/Release -j${{ env.ANDROID_PARALLEL_JOBS }}
        else
          ninja -C out/Release -j${{ env.PARALLEL_JOBS }}
        fi
        
        echo "✅ ${{ matrix.target_os }} 平台Dawn编译完成"
      shell: bash
      
    # 编译Skia
    - name: 编译Skia
      run: |
        cd skia
        echo "开始编译 ${{ matrix.target_os }} 平台的Skia（启用Dawn）..."
        
        # 生成构建文件
        bin/gn gen out/Release --args="$SKIA_BUILD_ARGS"
        
        # 编译Skia
        if [ "${{ matrix.target_os }}" = "android" ]; then
          ninja -C out/Release -j${{ env.ANDROID_PARALLEL_JOBS }}
        else
          ninja -C out/Release -j${{ env.PARALLEL_JOBS }}
        fi
        
        echo "✅ ${{ matrix.target_os }} 平台Skia编译完成"
      shell: bash
      
    # 创建发布包
    - name: 创建Skia+Dawn发布包
      run: |
        # 创建包目录结构
        mkdir -p Skia_Prebuilt/Skia/bin/${{ matrix.platform }}
        mkdir -p Skia_Prebuilt/Skia/lib/${{ matrix.platform }}
        mkdir -p Skia_Prebuilt/Skia/include
        mkdir -p Skia_Prebuilt/Skia/modules
        mkdir -p Skia_Prebuilt/Skia/examples
        mkdir -p Skia_Prebuilt/Skia/dawn/include
        mkdir -p Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}
        mkdir -p Skia_Prebuilt/Skia/dawn/bin/${{ matrix.platform }}
        
        # 复制Skia头文件
        cp -r skia/include/* Skia_Prebuilt/Skia/include/
        
        # 复制Skia模块
        if [ -d "skia/modules" ]; then
          cp -r skia/modules/* Skia_Prebuilt/Skia/modules/ 2>/dev/null || true
        fi
        
        # 复制third_party相关文件
        if [ -d "skia/third_party" ]; then
          mkdir -p Skia_Prebuilt/Skia/third_party
          find skia/third_party -name "*.h" -o -name "*.hpp" | while read file; do
            dir=$(dirname "$file")
            mkdir -p "Skia_Prebuilt/Skia/$dir"
            cp "$file" "Skia_Prebuilt/Skia/$file" 2>/dev/null || true
          done
        fi
        
        # 复制Dawn头文件
        cp -r dawn/include/* Skia_Prebuilt/Skia/dawn/include/
        
        # 复制示例文件
        if [ -d "skia/resources" ]; then
          cp -r skia/resources/* Skia_Prebuilt/Skia/examples/ 2>/dev/null || true
        fi
        
        # 根据平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台 - 复制Skia文件
            find skia/out/Release -name "*.lib" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            find skia/out/Release -name "*.dll" -exec cp {} Skia_Prebuilt/Skia/bin/${{ matrix.platform }}/ \; 2>/dev/null || true
            find skia/out/Release -name "*.exe" -exec cp {} Skia_Prebuilt/Skia/bin/${{ matrix.platform }}/ \; 2>/dev/null || true
            # 复制Dawn文件
            find dawn/out/Release -name "*.lib" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            find dawn/out/Release -name "*.dll" -exec cp {} Skia_Prebuilt/Skia/dawn/bin/${{ matrix.platform }}/ \; 2>/dev/null || true
            find dawn/out/Release -name "*.exe" -exec cp {} Skia_Prebuilt/Skia/dawn/bin/${{ matrix.platform }}/ \; 2>/dev/null || true
            ;;
          "mac")
            # macOS平台 - 复制Skia文件
            find skia/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            find skia/out/Release -name "*.dylib" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            # 复制Dawn文件
            find dawn/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            find dawn/out/Release -name "*.dylib" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            ;;
          "linux"|"android")
            # Linux和Android平台 - 复制Skia文件
            find skia/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            find skia/out/Release -name "*.so" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            # 复制Dawn文件
            find dawn/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            find dawn/out/Release -name "*.so" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/ \; 2>/dev/null || true
            ;;
        esac
        
        # 创建构建信息文件
        cat > Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        Skia + Dawn WebGPU 完整构建信息
        ================================
        平台: ${{ matrix.target_os }}
        架构: ${{ matrix.target_cpu }}
        包名: ${{ matrix.platform }}
        构建模式: Release (官方完整构建)
        C++标准: C++20
        
        支持的功能:
        - GPU渲染 (OpenGL + Vulkan + Dawn WebGPU)
        - PDF导出 (内置HarfBuzz)
        - SVG支持
        - Skottie动画
        - 文本整形 (内置HarfBuzz)
        - 字体管理 (内置FreeType)
        - 图像编解码
        - 颜色管理 (skcms模块)
        - Dawn WebGPU支持
        
        图形后端:
        - OpenGL/OpenGL ES
        - Vulkan
        - Dawn WebGPU
        EOF
        
        # 根据平台添加特定信息
        case "${{ matrix.target_os }}" in
          "win")
            cat >> Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        - Metal (仅macOS)
        - Direct3D 11/12 (Windows)
        
        Windows特定信息:
        - 运行时: 使用/MD运行时 (多线程DLL)
        - GPU后端: Direct3D 11/12 + OpenGL + Vulkan + Dawn WebGPU
        - Dawn后端: D3D11, D3D12, Vulkan
        EOF
            ;;
          "mac")
            cat >> Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        - Metal (macOS)
        
        macOS特定信息:
        - GPU后端: Metal + OpenGL + Vulkan + Dawn WebGPU
        - Dawn后端: Metal, Vulkan, OpenGL
        EOF
            ;;
          "linux")
            cat >> Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        
        Linux特定信息:
        - GPU后端: OpenGL + Vulkan + Dawn WebGPU
        - Dawn后端: Vulkan, OpenGL
        - X11支持: 完整
        EOF
            ;;
          "android")
            cat >> Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        
        Android特定信息:
        - Android API级别: ${{ matrix.android_api }}+
        - NDK版本: r25c
        - GPU后端: OpenGL ES + Vulkan + Dawn WebGPU
        - Dawn后端: Vulkan, OpenGL ES
        - Android字体管理器: 完整支持
        EOF
            ;;
        esac
        
        cat >> Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        
        特殊说明:
        - C++20标准编译
        - 包含完整的Dawn WebGPU支持
        - 所有依赖都已静态链接
        - 生产环境就绪
        - 统一的CMake接口（skdn）
        EOF
        
      shell: bash
      
    # 生成CMakeLists.txt
    - name: 生成CMakeLists.txt
      run: |
        cd Skia_Prebuilt/Skia
        
        # 生成统一的CMakeLists.txt文件
        cat > CMakeLists.txt << 'EOF'
        # Skia + Dawn WebGPU 图形库的CMake配置文件（全平台支持）
        cmake_minimum_required(VERSION 3.20)
        
        # 设置项目信息
        project(SkiaDawnPrebuilt
            VERSION 1.0.0
            DESCRIPTION "完整预编译的Skia+Dawn WebGPU图形库"
            LANGUAGES CXX C
        )
        
        # 设置C++20标准
        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        set(CMAKE_CXX_EXTENSIONS OFF)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 检测当前平台和架构
        if(WIN32)
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(PLATFORM_DIR "Win_x64")
            else()
                message(FATAL_ERROR "不支持的Windows架构")
            endif()
            set(SKIA_PLATFORM "Windows")
        elseif(APPLE)
            if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64")
                set(PLATFORM_DIR "macOS_arm64")
            else()
                set(PLATFORM_DIR "macOS_x64")
            endif()
            set(SKIA_PLATFORM "macOS")
        elseif(ANDROID)
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(PLATFORM_DIR "Android_arm64")
            elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
                set(PLATFORM_DIR "Android_x64")
            else()
                message(FATAL_ERROR "不支持的Android架构: ${CMAKE_ANDROID_ARCH_ABI}")
            endif()
            set(SKIA_PLATFORM "Android")
        elseif(UNIX)
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(PLATFORM_DIR "Linux_x64")
            else()
                message(FATAL_ERROR "不支持的Linux架构")
            endif()
            set(SKIA_PLATFORM "Linux")
        else()
            message(FATAL_ERROR "不支持的平台")
        endif()
        
        message(STATUS "检测到平台: ${SKIA_PLATFORM}")
        message(STATUS "使用平台目录: ${PLATFORM_DIR}")
        
        # 验证平台目录存在
        if(NOT EXISTS "${SKIA_ROOT_DIR}/lib/${PLATFORM_DIR}")
            message(FATAL_ERROR "找不到平台目录: ${SKIA_ROOT_DIR}/lib/${PLATFORM_DIR}")
        endif()
        
        # 创建skdn (Skia + Dawn) 接口库
        add_library(skdn INTERFACE)
        add_library(skdn::skdn ALIAS skdn)
        
        # 设置包含目录
        target_include_directories(skdn INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/dawn/include>
            $<INSTALL_INTERFACE:.>
            $<INSTALL_INTERFACE:include>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:third_party>
            $<INSTALL_INTERFACE:dawn/include>
        )
        
        # 查找Skia库文件
        file(GLOB SKIA_LIBRARIES "${SKIA_ROOT_DIR}/lib/${PLATFORM_DIR}/*")
        file(GLOB DAWN_LIBRARIES "${SKIA_ROOT_DIR}/dawn/lib/${PLATFORM_DIR}/*")
        
        # 设置预处理器定义
        target_compile_definitions(skdn INTERFACE
            SK_GANESH=1
            SK_ENABLE_SKOTTIE=1
            SK_ENABLE_SVG=1
            # Dawn WebGPU相关定义
            DAWN_ENABLE_WGPU=1
        )
        
        # 根据平台设置特定的链接库和编译选项
        if(WIN32)
            # Windows平台配置
            target_compile_definitions(skdn INTERFACE
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                UNICODE
                _UNICODE
                # Dawn Windows后端
                DAWN_ENABLE_D3D12=1
                DAWN_ENABLE_D3D11=1
                DAWN_ENABLE_VULKAN=1
            )
            
            # 设置Windows运行时为/MD
            target_compile_options(skdn INTERFACE
                $<$<CONFIG:Debug>:/MDd>
                $<$<CONFIG:Release>:/MD>
                $<$<CONFIG:RelWithDebInfo>:/MD>
                $<$<CONFIG:MinSizeRel>:/MD>
            )
            
            # 添加Windows系统库
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                # OpenGL相关
                OpenGL32
                # DirectX相关
                d3d11 d3d12 dxgi d3dcompiler dxguid
                # 系统库
                Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid Advapi32 Shell32
                # 字体和文本
                Usp10
                # 网络
                Ws2_32
            )
            
        elseif(APPLE)
            # macOS平台配置
            target_compile_definitions(skdn INTERFACE
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                # Dawn Metal后端
                DAWN_ENABLE_METAL=1
                DAWN_ENABLE_VULKAN=1
            )
            
            # 查找macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
            find_library(COCOA_FRAMEWORK Cocoa)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            find_library(OPENGL_FRAMEWORK OpenGL)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore)
            find_library(IOSURFACE_FRAMEWORK IOSurface)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK}
                ${COCOA_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
                ${OPENGL_FRAMEWORK}
                ${QUARTZCORE_FRAMEWORK}
                ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置
            target_compile_definitions(skdn INTERFACE
                ANDROID
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                __ANDROID_API__=21
                # Dawn Android后端
                DAWN_ENABLE_VULKAN=1
                DAWN_ENABLE_OPENGLES=1
            )
            
            target_compile_options(skdn INTERFACE
                -fPIC
                -fno-rtti
                -fno-exceptions
            )
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                # OpenGL ES相关
                GLESv2 EGL
                # Vulkan相关
                vulkan
                # Android系统库
                android log jnigraphics
                # 媒体相关
                mediandk
                # 系统库
                dl m z
            )
            
            # Android特定的链接选项
            target_link_options(skdn INTERFACE
                -Wl,--gc-sections
                -Wl,--as-needed
            )
            
        else()
            # Linux平台配置
            target_compile_definitions(skdn INTERFACE
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                # Dawn Linux后端
                DAWN_ENABLE_VULKAN=1
                DAWN_ENABLE_DESKTOP_GL=1
            )
            
            # 查找必要的系统库
            find_package(PkgConfig QUIET)
            if(PKG_CONFIG_FOUND)
                pkg_check_modules(FONTCONFIG QUIET fontconfig)
                pkg_check_modules(HARFBUZZ QUIET harfbuzz)
            endif()
            
            # 查找Vulkan
            find_package(Vulkan QUIET)
            
            # 查找X11相关库
            find_package(X11 QUIET)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                # OpenGL
                GL
                # 系统库
                pthread dl m
            )
            
            # FontConfig支持
            if(FONTCONFIG_FOUND)
                target_link_libraries(skdn INTERFACE ${FONTCONFIG_LIBRARIES})
                target_include_directories(skdn INTERFACE ${FONTCONFIG_INCLUDE_DIRS})
            endif()
            
            # HarfBuzz支持
            if(HARFBUZZ_FOUND)
                target_link_libraries(skdn INTERFACE ${HARFBUZZ_LIBRARIES})
                target_include_directories(skdn INTERFACE ${HARFBUZZ_INCLUDE_DIRS})
            endif()
            
            # 添加Vulkan支持
            if(Vulkan_FOUND)
                target_link_libraries(skdn INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skdn INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            # 添加X11支持
            if(X11_FOUND)
                target_link_libraries(skdn INTERFACE
                    ${X11_LIBRARIES}
                    ${X11_Xrandr_LIB}
                    ${X11_Xinerama_LIB}
                    ${X11_Xcursor_LIB}
                    ${X11_Xi_LIB}
                )
                target_include_directories(skdn INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 设置编译特性
        target_compile_features(skdn INTERFACE cxx_std_20)
        
        # 优化设置
        target_compile_options(skdn INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 设置预处理器定义
        target_compile_definitions(skdn INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        # 导出信息
        message(STATUS "Skia + Dawn WebGPU库配置完成")
        message(STATUS "平台: ${SKIA_PLATFORM} (${PLATFORM_DIR})")
        message(STATUS "C++标准: C++${CMAKE_CXX_STANDARD}")
        message(STATUS "使用方法: target_link_libraries(your_target skdn::skdn)")
        EOF
        
      shell: bash
      
    # 打包发布
    - name: 打包Skia+Dawn构建产物
      run: |
        # 创建最终的ZIP包
        if [ "${{ runner.os }}" = "Windows" ]; then
          powershell "Compress-Archive -Path Skia_Prebuilt/* -DestinationPath Skia_Prebuilt_${{ matrix.platform }}.zip"
        else
          cd Skia_Prebuilt
          zip -r "../Skia_Prebuilt_${{ matrix.platform }}.zip" *
        fi
        
        echo "✅ Skia_Prebuilt_${{ matrix.platform }}.zip 构建包创建完成"
      shell: bash
      
    # 上传构建产物
    - name: 上传Skia+Dawn构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia_Prebuilt_${{ matrix.platform }}
        path: Skia_Prebuilt_${{ matrix.platform }}.zip
        retention-days: 30
        compression-level: 0
        
  # 创建合并包
  create-merged-release:
    needs: build-skia-dawn
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 创建合并的发布包
    - name: 创建合并的Skia+Dawn发布包
      run: |
        # 创建合并目录结构
        mkdir -p merged/Skia
        
        # 初始化目录结构
        mkdir -p merged/Skia/{bin,lib,include,modules,examples,dawn,third_party}
        mkdir -p merged/Skia/dawn/{include,bin,lib}
        
        # 处理每个平台的构建产物
        for artifact_dir in artifacts/Skia_Prebuilt_*; do
          if [ -d "$artifact_dir" ]; then
            platform_name=$(basename "$artifact_dir" | sed 's/Skia_Prebuilt_//')
            echo "处理平台: $platform_name"
            
            # 解压ZIP文件
            cd "$artifact_dir"
            unzip -q *.zip
            cd - > /dev/null
            
            # 复制bin和lib到对应平台目录
            if [ -d "$artifact_dir/Skia/bin" ]; then
              find "$artifact_dir/Skia/bin" -mindepth 1 -maxdepth 1 -type d | while read platform_bin_dir; do
                platform_dir=$(basename "$platform_bin_dir")
                mkdir -p "merged/Skia/bin/$platform_dir"
                cp -r "$platform_bin_dir"/* "merged/Skia/bin/$platform_dir/" 2>/dev/null || true
              done
            fi
            
            if [ -d "$artifact_dir/Skia/lib" ]; then
              find "$artifact_dir/Skia/lib" -mindepth 1 -maxdepth 1 -type d | while read platform_lib_dir; do
                platform_dir=$(basename "$platform_lib_dir")
                mkdir -p "merged/Skia/lib/$platform_dir"
                cp -r "$platform_lib_dir"/* "merged/Skia/lib/$platform_dir/" 2>/dev/null || true
              done
            fi
            
            # 复制Dawn的bin和lib
            if [ -d "$artifact_dir/Skia/dawn/bin" ]; then
              find "$artifact_dir/Skia/dawn/bin" -mindepth 1 -maxdepth 1 -type d | while read platform_bin_dir; do
                platform_dir=$(basename "$platform_bin_dir")
                mkdir -p "merged/Skia/dawn/bin/$platform_dir"
                cp -r "$platform_bin_dir"/* "merged/Skia/dawn/bin/$platform_dir/" 2>/dev/null || true
              done
            fi
            
            if [ -d "$artifact_dir/Skia/dawn/lib" ]; then
              find "$artifact_dir/Skia/dawn/lib" -mindepth 1 -maxdepth 1 -type d | while read platform_lib_dir; do
                platform_dir=$(basename "$platform_lib_dir")
                mkdir -p "merged/Skia/dawn/lib/$platform_dir"
                cp -r "$platform_lib_dir"/* "merged/Skia/dawn/lib/$platform_dir/" 2>/dev/null || true
              done
            fi
            
            # 复制头文件和其他共享文件（只需要复制一次）
            if [ ! -f "merged/Skia/include/.copied" ]; then
              if [ -d "$artifact_dir/Skia/include" ]; then
                cp -r "$artifact_dir/Skia/include"/* merged/Skia/include/ 2>/dev/null || true
              fi
              if [ -d "$artifact_dir/Skia/modules" ]; then
                cp -r "$artifact_dir/Skia/modules"/* merged/Skia/modules/ 2>/dev/null || true
              fi
              if [ -d "$artifact_dir/Skia/third_party" ]; then
                cp -r "$artifact_dir/Skia/third_party"/* merged/Skia/third_party/ 2>/dev/null || true
              fi
              if [ -d "$artifact_dir/Skia/examples" ]; then
                cp -r "$artifact_dir/Skia/examples"/* merged/Skia/examples/ 2>/dev/null || true
              fi
              if [ -d "$artifact_dir/Skia/dawn/include" ]; then
                cp -r "$artifact_dir/Skia/dawn/include"/* merged/Skia/dawn/include/ 2>/dev/null || true
              fi
              # 复制CMakeLists.txt
              if [ -f "$artifact_dir/Skia/CMakeLists.txt" ]; then
                cp "$artifact_dir/Skia/CMakeLists.txt" merged/Skia/
              fi
              touch merged/Skia/include/.copied
            fi
          fi
        done
        
        # 删除标记文件
        rm -f merged/Skia/include/.copied
        
        # 创建全平台构建信息
        cat > merged/Skia/BUILD_INFO.txt << EOF
        Skia + Dawn WebGPU 全平台构建包
        ===============================
        构建时间: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        C++标准: C++20
        构建模式: Release (官方完整构建)
        
        包含平台:
        - Windows x64 (DirectX 11/12 + Vulkan + OpenGL + Dawn WebGPU)
        - macOS x64 (Metal + Vulkan + OpenGL + Dawn WebGPU)
        - macOS ARM64 (Metal + Vulkan + OpenGL + Dawn WebGPU)
        - Linux x64 (Vulkan + OpenGL + Dawn WebGPU)
        - Android x64 (Vulkan + OpenGL ES + Dawn WebGPU)
        - Android ARM64 (Vulkan + OpenGL ES + Dawn WebGPU)
        
        支持的功能:
        - 完整的Skia核心功能
        - Dawn WebGPU图形API
        - GPU加速渲染
        - PDF导出和SVG支持
        - Skottie动画支持
        - 文本整形和字体管理
        - 图像编解码
        - 颜色管理
        
        使用方法:
        1. 解压到项目目录
        2. 在CMakeLists.txt中添加:
           add_subdirectory(path/to/Skia)
           target_link_libraries(your_target skdn::skdn)
        
        注意事项:
        - 需要C++20编译器支持
        - 自动检测平台并链接对应的库文件
        - 包含完整的头文件和依赖
        - 生产环境就绪
        EOF
        
        # 打包合并的发布包
        cd merged
        zip -r "../Skia_Prebuilt.zip" *
        cd ..
        
        echo "✅ 合并的Skia_Prebuilt.zip创建完成"
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-dawn-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia+Dawn WebGPU全平台每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-dawn-v${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia+Dawn WebGPU全平台构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia + Dawn WebGPU 全平台构建包
          
          这个发布包包含了Skia图形库和Dawn WebGPU在多个平台的完整预编译版本，支持所有核心功能和WebGPU图形API。
          
          ## 📦 包含的平台
          
          ### 桌面平台
          - **Windows x64** 
            - 图形后端: DirectX 11/12 + Vulkan + OpenGL + Dawn WebGPU
            - 运行时: /MD (多线程DLL)
          
          - **macOS Intel x64 & Apple Silicon ARM64**
            - 图形后端: Metal + Vulkan + OpenGL + Dawn WebGPU
            - 完整支持原生Metal性能
          
          - **Linux x64**
            - 图形后端: Vulkan + OpenGL + Dawn WebGPU
            - X11完整支持
          
          ### 移动平台
          - **Android x64 & ARM64**
            - 图形后端: Vulkan + OpenGL ES + Dawn WebGPU
            - Android API级别: 21+
            - NDK版本: r25c
          
          ## 🚀 使用方法
          
          ### CMake集成（推荐）
          ```cmake
          # 设置C++20标准
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # 添加Skia+Dawn库
          add_subdirectory(path/to/Skia)
          
          # 链接到你的项目
          target_link_libraries(your_target skdn::skdn)
          ```
          
          ### 基础使用示例
          ```cpp
          #include "include/core/SkCanvas.h"
          #include "include/core/SkSurface.h"
          #include "include/gpu/GrDirectContext.h"
          #include "webgpu/webgpu_cpp.h"
          
          // 使用Skia渲染
          auto surface = SkSurface::MakeRasterN32Premul(800, 600);
          auto canvas = surface->getCanvas();
          
          // 使用Dawn WebGPU
          wgpu::Instance instance = wgpu::CreateInstance();
          ```
          
          ## ✨ 主要特性
          
          - **🎨 完整的Skia功能**: 2D图形渲染、文本处理、PDF/SVG支持
          - **🌐 Dawn WebGPU支持**: 现代WebGPU图形API，跨平台统一接口
          - **⚡ GPU加速**: 支持所有主流图形后端
          - **📱 移动友好**: 完整的Android平台支持
          - **🔧 易于集成**: 统一的CMake接口（skdn）
          - **🏗️ 生产就绪**: C++20标准，稳定性优先
          - **📦 零依赖**: 所有依赖已静态链接
          
          ## 📋 技术规格
          
          - **C++标准**: C++20
          - **构建模式**: Release (优化构建)
          - **图形API**: OpenGL, Vulkan, Metal (macOS), DirectX (Windows), WebGPU
          - **平台检测**: 自动检测并链接对应平台库
          - **运行时**: Windows使用/MD，其他平台使用标准运行时
          
          ## 📁 文件结构
          
          ```
          Skia_Prebuilt.zip
          └── Skia/
              ├── bin/           # 各平台可执行文件
              │   ├── Win_x64/
              │   ├── macOS_x64/
              │   ├── macOS_arm64/
              │   ├── Linux_x64/
              │   ├── Android_x64/
              │   └── Android_arm64/
              ├── lib/           # 各平台库文件
              │   └── [同上结构]
              ├── include/       # Skia头文件
              ├── modules/       # Skia模块
              ├── examples/      # 示例资源
              ├── dawn/          # Dawn WebGPU
              │   ├── include/   # Dawn头文件
              │   ├── bin/       # Dawn可执行文件
              │   └── lib/       # Dawn库文件
              ├── third_party/   # 第三方依赖
              ├── CMakeLists.txt # CMake配置
              └── BUILD_INFO.txt # 构建信息
          ```
          
          ## 🔗 下载说明
          
          - **Skia_Prebuilt.zip**: 包含所有平台的完整构建包
          - **单平台包**: 如果只需要特定平台，可下载对应的单平台ZIP包
          
          ## 🆘 支持和反馈
          
          如果在使用过程中遇到问题，请在项目的Issues页面报告。
          
          ---
          
          🎉 享受使用Skia+Dawn WebGPU带来的强大图形渲染能力！
        files: |
          Skia_Prebuilt.zip
          artifacts/*/*.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: 构建完成通知
      run: |
        echo "🎉 Skia+Dawn WebGPU全平台构建完成！"
        echo ""
        echo "📦 构建包信息:"
        echo "   • 主包: Skia_Prebuilt.zip (包含所有平台)"
        echo "   • 平台: Windows, macOS (x64+ARM64), Linux, Android (x64+ARM64)"
        echo "   • C++标准: C++20"
        echo ""
        echo "🎮 图形后端支持:"
        echo "   • Windows: DirectX 11/12 + Vulkan + OpenGL + Dawn WebGPU"
        echo "   • macOS: Metal + Vulkan + OpenGL + Dawn WebGPU"
        echo "   • Linux: Vulkan + OpenGL + Dawn WebGPU"
        echo "   • Android: Vulkan + OpenGL ES + Dawn WebGPU"
        echo ""
        echo "✨ 主要特性:"
        echo "   • 统一CMake接口 (skdn::skdn)"
        echo "   • 自动平台检测和库链接"
        echo "   • 完整的Dawn WebGPU支持"
        echo "   • 所有依赖静态链接"
        echo "   • 生产环境就绪"
        echo ""
        echo "🔗 获取方式:"
        echo "   • Actions页面下载构建产物"
        echo "   • Releases页面下载正式发布版"
        echo ""
        echo "🚀 使用方法:"
        echo "   add_subdirectory(path/to/Skia)"
        echo "   target_link_libraries(your_target skdn::skdn)"
