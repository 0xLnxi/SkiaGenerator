# Skia Graphite + Dawn WebGPU 全平台构建工作流
name: 构建 Skia Graphite 全平台预编译包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每周日北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * 0'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia-graphite:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: Win
            arch: x64
            target_os: win
            target_cpu: x64
            
          # macOS x64架构
          - os: macos-13  # Intel Mac
            platform: macOS
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest  # Apple Silicon Mac
            platform: macOS
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: Linux
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: Android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: Android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 基础构建工具
        sudo apt-get install -y build-essential ninja-build pkg-config
        # 图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools
        # X11相关库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        # WebGPU/Dawn依赖
        sudo apt-get install -y libxss1 libgconf-2-4 libgtk-3-dev libxss1
        # ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        # Java开发环境（Android构建需要）
        sudo apt-get install -y openjdk-11-jdk
        # Git LFS for large files
        sudo apt-get install -y git-lfs
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装ninja构建工具
        brew install ninja pkg-config
        # 验证Xcode版本
        xcodebuild -version
        # 安装Git LFS
        brew install git-lfs
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装ninja构建工具
        choco install ninja -y
        # 安装Git LFS
        choco install git-lfs -y
        
    # 设置Android NDK环境
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取depot_tools
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows depot_tools环境
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        # 初始化Git LFS
        git lfs install
        # 同步依赖
        python tools/git-sync-deps
      shell: bash
      
    # 获取Dawn WebGPU源代码
    - name: 获取Dawn WebGPU源代码
      run: |
        cd skia
        # 获取Dawn作为third_party依赖
        git clone https://dawn.googlesource.com/dawn.git third_party/externals/dawn
        cd third_party/externals/dawn
        # 初始化Dawn依赖
        cp scripts/standalone.gclient .gclient
        gclient sync
      shell: bash
      
    # 配置Skia Graphite + Dawn构建参数
    - name: 配置Skia Graphite构建参数
      run: |
        cd skia
        
        # 基础构建参数 - 启用Graphite和WebGPU
        args="is_official_build=true"
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用Graphite新图形API
        args="$args skia_enable_graphite=true"
        args="$args skia_enable_ganesh=true"
        
        # 启用Dawn WebGPU后端
        args="$args skia_use_dawn=true"
        args="$args skia_use_webgpu=true"
        
        # 启用全量功能支持
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skottie=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        
        # 禁用工具构建
        args="$args skia_enable_tools=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            # Windows WebGPU后端配置
            args="$args dawn_enable_d3d11=true"
            args="$args dawn_enable_d3d12=true"
            args="$args dawn_enable_vulkan=true"
            args="$args dawn_enable_desktop_gl=true"
            # 设置运行时
            args="$args extra_cflags=[\"/MD\"]"
            args="$args extra_cflags_c=[\"/MD\"]"
            args="$args extra_cflags_cc=[\"/MD\"]"
            ;;
          "mac")
            # macOS平台特定配置
            args="$args skia_use_metal=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            # macOS WebGPU后端配置
            args="$args dawn_enable_metal=true"
            args="$args dawn_enable_vulkan=true"
            args="$args dawn_enable_desktop_gl=true"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "linux")
            # Linux平台特定配置
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_freetype2=true"
            args="$args skia_use_system_harfbuzz=true"
            # Linux WebGPU后端配置
            args="$args dawn_enable_vulkan=true"
            args="$args dawn_enable_desktop_gl=true"
            ;;
          "android")
            # Android平台特定配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args android_api_level=${{ matrix.android_api }}"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_vulkan=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            # Android WebGPU后端配置
            args="$args dawn_enable_vulkan=true"
            args="$args dawn_enable_opengles=true"
            ;;
        esac
        
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 生成构建文件
    - name: 生成Skia Graphite构建文件
      run: |
        cd skia
        echo "正在为 ${{ matrix.target_os }} 平台生成Graphite构建文件..."
        bin/gn gen out/Release --args="$BUILD_ARGS"
        echo "Graphite构建配置完成"
      shell: bash
      
    # 编译Skia Graphite
    - name: 编译Skia Graphite
      run: |
        cd skia
        echo "开始编译 ${{ matrix.target_os }} 平台的Skia Graphite..."
        if [ "${{ matrix.target_os }}" = "android" ]; then
          ninja -C out/Release -j8
        else
          ninja -C out/Release -j6
        fi
        echo "✅ ${{ matrix.target_os }} 平台Skia Graphite编译完成"
      shell: bash
      
    # 创建平台特定的发布包
    - name: 创建平台构建包
      run: |
        cd skia
        
        # 创建平台特定的目录结构
        platform_dir="build-output/${{ matrix.platform }}/${{ matrix.arch }}"
        mkdir -p "$platform_dir/bin"
        mkdir -p "$platform_dir/lib"
        mkdir -p "$platform_dir/include"
        mkdir -p "$platform_dir/modules"
        
        # 复制头文件
        cp -r include/* "$platform_dir/include/"
        
        # 复制modules
        if [ -d "modules" ]; then
          cp -r modules/* "$platform_dir/modules/" 2>/dev/null || true
        fi
        
        # 复制third_party头文件
        if [ -d "third_party" ]; then
          mkdir -p "$platform_dir/third_party"
          find third_party -name "*.h" -o -name "*.hpp" | while read file; do
            dir=$(dirname "$file")
            mkdir -p "$platform_dir/$dir"
            cp "$file" "$platform_dir/$file" 2>/dev/null || true
          done
        fi
        
        # 复制Dawn头文件
        if [ -d "third_party/externals/dawn/include" ]; then
          mkdir -p "$platform_dir/dawn"
          cp -r third_party/externals/dawn/include/* "$platform_dir/dawn/" 2>/dev/null || true
        fi
        
        # 根据平台复制库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            find out/Release -name "*.lib" -exec cp {} "$platform_dir/lib/" \; 2>/dev/null || true
            find out/Release -name "*.dll" -exec cp {} "$platform_dir/bin/" \; 2>/dev/null || true
            find out/Release -name "*.exe" -exec cp {} "$platform_dir/bin/" \; 2>/dev/null || true
            ;;
          "mac")
            find out/Release -name "*.a" -exec cp {} "$platform_dir/lib/" \; 2>/dev/null || true
            find out/Release -name "*.dylib" -exec cp {} "$platform_dir/lib/" \; 2>/dev/null || true
            ;;
          "linux"|"android")
            find out/Release -name "*.a" -exec cp {} "$platform_dir/lib/" \; 2>/dev/null || true
            find out/Release -name "*.so" -exec cp {} "$platform_dir/lib/" \; 2>/dev/null || true
            ;;
        esac
        
        # 创建构建信息文件
        cat > "$platform_dir/BUILD_INFO.txt" << EOF
        Skia Graphite + Dawn WebGPU 构建信息
        ====================================
        平台: ${{ matrix.platform }}
        架构: ${{ matrix.arch }}
        目标OS: ${{ matrix.target_os }}
        目标CPU: ${{ matrix.target_cpu }}
        构建模式: Release (官方构建)
        
        启用的功能:
        - Skia Graphite (下一代图形API)
        - Dawn WebGPU后端
        - GPU渲染 (OpenGL + Vulkan + Metal + Direct3D)
        - PDF导出支持
        - SVG支持
        - Skottie动画
        - 文本整形支持
        - 字体管理
        - 图像编解码
        - 颜色管理
        
        特殊说明:
        - 同时支持传统Ganesh和新Graphite API
        - WebGPU通过Dawn后端提供跨平台支持
        - 所有依赖已静态链接
        - 生产环境就绪
        EOF
        
      shell: bash
      
    # 上传平台构建产物
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: skia/build-output/${{ matrix.platform }}/${{ matrix.arch }}
        retention-days: 30
        
  # 整合所有平台的构建产物
  package-release:
    needs: build-skia-graphite
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 创建统一包结构
    - name: 创建Skia_Prebuilt.zip
      run: |
        # 创建目标目录结构
        mkdir -p Skia/bin
        mkdir -p Skia/lib
        mkdir -p Skia/include
        mkdir -p Skia/modules
        mkdir -p Skia/examples
        
        # 复制所有平台的构建产物
        for platform_dir in artifacts/*/; do
          platform_name=$(basename "$platform_dir")
          echo "处理平台: $platform_name"
          
          # 解析平台名称和架构
          if [[ "$platform_name" == *"-"* ]]; then
            platform=$(echo "$platform_name" | cut -d'-' -f1)
            arch=$(echo "$platform_name" | cut -d'-' -f2)
          else
            platform="$platform_name"
            arch="x64"
          fi
          
          # 创建平台特定目录
          mkdir -p "Skia/bin/$platform/$arch"
          mkdir -p "Skia/lib/$platform/$arch"
          
          # 复制文件
          if [ -d "$platform_dir/bin" ]; then
            cp -r "$platform_dir"/bin/* "Skia/bin/$platform/$arch/" 2>/dev/null || true
          fi
          
          if [ -d "$platform_dir/lib" ]; then
            cp -r "$platform_dir"/lib/* "Skia/lib/$platform/$arch/" 2>/dev/null || true
          fi
          
          # 复制头文件（只需要复制一次）
          if [ ! -d "Skia/include/core" ] && [ -d "$platform_dir/include" ]; then
            cp -r "$platform_dir"/include/* Skia/include/ 2>/dev/null || true
          fi
          
          # 复制modules（只需要复制一次）
          if [ ! -d "Skia/modules/skcms" ] && [ -d "$platform_dir/modules" ]; then
            cp -r "$platform_dir"/modules/* Skia/modules/ 2>/dev/null || true
          fi
          
          # 复制third_party（只需要复制一次）
          if [ ! -d "Skia/third_party" ] && [ -d "$platform_dir/third_party" ]; then
            cp -r "$platform_dir/third_party" Skia/ 2>/dev/null || true
          fi
          
          # 复制Dawn头文件（只需要复制一次）
          if [ ! -d "Skia/dawn" ] && [ -d "$platform_dir/dawn" ]; then
            cp -r "$platform_dir/dawn" Skia/ 2>/dev/null || true
          fi
        done
        
        # 创建示例文件
        mkdir -p Skia/examples
        cat > Skia/examples/hello_graphite.cpp << 'EOF'
        // Skia Graphite + Dawn WebGPU 示例
        #include "include/core/SkCanvas.h"
        #include "include/core/SkSurface.h"
        #include "include/gpu/graphite/Context.h"
        #include "include/gpu/graphite/Surface.h"
        #include "include/gpu/graphite/dawn/DawnBackendContext.h"
        
        // 这是一个展示如何使用Skia Graphite与Dawn WebGPU的基础示例
        // 实际使用时需要根据具体平台初始化WebGPU设备
        EOF
        
        cat > Skia/examples/CMakeLists.txt << 'EOF'
        # Skia Graphite + Dawn 示例项目
        cmake_minimum_required(VERSION 3.15)
        project(SkiaGraphiteExample)
        
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 添加父目录的Skia
        add_subdirectory(.. skia_build)
        
        # 创建示例可执行文件
        add_executable(hello_graphite hello_graphite.cpp)
        target_link_libraries(hello_graphite skdn)
        EOF
        
      shell: bash
      
    # 生成统一的CMakeLists.txt
    - name: 生成统一CMakeLists.txt
      run: |
        cat > Skia/CMakeLists.txt << 'EOF'
        # Skia Graphite + Dawn WebGPU 全平台CMake配置
        cmake_minimum_required(VERSION 3.15)
        
        project(SkiaGraphitePrebuilt
            VERSION 1.0.0
            DESCRIPTION "Skia Graphite + Dawn WebGPU 预编译库"
            LANGUAGES CXX C
        )
        
        # 设置C++标准
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 自动检测平台
        if(WIN32)
            set(SKIA_PLATFORM "Win")
        elseif(APPLE)
            set(SKIA_PLATFORM "macOS")
        elseif(ANDROID)
            set(SKIA_PLATFORM "Android")
        else()
            set(SKIA_PLATFORM "Linux")
        endif()
        
        # 自动检测架构
        if(CMAKE_SIZEOF_VOID_P EQUAL 8)
            if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64|ARM64")
                set(SKIA_ARCH "arm64")
            else()
                set(SKIA_ARCH "x64")
            endif()
        else()
            set(SKIA_ARCH "x86")
        endif()
        
        # 设置库和二进制文件路径
        set(SKIA_LIB_DIR "${SKIA_ROOT_DIR}/lib/${SKIA_PLATFORM}/${SKIA_ARCH}")
        set(SKIA_BIN_DIR "${SKIA_ROOT_DIR}/bin/${SKIA_PLATFORM}/${SKIA_ARCH}")
        
        # 检查目录是否存在
        if(NOT EXISTS "${SKIA_LIB_DIR}")
            message(FATAL_ERROR "Skia库目录不存在: ${SKIA_LIB_DIR}")
        endif()
        
        # 创建skdn接口库 (Skia + Dawn)
        add_library(skdn INTERFACE)
        add_library(skdn::skdn ALIAS skdn)
        
        # 设置包含目录
        target_include_directories(skdn INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/dawn>
            $<INSTALL_INTERFACE:.>
            $<INSTALL_INTERFACE:include>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:third_party>
            $<INSTALL_INTERFACE:dawn>
        )
        
        # 查找所有库文件
        file(GLOB SKIA_LIBRARIES "${SKIA_LIB_DIR}/*")
        
        # 根据平台设置特定配置
        if(WIN32)
            # Windows平台配置
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                UNICODE
                _UNICODE
            )
            
            # Windows运行时配置
            target_compile_options(skdn INTERFACE
                $<$<CONFIG:Debug>:/MDd>
                $<$<CONFIG:Release>:/MD>
                $<$<CONFIG:RelWithDebInfo>:/MD>
                $<$<CONFIG:MinSizeRel>:/MD>
            )
            
            # Windows系统库
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                # DirectX相关
                d3d11 d3d12 dxgi d3dcompiler dxguid
                # OpenGL相关
                OpenGL32
                # 系统库
                Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid
                Advapi32 Shell32 Usp10 Ws2_32
            )
            
        elseif(APPLE)
            # macOS平台配置
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
            find_library(COCOA_FRAMEWORK Cocoa)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            find_library(OPENGL_FRAMEWORK OpenGL)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore)
            find_library(IOSURFACE_FRAMEWORK IOSurface)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK}
                ${COCOA_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
                ${OPENGL_FRAMEWORK}
                ${QUARTZCORE_FRAMEWORK}
                ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置
            target_compile_definitions(skdn INTERFACE
                ANDROID
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                __ANDROID_API__=21
            )
            
            target_compile_options(skdn INTERFACE
                -fPIC -fno-rtti -fno-exceptions
            )
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                GLESv2 EGL vulkan
                android log jnigraphics mediandk
                dl m z
            )
            
        else()
            # Linux平台配置
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 查找系统库
            find_package(PkgConfig QUIET)
            find_package(Vulkan QUIET)
            find_package(X11 QUIET)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                GL pthread dl m
            )
            
            # 添加系统库支持
            if(Vulkan_FOUND)
                target_link_libraries(skdn INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skdn INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            if(X11_FOUND)
                target_link_libraries(skdn INTERFACE
                    ${X11_LIBRARIES} ${X11_Xrandr_LIB} ${X11_Xinerama_LIB}
                    ${X11_Xcursor_LIB} ${X11_Xi_LIB}
                )
                target_include_directories(skdn INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 设置编译特性
        target_compile_features(skdn INTERFACE cxx_std_17)
        
        # 优化设置
        target_compile_options(skdn INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 调试预处理定义
        target_compile_definitions(skdn INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        # 显示构建信息
        message(STATUS "Skia Graphite + Dawn WebGPU 配置:")
        message(STATUS "  平台: ${SKIA_PLATFORM}")
        message(STATUS "  架构: ${SKIA_ARCH}")
        message(STATUS "  库目录: ${SKIA_LIB_DIR}")
        message(STATUS "  二进制目录: ${SKIA_BIN_DIR}")
        EOF
        
      shell: bash
      
    # 创建最终的ZIP包
    - name: 创建Skia_Prebuilt.zip
      run: |
        # 创建README
        cat > Skia/README.md << 'EOF'
        # Skia Graphite + Dawn WebGPU 预编译库
        
        这是一个包含Skia Graphite和Dawn WebGPU的完整预编译库包，支持多个平台。
        
        ## 支持的平台
        
        - **Windows x64** - DirectX 11/12 + Vulkan + OpenGL
        - **macOS x64/ARM64** - Metal + Vulkan + OpenGL  
        - **Linux x64** - Vulkan + OpenGL
        - **Android x64/ARM64** - Vulkan + OpenGL ES
        
        ## 使用方法
        
        ### CMake集成
        
        ```cmake
        # 设置C++17标准
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 添加Skia目录
        add_subdirectory(path/to/Skia)
        
        # 链接到您的目标
        target_link_libraries(your_target skdn::skdn)
        ```
        
        ### 基础示例
        
        ```cpp
        #include "include/core/SkCanvas.h"
        #include "include/core/SkSurface.h"
        #include "include/gpu/graphite/Context.h"
        #include "include/gpu/graphite/Surface.h"
        
        // 使用Skia Graphite创建图形上下文和表面
        // 详细示例请参考examples目录
        ```
        
        ## 主要特性
        
        - ✅ **Skia Graphite** - 下一代图形API
        - ✅ **Dawn WebGPU** - 跨平台WebGPU实现
        - ✅ **传统Ganesh** - 向后兼容支持
        - ✅ **多GPU后端** - Metal/DirectX/Vulkan/OpenGL
        - ✅ **完整功能** - PDF/SVG/动画/文本处理
        - ✅ **自动平台检测** - CMake自动配置
        - ✅ **生产就绪** - 优化构建配置
        
        ## 构建信息
        
        - **构建日期**: $(date)
        - **Skia版本**: 最新主分支
        - **Dawn版本**: 最新主分支
        - **编译器**: 各平台官方推荐编译器
        - **优化级别**: Release/O3
        
        ## 许可证
        
        Skia使用BSD-3-Clause许可证
        Dawn使用Apache-2.0许可证
        
        请遵守相应的开源许可证条款。
        EOF
        
        # 创建最终ZIP包
        zip -r Skia_Prebuilt.zip Skia/
        
        echo "✅ Skia_Prebuilt.zip 创建完成"
        ls -lh Skia_Prebuilt.zip
        
      shell: bash
      
    # 上传最终包
    - name: 上传Skia_Prebuilt.zip
      uses: actions/upload-artifact@v4
      with:
        name: Skia_Prebuilt
        path: Skia_Prebuilt.zip
        retention-days: 90
        
    # 创建Release（仅在主分支推送时）
    - name: 创建GitHub Release
      if: |
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
        github.event_name == 'schedule'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: skia-graphite-${{ github.run_number }}
        name: Skia Graphite + Dawn WebGPU v${{ github.run_number }}
        body: |
          # Skia Graphite + Dawn WebGPU 全平台预编译包
          
          这个发布包包含了启用Graphite的Skia图形库和Dawn WebGPU后端的完整预编译版本。
          
          ## 🚀 新特性
          
          - **Skia Graphite**: 下一代图形API，提供更好的性能和现代化设计
          - **Dawn WebGPU**: Google的跨平台WebGPU实现
          - **统一接口**: 通过`skdn`库同时访问Skia和Dawn功能
          - **自动平台检测**: CMake自动识别平台和架构
          
          ## 📦 包含内容
          
          - **Skia_Prebuilt.zip** - 完整的跨平台预编译包
            - Windows x64 (DirectX 11/12 + Vulkan + OpenGL)
            - macOS x64/ARM64 (Metal + Vulkan + OpenGL)
            - Linux x64 (Vulkan + OpenGL)
            - Android x64/ARM64 (Vulkan + OpenGL ES)
          
          ## 🔧 使用方法
          
          ```cmake
          add_subdirectory(Skia)
          target_link_libraries(your_app skdn::skdn)
          ```
          
          ## 📚 文档
          
          完整的使用文档和示例请参考包内的README.md和examples目录。
          
          ---
          
          **构建信息**: GitHub Actions自动构建，包含最新的Skia Graphite和Dawn WebGPU功能。
        files: |
          Skia_Prebuilt.zip
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
