name: 构建 Skia 和 Dawn 预编译库

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # 构建配置
  BUILD_TYPE: RelWithDebInfo
  SKIA_VERSION: chrome/m130
  DAWN_VERSION: main

jobs:
  build-windows:
    name: 构建 Windows 版本
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64]
        graphics: [dx12, dx11, vulkan, opengl]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 MSVC 2022
      uses: microsoft/setup-msbuild@v2
      
    - name: 设置 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 安装依赖工具
      run: |
        # 安装 depot_tools
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" >> $GITHUB_PATH
        
        # 安装 Ninja
        choco install ninja
        
    - name: 同步 Skia 源码
      run: |
        mkdir skia-build
        cd skia-build
        gclient config --name . https://skia.googlesource.com/skia.git
        gclient sync --revision ${{ env.SKIA_VERSION }}
        
    - name: 同步 Dawn 源码
      run: |
        mkdir dawn-build
        cd dawn-build
        git clone https://dawn.googlesource.com/dawn.git .
        git checkout ${{ env.DAWN_VERSION }}
        python tools/fetch_dawn_dependencies.py
        
    - name: 配置构建环境
      run: |
        # 设置编译器环境
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        
    - name: 构建 Dawn
      run: |
        cd dawn-build
        mkdir out\${{ env.BUILD_TYPE }}
        
        # 生成构建配置
        $graphics_backend = "${{ matrix.graphics }}"
        $dawn_args = @()
        
        if ($graphics_backend -eq "dx12") {
          $dawn_args += "dawn_enable_d3d12=true"
          $dawn_args += "dawn_enable_vulkan=false"
          $dawn_args += "dawn_enable_opengl=false"
          $dawn_args += "dawn_enable_d3d11=false"
        } elseif ($graphics_backend -eq "dx11") {
          $dawn_args += "dawn_enable_d3d11=true"
          $dawn_args += "dawn_enable_d3d12=false"
          $dawn_args += "dawn_enable_vulkan=false"
          $dawn_args += "dawn_enable_opengl=false"
        } elseif ($graphics_backend -eq "vulkan") {
          $dawn_args += "dawn_enable_vulkan=true"
          $dawn_args += "dawn_enable_d3d12=false"
          $dawn_args += "dawn_enable_d3d11=false"
          $dawn_args += "dawn_enable_opengl=false"
        } elseif ($graphics_backend -eq "opengl") {
          $dawn_args += "dawn_enable_opengl=true"
          $dawn_args += "dawn_enable_d3d12=false"
          $dawn_args += "dawn_enable_d3d11=false"
          $dawn_args += "dawn_enable_vulkan=false"
        }
        
        $dawn_args += "is_debug=false"
        $dawn_args += "is_component_build=false"
        $dawn_args += "dawn_complete_static_libs=true"
        
        gn gen out\${{ env.BUILD_TYPE }} --args="$($dawn_args -join ' ')"
        ninja -C out\${{ env.BUILD_TYPE }} dawn_combined
        
    - name: 构建 Skia
      run: |
        cd skia-build
        
        # 配置 Skia 构建参数
        $graphics_backend = "${{ matrix.graphics }}"
        $skia_args = @()
        
        if ($graphics_backend -eq "dx12") {
          $skia_args += "skia_use_direct3d=true"
          $skia_args += "skia_use_vulkan=false"
          $skia_args += "skia_use_gl=false"
        } elseif ($graphics_backend -eq "dx11") {
          $skia_args += "skia_use_direct3d=true"
          $skia_args += "skia_use_vulkan=false"
          $skia_args += "skia_use_gl=false"
        } elseif ($graphics_backend -eq "vulkan") {
          $skia_args += "skia_use_vulkan=true"
          $skia_args += "skia_use_direct3d=false"
          $skia_args += "skia_use_gl=false"
        } elseif ($graphics_backend -eq "opengl") {
          $skia_args += "skia_use_gl=true"
          $skia_args += "skia_use_direct3d=false"
          $skia_args += "skia_use_vulkan=false"
        }
        
        $skia_args += "is_debug=false"
        $skia_args += "is_component_build=false"
        $skia_args += "skia_use_system_expat=false"
        $skia_args += "skia_use_system_icu=false"
        $skia_args += "skia_use_system_libjpeg_turbo=false"
        $skia_args += "skia_use_system_libpng=false"
        $skia_args += "skia_use_system_libwebp=false"
        $skia_args += "skia_use_system_zlib=false"
        $skia_args += "cc=\"clang\""
        $skia_args += "cxx=\"clang++\""
        $skia_args += "extra_cflags=[\"-std=c++20\"]"
        $skia_args += "extra_cxxflags=[\"-std=c++20\"]"
        
        gn gen out\${{ env.BUILD_TYPE }} --args="$($skia_args -join ' ')"
        ninja -C out\${{ env.BUILD_TYPE }}
        
    - name: 收集构建产物
      run: |
        # 创建输出目录结构
        mkdir -p output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\dawn
        mkdir -p output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\skia
        mkdir -p output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\modules
        mkdir -p output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\bin
        mkdir -p output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\lib
        
        # 复制 Skia 头文件
        xcopy /E /I skia-build\include\* output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\skia\
        xcopy /E /I skia-build\modules\* output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\modules\
        
        # 复制 Dawn 头文件和生成的文件
        xcopy /E /I dawn-build\include\* output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\dawn\
        xcopy /E /I dawn-build\out\${{ env.BUILD_TYPE }}\gen\include\* output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\dawn\
        xcopy /E /I dawn-build\out\${{ env.BUILD_TYPE }}\gen\src\* output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\include\dawn\
        
        # 复制库文件
        xcopy /Y skia-build\out\${{ env.BUILD_TYPE }}\*.lib output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\lib\
        xcopy /Y dawn-build\out\${{ env.BUILD_TYPE }}\*.lib output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\lib\
        
        # 复制可执行文件和 DLL（如果有）
        xcopy /Y skia-build\out\${{ env.BUILD_TYPE }}\*.exe output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\bin\ 2>nul || echo "没有找到可执行文件"
        xcopy /Y skia-build\out\${{ env.BUILD_TYPE }}\*.dll output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\bin\ 2>nul || echo "没有找到 DLL 文件"
        xcopy /Y dawn-build\out\${{ env.BUILD_TYPE }}\*.exe output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\bin\ 2>nul || echo "没有找到可执行文件"
        xcopy /Y dawn-build\out\${{ env.BUILD_TYPE }}\*.dll output\Win\${{ matrix.arch }}\${{ matrix.graphics }}\bin\ 2>nul || echo "没有找到 DLL 文件"
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-windows-${{ matrix.arch }}-${{ matrix.graphics }}
        path: output/**
        retention-days: 30

---

  build-linux:
    name: 构建 Linux 版本
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x64]
        graphics: [vulkan, opengl]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-18 \
          gcc-13 \
          g++-13 \
          python3 \
          python3-pip \
          git \
          curl \
          ninja-build \
          pkg-config \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libvulkan-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libwayland-dev \
          libxkbcommon-dev
          
    - name: 设置编译器
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        
    - name: 安装 depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        
    - name: 同步 Skia 源码
      run: |
        mkdir skia-build
        cd skia-build
        gclient config --name . https://skia.googlesource.com/skia.git
        gclient sync --revision ${{ env.SKIA_VERSION }}
        
    - name: 同步 Dawn 源码
      run: |
        mkdir dawn-build
        cd dawn-build
        git clone https://dawn.googlesource.com/dawn.git .
        git checkout ${{ env.DAWN_VERSION }}
        python3 tools/fetch_dawn_dependencies.py
        
    - name: 构建 Dawn
      run: |
        cd dawn-build
        mkdir -p out/${{ env.BUILD_TYPE }}
        
        # 配置 Dawn 构建参数
        DAWN_ARGS=""
        if [ "${{ matrix.graphics }}" = "vulkan" ]; then
          DAWN_ARGS="dawn_enable_vulkan=true dawn_enable_opengl=false"
        elif [ "${{ matrix.graphics }}" = "opengl" ]; then
          DAWN_ARGS="dawn_enable_opengl=true dawn_enable_vulkan=false"
        fi
        
        DAWN_ARGS="$DAWN_ARGS is_debug=false is_component_build=false dawn_complete_static_libs=true"
        DAWN_ARGS="$DAWN_ARGS cc=\"clang-18\" cxx=\"clang++-18\""
        DAWN_ARGS="$DAWN_ARGS extra_cflags=[\"-std=c++20\"] extra_cxxflags=[\"-std=c++20\"]"
        
        gn gen out/${{ env.BUILD_TYPE }} --args="$DAWN_ARGS"
        ninja -C out/${{ env.BUILD_TYPE }} dawn_combined
        
    - name: 构建 Skia
      run: |
        cd skia-build
        
        # 配置 Skia 构建参数
        SKIA_ARGS=""
        if [ "${{ matrix.graphics }}" = "vulkan" ]; then
          SKIA_ARGS="skia_use_vulkan=true skia_use_gl=false"
        elif [ "${{ matrix.graphics }}" = "opengl" ]; then
          SKIA_ARGS="skia_use_gl=true skia_use_vulkan=false"
        fi
        
        SKIA_ARGS="$SKIA_ARGS is_debug=false is_component_build=false"
        SKIA_ARGS="$SKIA_ARGS skia_use_system_expat=false skia_use_system_icu=false"
        SKIA_ARGS="$SKIA_ARGS skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false"
        SKIA_ARGS="$SKIA_ARGS skia_use_system_libwebp=false skia_use_system_zlib=false"
        SKIA_ARGS="$SKIA_ARGS cc=\"clang-18\" cxx=\"clang++-18\""
        SKIA_ARGS="$SKIA_ARGS extra_cflags=[\"-std=c++20\"] extra_cxxflags=[\"-std=c++20\"]"
        
        gn gen out/${{ env.BUILD_TYPE }} --args="$SKIA_ARGS"
        ninja -C out/${{ env.BUILD_TYPE }}
        
    - name: 收集构建产物
      run: |
        # 创建输出目录结构
        mkdir -p output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/include/{dawn,skia,modules}
        mkdir -p output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/{bin,lib}
        
        # 复制 Skia 头文件
        cp -r skia-build/include/* output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/include/skia/
        cp -r skia-build/modules/* output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/include/modules/
        
        # 复制 Dawn 头文件和生成的文件
        cp -r dawn-build/include/* output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/include/dawn/
        cp -r dawn-build/out/${{ env.BUILD_TYPE }}/gen/include/* output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/include/dawn/
        cp -r dawn-build/out/${{ env.BUILD_TYPE }}/gen/src/* output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/include/dawn/
        
        # 复制库文件
        find skia-build/out/${{ env.BUILD_TYPE }} -name "*.a" -exec cp {} output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        find skia-build/out/${{ env.BUILD_TYPE }} -name "*.so*" -exec cp {} output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        find dawn-build/out/${{ env.BUILD_TYPE }} -name "*.a" -exec cp {} output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        find dawn-build/out/${{ env.BUILD_TYPE }} -name "*.so*" -exec cp {} output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        
        # 复制可执行文件
        find skia-build/out/${{ env.BUILD_TYPE }} -type f -executable -exec file {} \; | grep -E "executable|shared object" | cut -d: -f1 | xargs -I {} cp {} output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/bin/ 2>/dev/null || true
        find dawn-build/out/${{ env.BUILD_TYPE }} -type f -executable -exec file {} \; | grep -E "executable|shared object" | cut -d: -f1 | xargs -I {} cp {} output/Linux/${{ matrix.arch }}/${{ matrix.graphics }}/bin/ 2>/dev/null || true
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-linux-${{ matrix.arch }}-${{ matrix.graphics }}
        path: output/**
        retention-days: 30

---

  build-android:
    name: 构建 Android 版本
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [arm64, x64]
        graphics: [vulkan, gles]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 设置 Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-18 \
          python3 \
          python3-pip \
          git \
          curl \
          ninja-build \
          pkg-config
          
    - name: 安装 depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        
    - name: 同步 Skia 源码
      run: |
        mkdir skia-build
        cd skia-build
        gclient config --name . https://skia.googlesource.com/skia.git
        gclient sync --revision ${{ env.SKIA_VERSION }}
        
    - name: 同步 Dawn 源码
      run: |
        mkdir dawn-build
        cd dawn-build
        git clone https://dawn.googlesource.com/dawn.git .
        git checkout ${{ env.DAWN_VERSION }}
        python3 tools/fetch_dawn_dependencies.py
        
    - name: 构建 Dawn
      run: |
        cd dawn-build
        mkdir -p out/${{ env.BUILD_TYPE }}
        
        # 设置架构
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ANDROID_ABI="arm64-v8a"
          TARGET_CPU="arm64"
        else
          ANDROID_ABI="x86_64"
          TARGET_CPU="x64"
        fi
        
        # 配置 Dawn 构建参数
        DAWN_ARGS="target_os=\"android\" target_cpu=\"$TARGET_CPU\""
        DAWN_ARGS="$DAWN_ARGS android_ndk_root=\"$ANDROID_NDK_ROOT\""
        
        if [ "${{ matrix.graphics }}" = "vulkan" ]; then
          DAWN_ARGS="$DAWN_ARGS dawn_enable_vulkan=true dawn_enable_opengles=false"
        elif [ "${{ matrix.graphics }}" = "gles" ]; then
          DAWN_ARGS="$DAWN_ARGS dawn_enable_opengles=true dawn_enable_vulkan=false"
        fi
        
        DAWN_ARGS="$DAWN_ARGS is_debug=false is_component_build=false dawn_complete_static_libs=true"
        DAWN_ARGS="$DAWN_ARGS extra_cflags=[\"-std=c++20\"] extra_cxxflags=[\"-std=c++20\"]"
        
        gn gen out/${{ env.BUILD_TYPE }} --args="$DAWN_ARGS"
        ninja -C out/${{ env.BUILD_TYPE }} dawn_combined
        
    - name: 构建 Skia
      run: |
        cd skia-build
        
        # 设置架构
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          TARGET_CPU="arm64"
        else
          TARGET_CPU="x64"
        fi
        
        # 配置 Skia 构建参数
        SKIA_ARGS="target_os=\"android\" target_cpu=\"$TARGET_CPU\""
        SKIA_ARGS="$SKIA_ARGS ndk=\"$ANDROID_NDK_ROOT\""
        
        if [ "${{ matrix.graphics }}" = "vulkan" ]; then
          SKIA_ARGS="$SKIA_ARGS skia_use_vulkan=true skia_use_gl=false"
        elif [ "${{ matrix.graphics }}" = "gles" ]; then
          SKIA_ARGS="$SKIA_ARGS skia_use_gl=true skia_use_vulkan=false"
        fi
        
        SKIA_ARGS="$SKIA_ARGS is_debug=false is_component_build=false"
        SKIA_ARGS="$SKIA_ARGS skia_use_system_expat=false skia_use_system_icu=false"
        SKIA_ARGS="$SKIA_ARGS skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false"
        SKIA_ARGS="$SKIA_ARGS skia_use_system_libwebp=false skia_use_system_zlib=false"
        SKIA_ARGS="$SKIA_ARGS extra_cflags=[\"-std=c++20\"] extra_cxxflags=[\"-std=c++20\"]"
        
        gn gen out/${{ env.BUILD_TYPE }} --args="$SKIA_ARGS"
        ninja -C out/${{ env.BUILD_TYPE }}
        
    - name: 收集构建产物
      run: |
        # 创建输出目录结构
        mkdir -p output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/include/{dawn,skia,modules}
        mkdir -p output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/{bin,lib}
        
        # 复制 Skia 头文件
        cp -r skia-build/include/* output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/include/skia/
        cp -r skia-build/modules/* output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/include/modules/
        
        # 复制 Dawn 头文件和生成的文件
        cp -r dawn-build/include/* output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/include/dawn/
        cp -r dawn-build/out/${{ env.BUILD_TYPE }}/gen/include/* output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/include/dawn/
        cp -r dawn-build/out/${{ env.BUILD_TYPE }}/gen/src/* output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/include/dawn/
        
        # 复制库文件
        find skia-build/out/${{ env.BUILD_TYPE }} -name "*.a" -exec cp {} output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        find skia-build/out/${{ env.BUILD_TYPE }} -name "*.so*" -exec cp {} output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        find dawn-build/out/${{ env.BUILD_TYPE }} -name "*.a" -exec cp {} output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        find dawn-build/out/${{ env.BUILD_TYPE }} -name "*.so*" -exec cp {} output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/lib/ \;
        
        # 复制可执行文件
        find skia-build/out/${{ env.BUILD_TYPE }} -type f -executable -exec file {} \; | grep -E "executable|shared object" | cut -d: -f1 | xargs -I {} cp {} output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/bin/ 2>/dev/null || true
        find dawn-build/out/${{ env.BUILD_TYPE }} -type f -executable -exec file {} \; | grep -E "executable|shared object" | cut -d: -f1 | xargs -I {} cp {} output/Android/${{ matrix.arch }}/${{ matrix.graphics }}/bin/ 2>/dev/null || true
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-android-${{ matrix.arch }}-${{ matrix.graphics }}
        path: output/**
        retention-days: 30

---

  package-release:
    name: 打包发布版本
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-22.04
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: 重新组织目录结构
      run: |
        # 创建最终的目录结构
        mkdir -p Skia/{include,bin,lib}
        
        # 合并所有平台的头文件（使用第一个找到的作为基础）
        for artifact in artifacts/*/; do
          if [ -d "$artifact/*/include" ]; then
            echo "正在合并来自 $artifact 的头文件..."
            cp -r "$artifact"/*/include/* Skia/include/ 2>/dev/null || true
            break
          fi
        done
        
        # 按平台组织二进制文件和库文件
        for artifact in artifacts/*/; do
          artifact_name=$(basename "$artifact")
          
          # 解析平台信息
          if [[ "$artifact_name" == *"windows"* ]]; then
            platform="Win"
          elif [[ "$artifact_name" == *"linux"* ]]; then
            platform="Linux"
          elif [[ "$artifact_name" == *"android"* ]]; then
            platform="Android"
          else
            continue
          fi
          
          # 解析架构信息
          if [[ "$artifact_name" == *"x64"* ]]; then
            arch="x64"
          elif [[ "$artifact_name" == *"arm64"* ]]; then
            arch="arm64"
          else
            continue
          fi
          
          # 创建目标目录
          mkdir -p "Skia/bin/$platform/$arch"
          mkdir -p "Skia/lib/$platform/$arch"
          
          # 复制文件
          if [ -d "$artifact" ]; then
            find "$artifact" -name "bin" -type d -exec cp -r {}/* "Skia/bin/$platform/$arch/" \; 2>/dev/null || true
            find "$artifact" -name "lib" -type d -exec cp -r {}/* "Skia/lib/$platform/$arch/" \; 2>/dev/null || true
          fi
        done
        
    - name: 生成 CMakeLists.txt
      run: |
        cat > Skia/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.20)
        project(Skia LANGUAGES CXX)
        
        # 设置 C++20 标准
        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        set(CMAKE_CXX_EXTENSIONS OFF)
        
        # 检测平台
        if(WIN32)
            set(PLATFORM_NAME "Win")
        elseif(ANDROID)
            set(PLATFORM_NAME "Android")
        elseif(UNIX)
            set(PLATFORM_NAME "Linux")
        else()
            message(FATAL_ERROR "不支持的平台")
        endif()
        
        # 检测架构
        if(CMAKE_SIZEOF_VOID_P EQUAL 8)
            if(ANDROID AND CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(ARCH_NAME "arm64")
            else()
                set(ARCH_NAME "x64")
            endif()
        else()
            message(FATAL_ERROR "不支持的架构")
        endif()
        
        # 设置库和二进制文件路径
        set(SKIA_LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_NAME}/${ARCH_NAME}")
        set(SKIA_BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_NAME}/${ARCH_NAME}")
        
        # 创建 Skia 接口库
        add_library(Skia INTERFACE)
        
        # 设置包含目录
        target_include_directories(Skia INTERFACE
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/skia>
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/modules>
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/dawn>
            $<INSTALL_INTERFACE:include/skia>
            $<INSTALL_INTERFACE:include/modules>
            $<INSTALL_INTERFACE:include/dawn>
        )
        
        # 根据平台链接相应的库
        if(WIN32)
            # Windows 平台库
            file(GLOB_RECURSE SKIA_LIBS "${SKIA_LIB_DIR}/*.lib")
            target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
            
            # Windows 系统库
            target_link_libraries(Skia INTERFACE
                d3d11 d3d12 dxgi dxguid
                opengl32 glu32
                user32 gdi32 advapi32
                ole32 oleaut32 shell32
                winmm version
            )
            
        elseif(ANDROID)
            # Android 平台库
            file(GLOB_RECURSE SKIA_LIBS "${SKIA_LIB_DIR}/*.a")
            target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
            
            # Android 系统库
            find_library(ANDROID_LOG_LIB log)
            find_library(ANDROID_VULKAN_LIB vulkan)
            find_library(ANDROID_EGL_LIB EGL)
            find_library(ANDROID_GLES_LIB GLESv2)
            
            target_link_libraries(Skia INTERFACE
                ${ANDROID_LOG_LIB}
                ${ANDROID_VULKAN_LIB}
                ${ANDROID_EGL_LIB}
                ${ANDROID_GLES_LIB}
            )
            
        elseif(UNIX)
            # Linux 平台库
            file(GLOB_RECURSE SKIA_LIBS "${SKIA_LIB_DIR}/*.a")
            target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
            
            # Linux 系统库
            find_package(PkgConfig REQUIRED)
            pkg_check_modules(VULKAN REQUIRED vulkan)
            
            target_link_libraries(Skia INTERFACE
                GL GLU
                ${VULKAN_LIBRARIES}
                X11 Xrandr Xinerama Xcursor Xi Xext
                wayland-client wayland-cursor wayland-egl
                xkbcommon
                pthread dl
            )
            
            target_include_directories(Skia INTERFACE ${VULKAN_INCLUDE_DIRS})
            target_compile_options(Skia INTERFACE ${VULKAN_CFLAGS_OTHER})
        endif()
        
        # 创建 Dawn 动态生成文件库
        add_library(DawnDynamic INTERFACE)
        
        # Dawn 动态生成文件的包含目录
        target_include_directories(DawnDynamic INTERFACE
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/dawn>
            $<INSTALL_INTERFACE:include/dawn>
        )
        
        # 将 Dawn 动态库链接到 Skia
        target_link_libraries(Skia INTERFACE DawnDynamic)
        
        # 安装配置
        install(TARGETS Skia DawnDynamic
            EXPORT SkiaTargets
            LIBRARY DESTINATION lib
            ARCHIVE DESTINATION lib
            RUNTIME DESTINATION bin
            INCLUDES DESTINATION include
        )
        
        install(DIRECTORY include/
            DESTINATION include
            FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp" PATTERN "*.hxx"
        )
        
        install(EXPORT SkiaTargets
            FILE SkiaTargets.cmake
            NAMESPACE Skia::
            DESTINATION lib/cmake/Skia
        )
        
        # 生成配置文件
        include(CMakePackageConfigHelpers)
        write_basic_package_version_file(
            "${CMAKE_CURRENT_BINARY_DIR}/SkiaConfigVersion.cmake"
            VERSION 1.0.0
            COMPATIBILITY AnyNewerVersion
        )
        
        configure_package_config_file(
            "${CMAKE_CURRENT_SOURCE_DIR}/SkiaConfig.cmake.in"
            "${CMAKE_CURRENT_BINARY_DIR}/SkiaConfig.cmake"
            INSTALL_DESTINATION lib/cmake/Skia
        )
        
        install(FILES
            "${CMAKE_CURRENT_BINARY_DIR}/SkiaConfig.cmake"
            "${CMAKE_CURRENT_BINARY_DIR}/SkiaConfigVersion.cmake"
            DESTINATION lib/cmake/Skia
        )
        EOF
        
    - name: 生成 CMake 配置文件模板
      run: |
        cat > Skia/SkiaConfig.cmake.in << 'EOF'
        @PACKAGE_INIT@
        
        include("${CMAKE_CURRENT_LIST_DIR}/SkiaTargets.cmake")
        
        check_required_components(Skia)
        EOF
        
    - name: 生成版本信息
      run: |
        cat > Skia/VERSION.txt << EOF
        Skia + Dawn 预编译库
        构建时间: $(date -u)
        Skia 版本: ${{ env.SKIA_VERSION }}
        Dawn 版本: ${{ env.DAWN_VERSION }}
        构建配置: ${{ env.BUILD_TYPE }}
        编译器: Clang 18, GCC 13, MSVC 2022
        C++ 标准: C++20
        
        支持的平台和图形 API:
        - Windows x64: DirectX 12, DirectX 11, Vulkan, OpenGL
        - Linux x64: Vulkan, OpenGL
        - Android arm64/x64: Vulkan, OpenGL ES
        EOF
        
    - name: 创建 Skia.zip
      run: |
        zip -r Skia.zip Skia/
        
    - name: 上传最终打包文件
      uses: actions/upload-artifact@v4
      with:
        name: Skia-Final-Package
        path: Skia.zip
        retention-days: 90
        
    - name: 创建 Release（如果是标签推送）
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Skia + Dawn 预编译库 ${{ github.ref }}
        body: |
          # Skia + Dawn 预编译库
          
          这个版本包含了 Skia 和 Dawn 的预编译库，支持多个平台和图形 API。
          
          ## 支持的平台
          - **Windows x64**: DirectX 12, DirectX 11, Vulkan, OpenGL
          - **Linux x64**: Vulkan, OpenGL
          - **Android arm64/x64**: Vulkan, OpenGL ES
          
          ## 构建信息
          - **构建配置**: RelWithDebInfo
          - **C++ 标准**: C++20
          - **编译器**: Clang 18, GCC 13, MSVC 2022
          - **Skia 版本**: ${{ env.SKIA_VERSION }}
          - **Dawn 版本**: ${{ env.DAWN_VERSION }}
          
          ## 使用方法
          1. 下载并解压 Skia.zip
          2. 在您的 CMake 项目中添加：
             ```cmake
             find_package(Skia REQUIRED)
             target_link_libraries(your_target PRIVATE Skia::Skia)
             ```
          
          ## 目录结构
          ```
          Skia/
          ├── include/          # 头文件
          │   ├── skia/         # Skia 头文件
          │   ├── dawn/         # Dawn 头文件（包含动态生成的文件）
          │   └── modules/      # Skia 模块头文件
          ├── bin/              # 可执行文件
          │   ├── Win/x64/
          │   ├── Linux/x64/
          │   └── Android/arm64/
          ├── lib/              # 库文件
          │   ├── Win/x64/
          │   ├── Linux/x64/
          │   └── Android/arm64/
          └── CMakeLists.txt    # CMake 配置文件
          ```
        draft: false
        prerelease: false
        
    - name: 上传 Release 资源
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Skia.zip
        asset_name: Skia.zip
        asset_content_type: application/zip
