name: 编译 Skia 多平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            
          # Windows ARM64架构
          - os: windows-latest
            platform: arm64_windows
            arch: arm64
            target_os: win
            target_cpu: arm64
            
          # macOS x64架构
          - os: macos-latest
            platform: x64_macos
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest
            platform: arm64_macos
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Linux ARM64架构
          - os: ubuntu-latest
            platform: arm64_linux
            arch: arm64
            target_os: linux
            target_cpu: arm64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # 如果是ARM64平台，安装交叉编译工具链
        if [ "${{ matrix.target_cpu }}" = "arm64" ] && [ "${{ matrix.target_os }}" = "linux" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # macOS通常已经包含所需的开发工具
        xcode-select --install 2>/dev/null || true
        
    # 设置Android NDK环境（仅限Android平台）
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取Google的depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码并同步依赖
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
      shell: bash
      
    # 配置各平台的构建参数
    - name: 配置构建参数
      run: |
        cd skia
        
        # 基础构建参数设置
        args="is_official_build=true"
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        args="$args skia_use_dng_sdk=false"
        args="$args skia_use_piex=false"
        
        # 禁用有问题的功能以简化构建
        args="$args skia_use_harfbuzz=false"
        args="$args skia_pdf_subset_harfbuzz=false"
        args="$args skia_enable_pdf=false"
        args="$args skia_enable_skottie=false"
        args="$args skia_enable_particles=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "mac")
            # macOS平台特定配置
            args="$args skia_use_metal=true"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "linux")
            # Linux平台特定配置
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args cc=\"aarch64-linux-gnu-gcc\""
              args="$args cxx=\"aarch64-linux-gnu-g++\""
              args="$args ar=\"aarch64-linux-gnu-ar\""
            fi
            ;;
          "android")
            # Android平台特定配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args skia_use_system_freetype2=false"
            args="$args skia_enable_fontmgr_android=true"
            ;;
        esac
        
        echo "构建参数: $args"
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 使用GN生成构建文件
    - name: 生成构建文件
      run: |
        cd skia
        bin/gn gen out/Release --args="$BUILD_ARGS"
      shell: bash
      
    # 使用Ninja编译Skia
    - name: 编译Skia
      run: |
        cd skia
        ninja -C out/Release
      shell: bash
      
    # 创建发布包并整理文件
    - name: 创建发布包
      run: |
        cd skia
        
        # 创建输出目录结构
        mkdir -p package/include
        mkdir -p package/lib
        mkdir -p package/bin
        mkdir -p package/docs
        
        # 复制头文件到包目录
        cp -r include/* package/include/
        
        # 根据不同平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台文件复制
            find out/Release -name "*.lib" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.dll" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -name "*.exe" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
          "mac")
            # macOS平台文件复制
            find out/Release -name "*.a" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.dylib" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "dm" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "nanobench" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
          "linux"|"android")
            # Linux和Android平台文件复制
            find out/Release -name "*.a" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.so" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "dm" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "nanobench" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
        esac
        
        # 创建构建信息文件
        cat > package/BUILD_INFO.txt << EOF
        Skia 构建信息
        ==================
        平台: ${{ matrix.target_os }}
        架构: ${{ matrix.target_cpu }}
        包名: ${{ matrix.platform }}
        构建模式: Release (官方构建)
        特性说明: 核心图形功能，不包含PDF支持
        EOF
        
        # 创建使用说明文件
        cat > package/README.md << EOF
        # Skia 构建包 - ${{ matrix.platform }}

        这是Skia图形库的预编译构建包。

        ## 包含内容

        - include/ - Skia头文件
        - lib/ - 静态库文件和动态库文件
        - bin/ - 可执行工具程序
        - BUILD_INFO.txt - 详细构建信息
        - CMakeLists.txt - CMake配置文件，提供skia::skia目标

        ## 构建特性

        此构建包含Skia的核心图形功能：
        - 2D绘图和渲染
        - 图像处理和滤镜
        - 文字渲染
        - GPU加速渲染（如果平台支持）
        
        为了简化构建和减少依赖，此版本不包含：
        - PDF导出功能
        - Skottie动画支持
        - 粒子系统

        ## CMake使用方法

        1. 将此包解压到你的项目目录中
        2. 在你的CMakeLists.txt中添加：
           \`\`\`cmake
           add_subdirectory(path/to/skia)
           target_link_libraries(your_target skia::skia)
           \`\`\`

        ## 手动使用方法

        请根据你的项目需求，将相应的头文件和库文件集成到你的构建系统中。

        ## 平台信息

        - 目标操作系统: ${{ matrix.target_os }}
        - 目标架构: ${{ matrix.target_cpu }}
        EOF
        
      shell: bash
      
    # 生成CMakeLists.txt文件
    - name: 生成CMakeLists.txt
      run: |
        cd skia/package
        
        # 根据平台设置库文件扩展名和链接选项
        case "${{ matrix.target_os }}" in
          "win")
            lib_pattern="*.lib"
            lib_prefix=""
            shared_pattern="*.dll"
            ;;
          "mac")
            lib_pattern="*.a"
            lib_prefix="lib"
            shared_pattern="*.dylib"
            ;;
          "linux"|"android")
            lib_pattern="*.a"
            lib_prefix="lib"
            shared_pattern="*.so"
            ;;
        esac
        
        # 生成CMakeLists.txt文件
        cat > CMakeLists.txt << 'EOF'
        # Skia图形库的CMake配置文件
        cmake_minimum_required(VERSION 3.15)
        
        # 设置项目信息
        project(SkiaPrebuilt
            VERSION 1.0.0
            DESCRIPTION "预编译的Skia图形库"
            LANGUAGES CXX
        )
        
        # 设置C++标准
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 创建skia::skia接口库
        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)
        
        # 设置包含目录
        target_include_directories(skia INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include>
            $<INSTALL_INTERFACE:include>
        )
        
        # 查找所有的库文件
        file(GLOB SKIA_LIBRARIES "${SKIA_ROOT_DIR}/lib/*")
        
        # 根据平台设置特定的链接库和编译选项
        if(WIN32)
            # Windows平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_BUILD_FOR_WIN=1
            )
            # 添加Windows系统库
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                OpenGL32
                Gdi32
                User32
                Kernel32
            )
        elseif(APPLE)
            # macOS平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_METAL=1
                SK_BUILD_FOR_MAC=1
            )
            # 添加macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
            )
        elseif(ANDROID)
            # Android平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_BUILD_FOR_ANDROID=1
            )
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                GLESv2
                EGL
                android
                log
            )
        else()
            # Linux平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_BUILD_FOR_UNIX=1
            )
            # 查找必要的系统库
            find_package(PkgConfig REQUIRED)
            pkg_check_modules(FONTCONFIG REQUIRED fontconfig)
            pkg_check_modules(FREETYPE REQUIRED freetype2)
            
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                GL
                pthread
                ${FONTCONFIG_LIBRARIES}
                ${FREETYPE_LIBRARIES}
            )
            
            target_include_directories(skia INTERFACE
                ${FONTCONFIG_INCLUDE_DIRS}
                ${FREETYPE_INCLUDE_DIRS}
            )
        endif()
        
        # 设置编译选项
        target_compile_features(skia INTERFACE cxx_std_17)
        
        # 如果是Debug模式，添加调试符号
        target_compile_options(skia INTERFACE
            $<$<CONFIG:Debug>:-g>
            $<$<CONFIG:Release>:-O3>
        )
        
        # 显示配置信息
        message(STATUS "Skia预编译库配置完成")
        message(STATUS "  - 包含目录: ${SKIA_ROOT_DIR}/include")
        message(STATUS "  - 库目录: ${SKIA_ROOT_DIR}/lib")
        message(STATUS "  - 找到库文件: ${SKIA_LIBRARIES}")
        
        # 创建便捷的查找脚本（可选）
        configure_file(
            "${CMAKE_CURRENT_LIST_DIR}/SkiaConfig.cmake.in"
            "${CMAKE_CURRENT_BINARY_DIR}/SkiaConfig.cmake"
            @ONLY
        )
        EOF
        
        # 生成SkiaConfig.cmake.in模板文件
        cat > SkiaConfig.cmake.in << 'EOF'
        # Skia库的CMake查找配置
        
        @PACKAGE_INIT@
        
        include(CMakeFindDependencyMacro)
        
        # 检查是否已经找到
        if(TARGET skia::skia)
            return()
        endif()
        
        # 包含目标定义
        include("${CMAKE_CURRENT_LIST_DIR}/SkiaTargets.cmake")
        
        # 验证目标存在
        check_required_components(Skia)
        EOF
        
      shell: bash
      
    # 打包构建产物为ZIP文件
    - name: 打包构建产物
      run: |
        cd skia/package
        
        # 根据运行平台选择合适的打包方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows系统使用PowerShell的Compress-Archive
          powershell "Compress-Archive -Path * -DestinationPath ../${{ matrix.platform }}.zip"
        else
          # Unix系统使用zip命令打包
          zip -r "../${{ matrix.platform }}.zip" *
        fi
        
        # 验证ZIP文件是否创建成功
        if [ -f "../${{ matrix.platform }}.zip" ]; then
          echo "构建包创建成功: ${{ matrix.platform }}.zip"
          ls -lh "../${{ matrix.platform }}.zip" 2>/dev/null || dir "../${{ matrix.platform }}.zip"
        else
          echo "构建包创建失败"
          exit 1
        fi
      shell: bash
      
    # 上传构建产物到GitHub Actions
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: skia/${{ matrix.platform }}.zip
        retention-days: 30
        compression-level: 0
        
  # 创建GitHub Release发布（仅在推送到主分支或定时任务时）
  create-release:
    needs: build-skia
    runs-on: ubuntu-latest
    # 在推送到主分支或定时任务且所有构建成功时才创建Release
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule'
    
    # 为此作业设置必要的权限
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码以访问仓库信息
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 验证所有构建产物的完整性
    - name: 验证所有构建产物
      run: |
        echo "正在验证构建产物..."
        total_size=0
        success_count=0
        
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            platform=$(basename "$dir")
            zip_file="$dir$platform.zip"
            if [ -f "$zip_file" ]; then
              size=$(stat -c%s "$zip_file")
              echo "✅ 构建包: $platform.zip - $(numfmt --to=iec $size)"
              total_size=$((total_size + size))
              success_count=$((success_count + 1))
            else
              echo "❌ 缺少构建包: $platform.zip"
            fi
          fi
        done
        
        echo "📊 成功构建: $success_count 个平台"
        echo "📊 所有构建包总大小: $(numfmt --to=iec $total_size)"
        
        # 如果没有任何成功的构建包，则退出
        if [ $success_count -eq 0 ]; then
          echo "❌ 没有找到任何构建包，跳过Release创建"
          exit 1
        fi
        
    # 创建发布说明文档
    - name: 创建发布说明
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # Skia 多平台构建包

        这个发布包包含了Skia图形库在多个平台和架构上的预编译版本。

        ## 包含的平台

        ### Windows
        - x64_windows.zip - Windows x64架构
        - arm64_windows.zip - Windows ARM64架构

        ### macOS  
        - x64_macos.zip - macOS Intel架构
        - arm64_macos.zip - macOS Apple Silicon架构

        ### Linux
        - x64_linux.zip - Linux x64架构  
        - arm64_linux.zip - Linux ARM64架构

        ### Android
        - x64_android.zip - Android x64架构
        - arm64_android.zip - Android ARM64架构

        ## 每个包都包含

        - include/ - 完整的Skia C++ API头文件
        - lib/ - 静态库和动态库文件
        - bin/ - 实用工具程序（如可用）
        - BUILD_INFO.txt - 详细的构建信息
        - README.md - 使用说明
        - CMakeLists.txt - CMake配置文件，提供skia::skia目标

        ## CMake集成

        每个构建包都包含了CMakeLists.txt文件，可以直接集成到CMake项目中：

        ```cmake
        # 添加Skia子目录
        add_subdirectory(path/to/skia)

        # 链接到你的目标
        target_link_libraries(your_target skia::skia)
        ```

        ## 构建配置

        - 构建模式: Release（官方优化构建）
        - 所有依赖: 静态链接，无外部依赖
        - 图形后端: 针对每个平台优化
        - 特性: 核心图形功能，为了简化构建已禁用PDF支持

        ## 使用方法

        1. 下载对应平台的zip文件
        2. 解压到你的项目目录
        3. 使用CMake集成或手动配置头文件和库文件
        4. 开始使用Skia API进行图形开发

        ## 注意事项

        此版本为了确保构建稳定性，已禁用以下功能：
        - PDF导出功能
        - Skottie动画支持
        - 粒子系统

        如果需要这些功能，请考虑自行编译完整版本。

        ## 自动更新

        此构建包每天自动更新，确保包含最新的Skia代码。
        EOF
        
    # 获取当前日期作为标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          # 定时任务使用日期作为标签
          echo "tag=daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          # 手动触发使用构建编号
          echo "tag=skia-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release发布版本
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body_path: RELEASE_NOTES.md
        files: |
          artifacts/*/**.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: 构建完成通知
      run: |
        echo "🎉 Skia多平台构建完成！"
        echo "📦 已生成以下平台的构建包："
        echo "   • Windows: x64, ARM64"  
        echo "   • macOS: x64, ARM64"
        echo "   • Linux: x64, ARM64"
        echo "   • Android: x64, ARM64"
        echo "🔗 可在Actions页面下载，或在Releases中获取"
        echo "📋 每个包都包含CMakeLists.txt文件，提供skia::skia目标"
