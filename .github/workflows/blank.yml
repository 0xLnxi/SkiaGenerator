name: 构建 Skia 和 Dawn

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 设置MSVC工具链
      uses: microsoft/setup-msbuild@v2
      
    - name: 安装Ninja
      run: |
        choco install ninja
        
    - name: 配置Git全局设置
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global core.fscache true
        git config --global core.preloadindex true
        git config --global depot-tools.allowGlobalGitConfig true
        
    - name: 设置环境变量
      run: |
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" >> $env:GITHUB_ENV
        echo "DEPOT_TOOLS_UPDATE=1" >> $env:GITHUB_ENV
        echo "GCLIENT_PY3=1" >> $env:GITHUB_ENV
        
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" >> $env:GITHUB_PATH
        
    - name: 等待depot_tools初始化
      run: |
        # 等待depot_tools完成初始化
        Start-Sleep -Seconds 10
        gclient --version
        
    - name: 同步Skia源码
      run: |
        mkdir skia_build
        cd skia_build
        # 使用完整的gclient配置方式
        gclient config https://skia.googlesource.com/skia.git
        gclient sync --no-history --shallow
        
    - name: 同步Dawn源码
      run: |
        git clone https://dawn.googlesource.com/dawn.git dawn_build
        cd dawn_build
        # 使用cp.py脚本获取依赖
        python tools/fetch_dawn_dependencies.py --use-test-deps
        
    - name: 配置Skia构建 (Windows)
      run: |
        cd skia_build
        python bin/fetch-gn
        # 配置支持所有Windows后端的构建参数
        bin/gn gen out/Release --args='
          is_debug=false
          is_component_build=false
          skia_use_system_expat=false
          skia_use_system_icu=false
          skia_use_system_libjpeg_turbo=false
          skia_use_system_libpng=false
          skia_use_system_libwebp=false
          skia_use_system_zlib=false
          skia_use_dawn=true
          skia_use_vulkan=true
          skia_use_direct3d=true
          skia_use_gl=true
          skia_enable_gpu=true
          target_cpu="x64"
          win_vc="2022"
          extra_cflags=["/std:c++20"]
          extra_cflags_cc=["/std:c++20"]
        '
        
    - name: 配置Dawn构建 (Windows)
      run: |
        cd dawn_build
        mkdir -p out/Release
        cmake -B out/Release -G Ninja `
          -DCMAKE_BUILD_TYPE=RelWithDebInfo `
          -DCMAKE_CXX_STANDARD=20 `
          -DDAWN_BUILD_SAMPLES=OFF `
          -DDAWN_USE_GLFW=OFF `
          -DTINT_BUILD_TESTS=OFF `
          -DTINT_BUILD_CMD_TOOLS=OFF `
          -DDAWN_ENABLE_D3D11=ON `
          -DDAWN_ENABLE_D3D12=ON `
          -DDAWN_ENABLE_VULKAN=ON `
          -DDAWN_ENABLE_OPENGL=ON `
          -DDAWN_ENABLE_OPENGLES=OFF `
          -DDAWN_BUILD_GEN_VERSION=ON
          
    - name: 编译Dawn
      run: |
        cd dawn_build
        cmake --build out/Release --config RelWithDebInfo -j $env:NUMBER_OF_PROCESSORS
        
    - name: 编译Skia
      run: |
        cd skia_build
        ninja -C out/Release -j $env:NUMBER_OF_PROCESSORS
        
    - name: 收集Dawn生成的文件
      run: |
        cd dawn_build
        # 创建目标目录
        New-Item -ItemType Directory -Force -Path "../artifacts/dawn_generated/include"
        New-Item -ItemType Directory -Force -Path "../artifacts/dawn_generated/src"
        
        # 收集生成的头文件和源文件
        if (Test-Path "out/Release/gen") {
          Copy-Item -Recurse "out/Release/gen/*" "../artifacts/dawn_generated/" -Force
        }
        
    - name: 创建输出目录结构
      run: |
        New-Item -ItemType Directory -Force -Path "artifacts/Skia/include/skia"
        New-Item -ItemType Directory -Force -Path "artifacts/Skia/include/dawn"
        New-Item -ItemType Directory -Force -Path "artifacts/Skia/include/modules"
        New-Item -ItemType Directory -Force -Path "artifacts/Skia/bin/Win/x64"
        New-Item -ItemType Directory -Force -Path "artifacts/Skia/lib/Win/x64"
        
    - name: 复制Skia文件
      run: |
        # 复制Skia头文件
        if (Test-Path "skia_build/include") {
          Copy-Item -Recurse "skia_build/include/*" "artifacts/Skia/include/skia/" -Force
        }
        
        # 复制Skia模块头文件
        Get-ChildItem -Path "skia_build/modules" -Recurse -Directory -Name "include" | ForEach-Object {
          $sourcePath = "skia_build/modules/$_"
          if (Test-Path $sourcePath) {
            Copy-Item -Recurse "$sourcePath/*" "artifacts/Skia/include/modules/" -Force -ErrorAction SilentlyContinue
          }
        }
        
        # 复制Dawn头文件
        if (Test-Path "dawn_build/include") {
          Copy-Item -Recurse "dawn_build/include/*" "artifacts/Skia/include/dawn/" -Force
        }
        
        # 复制Dawn生成的头文件
        if (Test-Path "artifacts/dawn_generated/include") {
          Copy-Item -Recurse "artifacts/dawn_generated/include/*" "artifacts/Skia/include/dawn/" -Force -ErrorAction SilentlyContinue
        }
        
        # 复制编译产物
        Get-ChildItem -Path "skia_build/out/Release" -Filter "*.lib" | Copy-Item -Destination "artifacts/Skia/lib/Win/x64/" -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path "skia_build/out/Release" -Filter "*.dll" | Copy-Item -Destination "artifacts/Skia/bin/Win/x64/" -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path "dawn_build/out/Release" -Filter "*.lib" | Copy-Item -Destination "artifacts/Skia/lib/Win/x64/" -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path "dawn_build/out/Release" -Filter "*.dll" | Copy-Item -Destination "artifacts/Skia/bin/Win/x64/" -Force -ErrorAction SilentlyContinue
        
    - name: 生成CMakeLists.txt
      run: |
        $cmakeContent = @"
cmake_minimum_required(VERSION 3.20)
project(Skia CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Skia目标库
add_library(Skia INTERFACE)

# 设置包含目录
target_include_directories(Skia INTERFACE
    `${CMAKE_CURRENT_SOURCE_DIR}/include/skia
    `${CMAKE_CURRENT_SOURCE_DIR}/include/dawn  
    `${CMAKE_CURRENT_SOURCE_DIR}/include/modules
)

# 根据平台设置库目录和链接库
if(WIN32)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(SKIA_LIB_DIR `${CMAKE_CURRENT_SOURCE_DIR}/lib/Win/x64)
        set(SKIA_BIN_DIR `${CMAKE_CURRENT_SOURCE_DIR}/bin/Win/x64)
    endif()
    
    # 查找所有可用的库文件
    file(GLOB SKIA_LIBS "`${SKIA_LIB_DIR}/*.lib")
    
    # 链接Windows特定的库
    target_link_libraries(Skia INTERFACE
        `${SKIA_LIBS}
        d3d11.lib
        d3d12.lib
        dxgi.lib
        vulkan-1.lib
        opengl32.lib
        user32.lib
        gdi32.lib
        ole32.lib
        oleaut32.lib
        uuid.lib
    )
    
elseif(ANDROID)
    if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
        set(SKIA_LIB_DIR `${CMAKE_CURRENT_SOURCE_DIR}/lib/Android/arm64)
        set(SKIA_BIN_DIR `${CMAKE_CURRENT_SOURCE_DIR}/bin/Android/arm64)
    elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64") 
        set(SKIA_LIB_DIR `${CMAKE_CURRENT_SOURCE_DIR}/lib/Android/x64)
        set(SKIA_BIN_DIR `${CMAKE_CURRENT_SOURCE_DIR}/bin/Android/x64)
    endif()
    
    # 查找所有可用的库文件
    file(GLOB SKIA_LIBS "`${SKIA_LIB_DIR}/*.a")
    
    target_link_libraries(Skia INTERFACE
        `${SKIA_LIBS}
        EGL
        GLESv2
        vulkan
        android
        log
    )
    
elseif(UNIX AND NOT APPLE)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(SKIA_LIB_DIR `${CMAKE_CURRENT_SOURCE_DIR}/lib/Linux/x64)
        set(SKIA_BIN_DIR `${CMAKE_CURRENT_SOURCE_DIR}/bin/Linux/x64)
    endif()
    
    # 查找所有可用的库文件
    file(GLOB SKIA_LIBS "`${SKIA_LIB_DIR}/*.a")
    
    target_link_libraries(Skia INTERFACE
        `${SKIA_LIBS}
        vulkan
        GL
        X11
        Xext
        pthread
        dl
        m
    )
endif()

# Dawn动态生成库目标
add_library(DawnDynamic INTERFACE)
target_include_directories(DawnDynamic INTERFACE
    `${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
)

# 将DawnDynamic链接到Skia
target_link_libraries(Skia INTERFACE DawnDynamic)

# 导出编译定义
target_compile_definitions(Skia INTERFACE
    SK_GANESH
    SK_VULKAN
    SK_GL
)

if(WIN32)
    target_compile_definitions(Skia INTERFACE
        SK_DIRECT3D
        NOMINMAX
    )
endif()
"@
        
        $cmakeContent | Out-File -FilePath "artifacts/Skia/CMakeLists.txt" -Encoding UTF8
        
    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-windows-x64
        path: artifacts/

  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [x64]
        
    steps:
    - name: 检出代码  
      uses: actions/checkout@v4
      
    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ninja-build \
          python3 \
          python3-pip \
          pkg-config \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxi-dev \
          libglu1-mesa-dev \
          libgl1-mesa-dev \
          libvulkan-dev \
          vulkan-tools \
          libwayland-dev \
          libxkbcommon-dev \
          wget \
          curl
          
    - name: 安装GCC 13
      run: |
        sudo apt-get install -y gcc-13 g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13
        
    - name: 安装Clang 18
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-18
        
    - name: 配置Git全局设置
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global depot-tools.allowGlobalGitConfig true
        
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        
    - name: 同步Skia源码
      run: |
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        mkdir skia_build
        cd skia_build
        gclient config https://skia.googlesource.com/skia.git
        gclient sync --no-history --shallow
        
    - name: 同步Dawn源码
      run: |
        git clone https://dawn.googlesource.com/dawn.git dawn_build
        cd dawn_build
        python3 tools/fetch_dawn_dependencies.py --use-test-deps
        
    - name: 配置Skia构建 (Linux)
      run: |
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        cd skia_build
        python3 bin/fetch-gn
        bin/gn gen out/Release --args='
          is_debug=false
          is_component_build=false
          skia_use_system_expat=false
          skia_use_system_icu=false  
          skia_use_system_libjpeg_turbo=false
          skia_use_system_libpng=false
          skia_use_system_libwebp=false
          skia_use_system_zlib=false
          skia_use_dawn=true
          skia_use_vulkan=true
          skia_use_gl=true
          skia_enable_gpu=true
          target_cpu="x64"
          cc="clang-18"
          cxx="clang++-18"
          extra_cflags=["-std=c++20"]
          extra_cflags_cc=["-std=c++20"]
        '
        
    - name: 配置Dawn构建 (Linux)
      run: |
        cd dawn_build
        mkdir -p out/Release
        cmake -B out/Release -G Ninja \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_C_COMPILER=clang-18 \
          -DCMAKE_CXX_COMPILER=clang++-18 \
          -DCMAKE_CXX_STANDARD=20 \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DDAWN_USE_GLFW=OFF \
          -DTINT_BUILD_TESTS=OFF \
          -DTINT_BUILD_CMD_TOOLS=OFF \
          -DDAWN_ENABLE_VULKAN=ON \
          -DDAWN_ENABLE_OPENGL=ON \
          -DDAWN_ENABLE_OPENGLES=OFF \
          -DDAWN_BUILD_GEN_VERSION=ON
          
    - name: 编译Dawn
      run: |
        cd dawn_build
        cmake --build out/Release --config RelWithDebInfo -j $(nproc)
        
    - name: 编译Skia
      run: |
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        cd skia_build  
        ninja -C out/Release -j $(nproc)
        
    - name: 收集Dawn生成的文件
      run: |
        cd dawn_build
        mkdir -p ../artifacts/dawn_generated/include
        mkdir -p ../artifacts/dawn_generated/src
        
        if [ -d "out/Release/gen" ]; then
          cp -r out/Release/gen/* ../artifacts/dawn_generated/
        fi
        
    - name: 创建输出目录结构
      run: |
        mkdir -p artifacts/Skia/include/skia
        mkdir -p artifacts/Skia/include/dawn
        mkdir -p artifacts/Skia/include/modules  
        mkdir -p artifacts/Skia/bin/Linux/x64
        mkdir -p artifacts/Skia/lib/Linux/x64
        
    - name: 复制Skia文件
      run: |
        # 复制Skia头文件
        if [ -d "skia_build/include" ]; then
          cp -r skia_build/include/* artifacts/Skia/include/skia/
        fi
        
        # 复制Skia模块头文件
        find skia_build/modules -name "include" -type d -exec cp -r {}/* artifacts/Skia/include/modules/ \; 2>/dev/null || true
        
        # 复制Dawn头文件
        if [ -d "dawn_build/include" ]; then
          cp -r dawn_build/include/* artifacts/Skia/include/dawn/
        fi
        
        # 复制Dawn生成的头文件
        if [ -d "artifacts/dawn_generated/include" ]; then
          cp -r artifacts/dawn_generated/include/* artifacts/Skia/include/dawn/ 2>/dev/null || true
        fi
        
        # 复制编译产物
        find skia_build/out/Release -name "*.a" -exec cp {} artifacts/Skia/lib/Linux/x64/ \; 2>/dev/null || true
        find skia_build/out/Release -name "*.so" -exec cp {} artifacts/Skia/bin/Linux/x64/ \; 2>/dev/null || true
        find dawn_build/out/Release -name "*.a" -exec cp {} artifacts/Skia/lib/Linux/x64/ \; 2>/dev/null || true
        find dawn_build/out/Release -name "*.so" -exec cp {} artifacts/Skia/bin/Linux/x64/ \; 2>/dev/null || true
        
    - name: 上传Linux构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-linux-x64
        path: artifacts/

  build-android:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [arm64, x64]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 设置Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        add-to-path: false
        
    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build python3 python3-pip
        
    - name: 配置Git全局设置
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global depot-tools.allowGlobalGitConfig true
        
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        
    - name: 同步Skia源码
      run: |
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        mkdir skia_build
        cd skia_build
        gclient config https://skia.googlesource.com/skia.git
        gclient sync --no-history --shallow
        
    - name: 同步Dawn源码
      run: |
        git clone https://dawn.googlesource.com/dawn.git dawn_build
        cd dawn_build
        python3 tools/fetch_dawn_dependencies.py --use-test-deps
        
    - name: 配置架构变量
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
          echo "TARGET_CPU=arm64" >> $GITHUB_ENV
        else
          echo "ANDROID_ABI=x86_64" >> $GITHUB_ENV  
          echo "TARGET_CPU=x64" >> $GITHUB_ENV
        fi
        
    - name: 配置Skia构建 (Android)
      run: |
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        cd skia_build
        python3 bin/fetch-gn
        bin/gn gen out/Release --args='
          is_debug=false
          is_component_build=false
          skia_use_system_expat=false
          skia_use_system_icu=false
          skia_use_system_libjpeg_turbo=false
          skia_use_system_libpng=false
          skia_use_system_libwebp=false
          skia_use_system_zlib=false
          skia_use_dawn=true
          skia_use_vulkan=true
          skia_use_gl=false
          skia_enable_gpu=true
          target_os="android"
          target_cpu="'$TARGET_CPU'"
          ndk="'$ANDROID_NDK_ROOT'"
          extra_cflags=["-std=c++20"]
          extra_cflags_cc=["-std=c++20"]
        '
        
    - name: 配置Dawn构建 (Android)
      run: |
        cd dawn_build
        mkdir -p out/Release
        cmake -B out/Release -G Ninja \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ANDROID_ABI \
          -DANDROID_PLATFORM=android-24 \
          -DCMAKE_CXX_STANDARD=20 \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DDAWN_USE_GLFW=OFF \
          -DTINT_BUILD_TESTS=OFF \
          -DTINT_BUILD_CMD_TOOLS=OFF \
          -DDAWN_ENABLE_VULKAN=ON \
          -DDAWN_ENABLE_OPENGL=OFF \
          -DDAWN_ENABLE_OPENGLES=ON \
          -DDAWN_BUILD_GEN_VERSION=ON
          
    - name: 编译Dawn
      run: |
        cd dawn_build
        cmake --build out/Release --config RelWithDebInfo -j $(nproc)
        
    - name: 编译Skia
      run: |
        export PATH="${{ github.workspace }}/depot_tools:$PATH"
        cd skia_build
        ninja -C out/Release -j $(nproc)
        
    - name: 收集Dawn生成的文件
      run: |
        cd dawn_build
        mkdir -p ../artifacts/dawn_generated/include
        mkdir -p ../artifacts/dawn_generated/src
        
        if [ -d "out/Release/gen" ]; then
          cp -r out/Release/gen/* ../artifacts/dawn_generated/
        fi
        
    - name: 创建输出目录结构
      run: |
        mkdir -p artifacts/Skia/include/skia
        mkdir -p artifacts/Skia/include/dawn
        mkdir -p artifacts/Skia/include/modules
        mkdir -p artifacts/Skia/bin/Android/${{ matrix.arch }}
        mkdir -p artifacts/Skia/lib/Android/${{ matrix.arch }}
        
    - name: 复制Skia文件
      run: |
        # 复制Skia头文件
        if [ -d "skia_build/include" ]; then
          cp -r skia_build/include/* artifacts/Skia/include/skia/
        fi
        
        # 复制Skia模块头文件
        find skia_build/modules -name "include" -type d -exec cp -r {}/* artifacts/Skia/include/modules/ \; 2>/dev/null || true
        
        # 复制Dawn头文件
        if [ -d "dawn_build/include" ]; then
          cp -r dawn_build/include/* artifacts/Skia/include/dawn/
        fi
        
        # 复制Dawn生成的头文件
        if [ -d "artifacts/dawn_generated/include" ]; then
          cp -r artifacts/dawn_generated/include/* artifacts/Skia/include/dawn/ 2>/dev/null || true
        fi
        
        # 复制编译产物
        find skia_build/out/Release -name "*.a" -exec cp {} artifacts/Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find skia_build/out/Release -name "*.so" -exec cp {} artifacts/Skia/bin/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn_build/out/Release -name "*.a" -exec cp {} artifacts/Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn_build/out/Release -name "*.so" -exec cp {} artifacts/Skia/bin/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        
    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-android-${{ matrix.arch }}
        path: artifacts/

  package:
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: downloads/
        
    - name: 合并构建产物
      run: |
        mkdir -p merged/Skia
        
        # 合并Windows构建产物
        if [ -d "downloads/skia-windows-x64" ]; then
          cp -r downloads/skia-windows-x64/Skia/* merged/Skia/
        fi
        
        # 合并Linux构建产物
        if [ -d "downloads/skia-linux-x64" ]; then
          mkdir -p merged/Skia/bin/Linux merged/Skia/lib/Linux
          cp -r downloads/skia-linux-x64/Skia/bin/Linux/* merged/Skia/bin/Linux/ 2>/dev/null || true
          cp -r downloads/skia-linux-x64/Skia/lib/Linux/* merged/Skia/lib/Linux/ 2>/dev/null || true
          # 头文件只需要复制一份
          if [ ! -d "merged/Skia/include" ]; then
            cp -r downloads/skia-linux-x64/Skia/include merged/Skia/
          fi
        fi
        
        # 合并Android构建产物
        for arch in arm64 x64; do
          if [ -d "downloads/skia-android-${arch}" ]; then
            mkdir -p merged/Skia/bin/Android merged/Skia/lib/Android
            cp -r downloads/skia-android-${arch}/Skia/bin/Android/* merged/Skia/bin/Android/ 2>/dev/null || true  
            cp -r downloads/skia-android-${arch}/Skia/lib/Android/* merged/Skia/lib/Android/ 2>/dev/null || true
            # 头文件只需要复制一份
            if [ ! -d "merged/Skia/include" ]; then
              cp -r downloads/skia-android-${arch}/Skia/include merged/Skia/
            fi
          fi
        done
        
        # 如果CMakeLists.txt不存在，创建一个基本的
        if [ ! -f "merged/Skia/CMakeLists.txt" ]; then
          find downloads -name "CMakeLists.txt" -exec cp {} merged/Skia/ \; -quit
        fi
        
    - name: 创建Skia.zip
      run: |
        cd merged
        zip -r ../Skia.zip Skia/
        
    - name: 上传最终包
      uses: actions/upload-artifact@v4
      with:
        name: Skia
        path: Skia.zip
        
    - name: 发布Release (如果是标签推送)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: Skia.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
