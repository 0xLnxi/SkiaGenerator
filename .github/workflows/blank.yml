name: 编译 Skia + Dawn 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write
  actions: read

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-skia-dawn:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            compiler: msvc2022
          - os: ubuntu-24.04
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            compiler: clang18
          - os: ubuntu-24.04
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            compiler: clang18
          - os: ubuntu-24.04
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21
            compiler: clang18

    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装Linux系统依赖
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build cmake clang-18 gcc-13 g++-13 \
            libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev \
            libvulkan-dev vulkan-tools libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libx11-dev \
            libicu-dev libharfbuzz-dev openjdk-11-jdk
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: 安装Windows系统依赖
        if: runner.os == 'Windows'
        run: |
          choco install ninja -y
          choco install llvm --version=18.1.8 --force -y
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 设置Visual Studio环境
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: 设置Android NDK
        if: matrix.target_os == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: 获取 depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        shell: bash

      - name: 设置 depot_tools 路径 (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 获取 Skia 源码
        run: |
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          mkdir skia-build && cd skia-build
          gclient config --name skia https://skia.googlesource.com/skia.git
          gclient sync
        shell: bash

      - name: 获取 Dawn 源码
        run: |
          git clone --recursive https://dawn.googlesource.com/dawn.git dawn-source
          cd dawn-source
          python3 tools/fetch_dawn_dependencies.py
        shell: bash

      - name: 配置 Dawn 构建
        run: |
          cd dawn-source
          mkdir -p build-${{ matrix.platform }} && cd build-${{ matrix.platform }}
          case "${{ matrix.target_os }}" in
            win)
              cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.arch == 'x64' && 'x64' || 'Win32' }} \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_D3D11=ON -DDAWN_ENABLE_D3D12=ON -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON \
                -DCMAKE_CXX_STANDARD=20 -DDAWN_USE_BUILT_DXC=ON
              ;;
            linux)
              cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
            android)
              if [ "${{ matrix.arch }}" = "arm64" ]; then ANDROID_ABI="arm64-v8a"; else ANDROID_ABI="x86_64"; fi
              cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_SYSTEM_NAME=Android -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
                -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME} -DCMAKE_ANDROID_STL_TYPE=c++_static \
                -DCMAKE_ANDROID_API=${{ matrix.android_api }} \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGLES=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
          esac
        shell: bash

      - name: 编译 Dawn
        run: |
          cd dawn-source/build-${{ matrix.platform }}
          case "${{ matrix.target_os }}" in
            win) cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4 ;; 
            *) ninja -j4 ;; 
          esac
        shell: bash

      - name: 配置 Skia 构建
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          python3 tools/git-sync-deps
          args="is_official_build=false is_debug=false extra_cflags=['-O2','-g'] skia_use_dawn=true skia_dawn_dir='../../dawn-source' "
          args+="skia_enable_gpu=true skia_use_gl=true skia_use_vulkan=true skia_enable_spirv_validation=false "
          args+="target_os='${{ matrix.target_os }}' target_cpu='${{ matrix.target_cpu }}' cc='clang' cxx='clang++'"
          if [ "${{ matrix.target_os }}" = win ]; then
            args+=" skia_use_direct3d=true skia_use_angle=true skia_use_freetype=true cc='clang' cxx='clang++' clang_win='C:/Program Files/LLVM'"
          fi
          echo "BUILD_ARGS=$args" >> $GITHUB_ENV
        shell: bash

      - name: 生成 Skia 构建文件
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          bin/gn gen out/Release --args="$BUILD_ARGS"
        shell: bash

      - name: 编译 Skia
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          ninja -C out/Release -j4
        shell: bash

      - name: 收集 Dawn 生成文件
        run: |
          mkdir -p dawn-generated/{include/dawn,include/webgpu,src/dawn,src/emdawnwebgpu,webgpu-headers}
          cp -r dawn-source/build-${{ matrix.platform }}/gen/include/* dawn-generated/include/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/src/* dawn-generated/src/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/webgpu-headers/* dawn-generated/webgpu-headers/ 2>/dev/null || true
        shell: bash

      - name: 创建发布包结构
        run: |
          mkdir -p Skia/{include/core,include/dawn,include/modules,lib/${{ matrix.target_os }}/${{ matrix.arch }},bin/${{ matrix.target_os }}/${{ matrix.arch }}}
          cp -r skia-build/skia/include/* Skia/include/core/
          cp -r skia-build/skia/modules/* Skia/include/modules/ 2>/dev/null || true
          cp -r dawn-source/include/* Skia/include/dawn/ 2>/dev/null || true
          cp -r dawn-generated/include/* Skia/include/dawn/ 2>/dev/null || true
          case "${{ matrix.target_os }}" in
            win)
              find skia-build/skia/out/Release -name "*.lib" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find skia-build/skia/out/Release -name "*.dll" -exec cp {} Skia/bin/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find dawn-source/build-${{ matrix.platform }}/${{ env.BUILD_TYPE }} -name "*.lib" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find dawn-source/build-${{ matrix.platform }}/${{ env.BUILD_TYPE }} -name "*.dll" -exec cp {} Skia/bin/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              ;; 
            *)
              find skia-build/skia/out/Release -name "*.a" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find skia-build/skia/out/Release -name "*.so" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{
