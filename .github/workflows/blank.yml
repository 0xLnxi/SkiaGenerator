# Skia + Dawn WebGPU 全平台构建工作流
name: 编译 Skia + Dawn 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia-dawn:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: Win
            arch: x64
            target_os: win
            target_cpu: x64
            dawn_backends: "d3d11,d3d12,vulkan"
            
          # macOS x64架构
          - os: macos-latest
            platform: Mac
            arch: x64
            target_os: mac
            target_cpu: x64
            dawn_backends: "metal"
            
          # macOS ARM64架构
          - os: macos-latest
            platform: Mac
            arch: arm64
            target_os: mac
            target_cpu: arm64
            dawn_backends: "metal"
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: Linux
            arch: x64
            target_os: linux
            target_cpu: x64
            dawn_backends: "vulkan,opengl"
            
          # Android x64架构
          - os: ubuntu-latest
            platform: Android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            dawn_backends: "vulkan,opengl"
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: Android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21
            dawn_backends: "vulkan,opengl"

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 安装基础构建工具
        sudo apt-get install -y build-essential ninja-build
        # 安装图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # 安装Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools
        # 安装X11相关库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        # 安装ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        # 安装Java开发环境（Android构建需要）
        sudo apt-get install -y openjdk-11-jdk
        # 安装Wayland支持库
        sudo apt-get install -y libwayland-dev libxkbcommon-dev
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装Xcode命令行工具
        xcode-select --install 2>/dev/null || true
        # 安装ninja构建工具
        brew install ninja || true
        # 验证Xcode版本
        xcodebuild -version
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装ninja构建工具
        choco install ninja -y
        
    # 设置Android NDK环境（仅限Android平台）
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取Google的depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Dawn源代码并同步依赖
    - name: 获取Dawn源代码
      run: |
        git clone https://dawn.googlesource.com/dawn.git
        cd dawn
        cp scripts/standalone.gclient .gclient
        gclient sync
        echo "✅ Dawn源代码获取完成"
      shell: bash
      
    # 获取Skia源代码并同步依赖
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
        echo "✅ Skia源代码获取完成"
      shell: bash
      
    # 配置Dawn构建参数
    - name: 配置Dawn构建参数
      run: |
        cd dawn
        
        # 基础构建参数设置
        args="is_debug=false"
        args="$args is_component_build=false"
        args="$args dawn_use_swiftshader=false"
        args="$args dawn_enable_d3d11=$([[ \"${{ matrix.dawn_backends }}\" == *\"d3d11\"* ]] && echo \"true\" || echo \"false\")"
        args="$args dawn_enable_d3d12=$([[ \"${{ matrix.dawn_backends }}\" == *\"d3d12\"* ]] && echo \"true\" || echo \"false\")"
        args="$args dawn_enable_metal=$([[ \"${{ matrix.dawn_backends }}\" == *\"metal\"* ]] && echo \"true\" || echo \"false\")"
        args="$args dawn_enable_vulkan=$([[ \"${{ matrix.dawn_backends }}\" == *\"vulkan\"* ]] && echo \"true\" || echo \"false\")"
        args="$args dawn_enable_desktop_gl=$([[ \"${{ matrix.dawn_backends }}\" == *\"opengl\"* ]] && echo \"true\" || echo \"false\")"
        args="$args dawn_enable_opengles=$([[ \"${{ matrix.dawn_backends }}\" == *\"opengl\"* ]] && echo \"true\" || echo \"false\")"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # Android特定配置
        if [ "${{ matrix.target_os }}" = "android" ]; then
          args="$args android_api_level=${{ matrix.android_api }}"
          args="$args ndk_api_level_at_least=${{ matrix.android_api }}"
        fi
        
        echo "DAWN_BUILD_ARGS=$args" >> $GITHUB_ENV
        echo "✅ Dawn构建参数配置完成: $args"
      shell: bash
      
    # 配置Skia构建参数
    - name: 配置Skia构建参数
      run: |
        cd skia
        
        # 基础构建参数设置
        args="is_official_build=true"
        args="$args cc=\"clang\""
        args="$args cxx=\"clang++\""
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用C++20支持
        args="$args extra_cflags_cc=[\"-std=c++20\"]"
        
        # 启用全量功能支持
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skottie=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持，包含Dawn
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        args="$args skia_use_dawn=true"
        
        # 启用Graphite（实验性新渲染引擎）
        args="$args skia_enable_graphite=true"
        
        # 禁用工具构建
        args="$args skia_enable_tools=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args extra_cflags=[\"/MD\"]"
            args="$args extra_cflags_c=[\"/MD\"]"
            args="$args extra_cflags_cc=[\"/MD\", \"-std=c++20\"]"
            ;;
          "mac")
            # macOS平台特定配置
            args="$args skia_use_metal=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            ;;
          "linux")
            # Linux平台特定配置
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            ;;
          "android")
            # Android平台特定配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args android_api_level=${{ matrix.android_api }}"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            ;;
        esac
        
        echo "SKIA_BUILD_ARGS=$args" >> $GITHUB_ENV
        echo "✅ Skia构建参数配置完成"
      shell: bash
      
    # 构建Dawn
    - name: 构建Dawn
      run: |
        cd dawn
        echo "开始构建 ${{ matrix.target_os }} 平台的Dawn..."
        bin/gn gen out/Release --args="$DAWN_BUILD_ARGS"
        ninja -C out/Release -j4
        echo "✅ ${{ matrix.target_os }} 平台Dawn构建完成"
      shell: bash
      
    # 构建Skia
    - name: 构建Skia
      run: |
        cd skia
        echo "开始构建 ${{ matrix.target_os }} 平台的Skia..."
        bin/gn gen out/Release --args="$SKIA_BUILD_ARGS"
        ninja -C out/Release -j4
        echo "✅ ${{ matrix.target_os }} 平台Skia构建完成"
      shell: bash
      
    # 创建发布包并整理文件
    - name: 创建Skia+Dawn发布包
      run: |
        # 创建符合要求的目录结构
        mkdir -p Skia_Prebuilt/Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}
        mkdir -p Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}
        mkdir -p Skia_Prebuilt/Skia/include
        mkdir -p Skia_Prebuilt/Skia/modules
        mkdir -p Skia_Prebuilt/Skia/examples
        mkdir -p Skia_Prebuilt/Skia/dawn/bin/${{ matrix.platform }}/${{ matrix.arch }}
        mkdir -p Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/${{ matrix.arch }}
        mkdir -p Skia_Prebuilt/Skia/dawn/include
        
        # 复制Skia头文件
        cp -r skia/include/* Skia_Prebuilt/Skia/include/
        
        # 复制Skia模块
        if [ -d "skia/modules" ]; then
          cp -r skia/modules/* Skia_Prebuilt/Skia/modules/
        fi
        
        # 复制Skia示例资源
        if [ -d "skia/resources" ]; then
          cp -r skia/resources/* Skia_Prebuilt/Skia/examples/
        fi
        
        # 复制Dawn头文件
        cp -r dawn/include/* Skia_Prebuilt/Skia/dawn/include/
        
        # 根据平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Skia Windows文件
            find skia/out/Release -name "*.lib" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            find skia/out/Release -name "*.dll" -exec cp {} Skia_Prebuilt/Skia/bin/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            # Dawn Windows文件
            find dawn/out/Release -name "*.lib" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            find dawn/out/Release -name "*.dll" -exec cp {} Skia_Prebuilt/Skia/dawn/bin/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            ;;
          "mac")
            # Skia macOS文件
            find skia/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            find skia/out/Release -name "*.dylib" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            # Dawn macOS文件
            find dawn/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            find dawn/out/Release -name "*.dylib" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            ;;
          "linux"|"android")
            # Skia Linux/Android文件
            find skia/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            find skia/out/Release -name "*.so" -exec cp {} Skia_Prebuilt/Skia/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            # Dawn Linux/Android文件
            find dawn/out/Release -name "*.a" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            find dawn/out/Release -name "*.so" -exec cp {} Skia_Prebuilt/Skia/dawn/lib/${{ matrix.platform }}/${{ matrix.arch }}/ \;
            ;;
        esac
        
        echo "✅ ${{ matrix.platform }}/${{ matrix.arch }} 文件整理完成"
      shell: bash
      
    # 生成CMakeLists.txt文件
    - name: 生成CMakeLists.txt
      run: |
        cat > Skia_Prebuilt/Skia/CMakeLists.txt << 'EOF'
        # Skia + Dawn WebGPU 图形库的CMake配置文件（全平台支持）
        cmake_minimum_required(VERSION 3.20)
        
        # 设置项目信息
        project(SkiaDawnPrebuilt
            VERSION 1.0.0
            DESCRIPTION "Skia + Dawn WebGPU 预编译图形库"
            LANGUAGES CXX C
        )
        
        # 强制要求C++20标准
        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 检测当前平台和架构
        if(WIN32)
            set(SKDN_PLATFORM "Win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SKDN_ARCH "x64")
            else()
                set(SKDN_ARCH "x86")
            endif()
        elseif(APPLE)
            set(SKDN_PLATFORM "Mac")
            if(CMAKE_OSX_ARCHITECTURES MATCHES "arm64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "arm64")
                set(SKDN_ARCH "arm64")
            else()
                set(SKDN_ARCH "x64")
            endif()
        elseif(ANDROID)
            set(SKDN_PLATFORM "Android")
            if(ANDROID_ABI MATCHES "arm64-v8a")
                set(SKDN_ARCH "arm64")
            elseif(ANDROID_ABI MATCHES "x86_64")
                set(SKDN_ARCH "x64")
            else()
                message(FATAL_ERROR "不支持的Android架构: ${ANDROID_ABI}")
            endif()
        else()
            set(SKDN_PLATFORM "Linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SKDN_ARCH "x64")
            else()
                set(SKDN_ARCH "x86")
            endif()
        endif()
        
        message(STATUS "检测到平台: ${SKDN_PLATFORM}/${SKDN_ARCH}")
        
        # 设置库文件路径
        set(SKIA_LIB_DIR "${SKIA_ROOT_DIR}/lib/${SKDN_PLATFORM}/${SKDN_ARCH}")
        set(DAWN_LIB_DIR "${SKIA_ROOT_DIR}/dawn/lib/${SKDN_PLATFORM}/${SKDN_ARCH}")
        set(SKIA_BIN_DIR "${SKIA_ROOT_DIR}/bin/${SKDN_PLATFORM}/${SKDN_ARCH}")
        set(DAWN_BIN_DIR "${SKIA_ROOT_DIR}/dawn/bin/${SKDN_PLATFORM}/${SKDN_ARCH}")
        
        # 验证库文件路径是否存在
        if(NOT EXISTS "${SKIA_LIB_DIR}")
            message(FATAL_ERROR "Skia库文件目录不存在: ${SKIA_LIB_DIR}")
        endif()
        
        if(NOT EXISTS "${DAWN_LIB_DIR}")
            message(FATAL_ERROR "Dawn库文件目录不存在: ${DAWN_LIB_DIR}")
        endif()
        
        # 创建skdn接口库（Skia + Dawn集成）
        add_library(skdn INTERFACE)
        add_library(skdn::skdn ALIAS skdn)
        
        # 设置包含目录
        target_include_directories(skdn INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/dawn/include>
            $<INSTALL_INTERFACE:include>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:dawn/include>
        )
        
        # 查找所有库文件
        file(GLOB SKIA_LIBRARIES "${SKIA_LIB_DIR}/*")
        file(GLOB DAWN_LIBRARIES "${DAWN_LIB_DIR}/*")
        
        # 设置C++20编译特性
        target_compile_features(skdn INTERFACE cxx_std_20)
        
        # 根据平台设置特定的配置
        if(WIN32)
            # Windows平台配置
            target_compile_definitions(skdn INTERFACE
                # Skia定义
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                # Dawn定义
                DAWN_ENABLE_D3D11=1
                DAWN_ENABLE_D3D12=1
                DAWN_ENABLE_VULKAN=1
                # 系统定义
                UNICODE
                _UNICODE
                WIN32_LEAN_AND_MEAN
                NOMINMAX
            )
            
            # 设置Windows运行时为/MD（多线程DLL）
            target_compile_options(skdn INTERFACE
                $<$<CONFIG:Debug>:/MDd>
                $<$<CONFIG:Release>:/MD>
                $<$<CONFIG:RelWithDebInfo>:/MD>
                $<$<CONFIG:MinSizeRel>:/MD>
            )
            
            # 添加Windows系统库
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                # DirectX相关
                d3d11 d3d12 dxgi d3dcompiler dxguid
                # OpenGL相关
                OpenGL32
                # 系统库
                Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid
                Advapi32 Shell32 Ws2_32 Usp10
            )
            
        elseif(APPLE)
            # macOS平台配置
            target_compile_definitions(skdn INTERFACE
                # Skia定义
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                # Dawn定义
                DAWN_ENABLE_METAL=1
            )
            
            # 查找macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation REQUIRED)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics REQUIRED)
            find_library(CORETEXT_FRAMEWORK CoreText REQUIRED)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation REQUIRED)
            find_library(COCOA_FRAMEWORK Cocoa REQUIRED)
            find_library(METAL_FRAMEWORK Metal REQUIRED)
            find_library(METALKIT_FRAMEWORK MetalKit REQUIRED)
            find_library(OPENGL_FRAMEWORK OpenGL REQUIRED)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore REQUIRED)
            find_library(IOSURFACE_FRAMEWORK IOSurface REQUIRED)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK}
                ${COCOA_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
                ${OPENGL_FRAMEWORK}
                ${QUARTZCORE_FRAMEWORK}
                ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置
            target_compile_definitions(skdn INTERFACE
                # Android定义
                ANDROID
                __ANDROID_API__=21
                # Skia定义
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                # Dawn定义
                DAWN_ENABLE_VULKAN=1
                DAWN_ENABLE_OPENGLES=1
            )
            
            target_compile_options(skdn INTERFACE
                -fPIC
                -fno-rtti
                -fno-exceptions
            )
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                # OpenGL ES相关
                GLESv2 EGL
                # Vulkan相关
                vulkan
                # Android系统库
                android log jnigraphics mediandk
                # 系统库
                dl m z
            )
            
        else()
            # Linux平台配置
            target_compile_definitions(skdn INTERFACE
                # Skia定义
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_DAWN=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                # Dawn定义
                DAWN_ENABLE_VULKAN=1
                DAWN_ENABLE_DESKTOP_GL=1
            )
            
            # 查找必要的系统库
            find_package(PkgConfig QUIET)
            if(PKG_CONFIG_FOUND)
                pkg_check_modules(FONTCONFIG QUIET fontconfig)
                pkg_check_modules(HARFBUZZ QUIET harfbuzz)
            endif()
            
            # 查找Vulkan
            find_package(Vulkan QUIET)
            
            # 查找X11相关库
            find_package(X11 QUIET)
            
            target_link_libraries(skdn INTERFACE
                ${SKIA_LIBRARIES}
                ${DAWN_LIBRARIES}
                # OpenGL
                GL
                # 系统库
                pthread dl m
            )
            
            # FontConfig支持
            if(FONTCONFIG_FOUND)
                target_link_libraries(skdn INTERFACE ${FONTCONFIG_LIBRARIES})
                target_include_directories(skdn INTERFACE ${FONTCONFIG_INCLUDE_DIRS})
            endif()
            
            # HarfBuzz支持
            if(HARFBUZZ_FOUND)
                target_link_libraries(skdn INTERFACE ${HARFBUZZ_LIBRARIES})
                target_include_directories(skdn INTERFACE ${HARFBUZZ_INCLUDE_DIRS})
            endif()
            
            # 添加Vulkan支持
            if(Vulkan_FOUND)
                target_link_libraries(skdn INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skdn INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            # 添加X11支持
            if(X11_FOUND)
                target_link_libraries(skdn INTERFACE
                    ${X11_LIBRARIES}
                    ${X11_Xrandr_LIB}
                    ${X11_Xinerama_LIB}
                    ${X11_Xcursor_LIB}
                    ${X11_Xi_LIB}
                )
                target_include_directories(skdn INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 设置编译选项
        target_compile_options(skdn INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 设置预处理器定义
        target_compile_definitions(skdn INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        # 提供查找脚本位置信息
        message(STATUS "Skia + Dawn 图形库配置完成")
        message(STATUS "  - 平台: ${SKDN_PLATFORM}/${SKDN_ARCH}")
        message(STATUS "  - Skia库目录: ${SKIA_LIB_DIR}")
        message(STATUS "  - Dawn库目录: ${DAWN_LIB_DIR}")
        message(STATUS "  - 使用方法: target_link_libraries(your_target skdn::skdn)")
        EOF
        
        echo "✅ CMakeLists.txt生成完成"
      shell: bash
      
    # 打包构建产物
    - name: 打包Skia+Dawn构建产物
      run: |
        # 进入包含Skia_Prebuilt的目录
        cd Skia_Prebuilt
        
        # 根据运行平台选择合适的打包方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows系统使用PowerShell的Compress-Archive
          powershell "Compress-Archive -Path * -DestinationPath ../Skia_Prebuilt_${{ matrix.platform }}_${{ matrix.arch }}.zip"
        else
          # Unix系统使用zip命令打包
          zip -r "../Skia_Prebuilt_${{ matrix.platform }}_${{ matrix.arch }}.zip" *
        fi
        
        echo "✅ Skia_Prebuilt_${{ matrix.platform }}_${{ matrix.arch }}.zip 构建包创建完成"
      shell: bash
      
    # 上传构建产物
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia_Prebuilt_${{ matrix.platform }}_${{ matrix.arch }}
        path: Skia_Prebuilt_${{ matrix.platform }}_${{ matrix.arch }}.zip
        retention-days: 30
        compression-level: 0
        
  # 合并所有平台的构建包
  create-combined-package:
    needs: build-skia-dawn
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 创建最终的合并包
    - name: 创建最终Skia+Dawn合并包
      run: |
        # 创建基础目录结构
        mkdir -p Skia_Prebuilt/Skia/bin
        mkdir -p Skia_Prebuilt/Skia/lib  
        mkdir -p Skia_Prebuilt/Skia/include
        mkdir -p Skia_Prebuilt/Skia/modules
        mkdir -p Skia_Prebuilt/Skia/examples
        mkdir -p Skia_Prebuilt/Skia/dawn/bin
        mkdir -p Skia_Prebuilt/Skia/dawn/lib
        mkdir -p Skia_Prebuilt/Skia/dawn/include
        
        # 解压所有构建产物并合并
        for artifact_dir in artifacts/*/; do
          echo "处理构建产物: $artifact_dir"
          cd "$artifact_dir"
          
          # 解压zip文件
          for zip_file in *.zip; do
            if [ -f "$zip_file" ]; then
              echo "解压: $zip_file"
              unzip -o "$zip_file"
              
              # 复制到最终目录结构
              if [ -d "Skia" ]; then
                # 合并目录结构
                cp -r Skia/* ../../Skia_Prebuilt/Skia/ 2>/dev/null || true
              fi
            fi
          done
          
          cd - >/dev/null
        done
        
        # 生成最终的CMakeLists.txt（确保是最新版本）
        cp artifacts/*/Skia_Prebuilt_*/Skia/CMakeLists.txt Skia_Prebuilt/Skia/ 2>/dev/null || true
        
        # 创建构建信息文件
        cat > Skia_Prebuilt/Skia/BUILD_INFO.txt << EOF
        Skia + Dawn WebGPU 全平台构建包
        ================================
        
        构建日期: $(date '+%Y-%m-%d %H:%M:%S UTC')
        版本信息: Skia + Dawn WebGPU 完整集成版本
        
        支持的平台和架构:
        - Windows x64 (Direct3D 11/12 + Vulkan + OpenGL)
        - macOS x64/ARM64 (Metal)  
        - Linux x64 (Vulkan + OpenGL)
        - Android x64/ARM64 (Vulkan + OpenGL ES)
        
        主要特性:
        - Skia 2D图形库完整功能
        - Dawn WebGPU渲染后端
        - Graphite实验性渲染引擎
        - 多平台GPU加速
        - C++20标准支持
        - CMake集成库 (skdn::skdn)
        
        使用方法:
        1. 将包解压到项目目录
        2. 在CMakeLists.txt中添加:
           add_subdirectory(path/to/Skia_Prebuilt/Skia)
           target_link_libraries(your_target skdn::skdn)
        3. 包含头文件: #include <include/core/SkCanvas.h>
        
        注意事项:
        - 要求CMake 3.20+
        - 要求C++20编译器支持
        - 自动检测平台和架构
        - 包含所有必要的系统库链接
        EOF
        
        echo "✅ 最终合并包创建完成"
        
    # 打包最终版本
    - name: 打包最终版本
      run: |
        zip -r "Skia_Prebuilt.zip" Skia_Prebuilt/
        echo "✅ Skia_Prebuilt.zip 最终版本创建完成"
        
    # 上传最终构建包
    - name: 上传最终构建包
      uses: actions/upload-artifact@v4
      with:
        name: Skia_Prebuilt_Final
        path: Skia_Prebuilt.zip
        retention-days: 90
        compression-level: 0
        
  # 创建GitHub Release发布
  create-release:
    needs: create-combined-package
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载最终构建包
    - name: 下载最终构建包
      uses: actions/download-artifact@v4
      with:
        name: Skia_Prebuilt_Final
        path: release
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-dawn-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia+Dawn WebGPU 每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-dawn-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia+Dawn WebGPU 构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia + Dawn WebGPU 全平台构建包
          
          这是一个包含 Skia 2D图形库和 Dawn WebGPU 后端的完整预编译包，支持全平台部署。
          
          ## 📦 包含内容
          
          **Skia_Prebuilt.zip** - 完整的 Skia + Dawn 构建包，包含：
          
          ### 🏗️ 目录结构
          ```
          Skia/
          ├── bin/                    # 可执行文件和DLL
          │   ├── Win/x64/
          │   ├── Mac/x64/ 
          │   ├── Mac/arm64/
          │   ├── Linux/x64/
          │   └── Android/{x64,arm64}/
          ├── lib/                    # 静态和动态库文件
          │   ├── Win/x64/
          │   ├── Mac/{x64,arm64}/
          │   ├── Linux/x64/
          │   └── Android/{x64,arm64}/
          ├── include/                # Skia头文件
          ├── modules/                # Skia模块
          ├── examples/               # 示例资源
          ├── dawn/                   # Dawn WebGPU
          │   ├── bin/                # Dawn可执行文件
          │   ├── lib/                # Dawn库文件
          │   └── include/            # Dawn头文件
          └── CMakeLists.txt          # CMake配置文件
          ```
          
          ### 🎯 支持的平台
          
          | 平台 | 架构 | GPU后端 |
          |------|------|---------|
          | **Windows** | x64 | DirectX 11/12 + Vulkan + OpenGL |
          | **macOS** | x64, ARM64 | Metal |
          | **Linux** | x64 | Vulkan + OpenGL |
          | **Android** | x64, ARM64 | Vulkan + OpenGL ES |
          
          ### ✨ 主要特性
          
          - 🎨 **完整的 Skia 2D 图形功能**
          - 🌐 **Dawn WebGPU 渲染后端集成**
          - ⚡ **Graphite 实验性渲染引擎**
          - 🏃 **多平台 GPU 加速渲染**
          - 🔧 **C++20 标准支持**
          - 📦 **单一 CMake 接口库 (skdn::skdn)**
          - 🎭 **Skottie 动画支持**
          - 📄 **PDF/SVG 完整支持**
          
          ## 🚀 快速开始
          
          ### 1. 下载和解压
          ```bash
          # 下载 Skia_Prebuilt.zip
          # 解压到你的项目目录
          ```
          
          ### 2. CMake 配置
          ```cmake
          cmake_minimum_required(VERSION 3.20)
          project(MyApp)
          
          # 设置C++20标准
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # 添加Skia+Dawn库
          add_subdirectory(path/to/Skia_Prebuilt/Skia)
          
          # 创建你的应用
          add_executable(MyApp main.cpp)
          target_link_libraries(MyApp skdn::skdn)
          ```
          
          ### 3. 示例代码
          ```cpp
          #include <include/core/SkCanvas.h>
          #include <include/core/SkSurface.h>
          #include <include/gpu/GrDirectContext.h>
          #include <webgpu/webgpu_cpp.h>
          
          int main() {
              // 使用Skia绘制
              auto surface = SkSurface::MakeRasterN32Premul(800, 600);
              auto canvas = surface->getCanvas();
              
              // 绘制操作...
              canvas->clear(SK_ColorWHITE);
              
              // Dawn WebGPU集成
              // ...
              
              return 0;
          }
          ```
          
          ## 📋 系统要求
          
          - **CMake**: 3.20 或更高版本
          - **编译器**: 支持 C++20 的现代编译器
            - MSVC 2019 16.11+ (Windows)
            - Clang 12+ (macOS/Linux)  
            - GCC 11+ (Linux)
          - **平台特定**:
            - Windows: Visual Studio 2019+
            - macOS: Xcode 13+
            - Linux: 现代发行版
            - Android: NDK r25c+
          
          ## 🔧 技术细节
          
          - **并行编译**: 使用多线程加速构建
          - **静态链接**: 所有依赖都已静态链接
          - **自动检测**: CMake自动检测平台和架构
          - **完整功能**: 启用所有Skia和Dawn特性
          - **生产就绪**: 优化的Release构建
          
          ## 📚 文档和支持
          
          - Skia 官方文档: https://skia.org/
          - Dawn 官方文档: https://dawn.googlesource.com/dawn
          - WebGPU 规范: https://www.w3.org/TR/webgpu/
          
          ---
          
          🎉 **现在就开始你的跨平台图形应用开发之旅吧！**
        files: |
          release/Skia_Prebuilt.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
