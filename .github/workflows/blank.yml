# Skia 全平台构建工作流（不包含Dawn WebGPU）
name: 编译 Skia 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            
          # macOS x64架构
          - os: macos-latest
            platform: x64_macos
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest
            platform: arm64_macos
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包（Linux和Android构建需要）
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 安装基础构建工具
        sudo apt-get install -y build-essential ninja-build
        # 安装图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # 安装Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools
        # 安装X11相关库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        # 安装ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        # 安装Java开发环境（Android构建需要）
        sudo apt-get install -y openjdk-11-jdk
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装Xcode命令行工具
        xcode-select --install 2>/dev/null || true
        # 安装ninja构建工具
        brew install ninja || true
        # 验证Xcode版本
        xcodebuild -version
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装ninja构建工具
        choco install ninja -y
        
    # 设置Android NDK环境（仅限Android平台）
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取Google的depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码并同步依赖
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
      shell: bash
      
    # 配置Skia构建参数
    - name: 配置Skia构建参数
      run: |
        cd skia
        
        # 基础构建参数设置 - 启用全量功能
        args="is_official_build=true"
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用全量功能支持，但使用内置依赖库
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skottie=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持 - 不包含Dawn WebGPU
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        
        # 禁用工具构建以避免测试工具API问题
        args="$args skia_enable_tools=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置 - 使用/MD运行时
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=false"
            args="$args skia_use_piex=false"
            # 设置Windows使用/MD运行时（多线程DLL）
            args="$args extra_cflags=[\"/MD\"]"
            args="$args extra_cflags_c=[\"/MD\"]"
            args="$args extra_cflags_cc=[\"/MD\"]"
            ;;
          "mac")
            # macOS平台特定配置 - 使用内置库避免系统库冲突
            args="$args skia_use_metal=true"
            args="$args skia_enable_skottie=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_pdf_subset_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "linux")
            # Linux平台特定配置
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            args="$args skia_use_system_freetype2=true"
            args="$args skia_use_system_harfbuzz=true"
            ;;
          "android")
            # Android平台特定配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args android_api_level=${{ matrix.android_api }}"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_vulkan=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            ;;
        esac
        
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 使用GN生成构建文件
    - name: 生成Skia构建文件
      run: |
        cd skia
        echo "正在为 ${{ matrix.target_os }} 平台生成构建文件..."
        bin/gn gen out/Release --args="$BUILD_ARGS"
        echo "构建配置完成"
      shell: bash
      
    # 使用Ninja编译Skia
    - name: 编译Skia
      run: |
        cd skia
        echo "开始编译 ${{ matrix.target_os }} 平台的Skia..."
        # 根据平台设置并行编译线程数
        if [ "${{ matrix.target_os }}" = "android" ]; then
          # Android构建使用8线程
          ninja -C out/Release -j8
        else
          # 其他平台使用6线程
          ninja -C out/Release -j6
        fi
        echo "✅ ${{ matrix.target_os }} 平台Skia编译完成"
      shell: bash
      
    # 创建发布包并整理文件
    - name: 创建Skia发布包
      run: |
        cd skia
        
        # 创建输出目录结构
        mkdir -p package/include
        mkdir -p package/lib
        mkdir -p package/bin
        mkdir -p package/docs
        mkdir -p package/examples
        mkdir -p package/modules
        
        # 如果是Android平台，创建Android特定目录
        if [ "${{ matrix.target_os }}" = "android" ]; then
          mkdir -p package/android
        fi
        
        # 复制头文件到包目录
        cp -r include/* package/include/
        
        # 复制modules目录到包根目录以支持 "modules/skcms/skcms.h" 引用
        if [ -d "modules" ]; then
          cp -r modules/* package/modules/ 2>/dev/null || true
        fi
        
        # 复制Android特定的头文件
        if [ "${{ matrix.target_os }}" = "android" ] && [ -d "include/android" ]; then
          cp -r include/android/* package/android/ 2>/dev/null || true
        fi
        
        # 复制third_party中的modules相关文件
        if [ -d "third_party" ]; then
          mkdir -p package/third_party
          # 复制skcms模块
          if [ -d "third_party/skcms" ]; then
            cp -r third_party/skcms package/third_party/ 2>/dev/null || true
          fi
          # 复制其他可能需要的third_party模块
          find third_party -name "*.h" -o -name "*.hpp" | while read file; do
            dir=$(dirname "$file")
            mkdir -p "package/$dir"
            cp "$file" "package/$file" 2>/dev/null || true
          done
        fi
        
        # 根据不同平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台文件复制
            find out/Release -name "*.lib" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.dll" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -name "*.exe" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
          "mac")
            # macOS平台文件复制
            find out/Release -name "*.a" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.dylib" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -not -name "*.dylib" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
          "linux"|"android")
            # Linux和Android平台文件复制
            find out/Release -name "*.a" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.so" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
        esac
        
        # 复制示例文件
        if [ -d "resources" ]; then
          cp -r resources/* package/examples/ 2>/dev/null || true
        fi
        
        # 创建构建信息文件
        cat > package/BUILD_INFO.txt << EOF
        Skia 完整构建信息
        ==================
        平台: ${{ matrix.target_os }}
        架构: ${{ matrix.target_cpu }}
        包名: ${{ matrix.platform }}
        构建模式: Release (官方完整构建)
        编译优化: 使用并行编译加速构建过程
        
        支持的功能:
        - GPU渲染 (OpenGL + Vulkan)
        - PDF导出 (内置HarfBuzz)
        - SVG支持
        - Skottie动画
        - 文本整形 (内置HarfBuzz)
        - 字体管理 (内置FreeType)
        - 图像编解码
        - 颜色管理 (skcms模块)
        
        图形后端:
        - OpenGL/OpenGL ES
        - Vulkan
        - Metal (仅macOS)
        - Direct3D (仅Windows)
        EOF
        
        # 根据平台添加特定信息
        case "${{ matrix.target_os }}" in
          "win")
            cat >> package/BUILD_INFO.txt << EOF
        
        Windows特定信息:
        - 运行时: 使用/MD运行时 (多线程DLL)
        - GPU后端: Direct3D + OpenGL + Vulkan
        - 特殊说明: 已禁用DNG SDK以保证C++17兼容性
        EOF
            ;;
          "mac")
            cat >> package/BUILD_INFO.txt << EOF
        
        macOS特定信息:
        - GPU后端: Metal + OpenGL + Vulkan
        - DNG RAW图像: 完整支持
        - 特殊说明: 使用内置库避免系统依赖冲突
        EOF
            ;;
          "linux")
            cat >> package/BUILD_INFO.txt << EOF
        
        Linux特定信息:
        - GPU后端: OpenGL + Vulkan
        - DNG RAW图像: 完整支持
        - X11支持: 完整
        EOF
            ;;
          "android")
            cat >> package/BUILD_INFO.txt << EOF
        
        Android特定信息:
        - Android API级别: ${{ matrix.android_api }}+
        - NDK版本: r25c
        - GPU后端: OpenGL ES + Vulkan
        - Android字体管理器: 完整支持
        - JNI接口: 支持
        - DNG RAW图像: 完整支持
        EOF
            ;;
        esac
        
        cat >> package/BUILD_INFO.txt << EOF
        
        特殊说明:
        - 使用内置FreeType和HarfBuzz库以避免系统依赖冲突
        - 所有依赖都已静态链接
        - 为保证构建稳定性已禁用调试工具构建
        - 头文件路径已配置支持源码include格式和模块引用
        - 包含完整的modules和third_party依赖
        - 使用并行编译加速构建过程
        - 生产环境就绪
        EOF
        
      shell: bash
      
    # 生成通用的CMakeLists.txt文件
    - name: 生成Skia CMakeLists.txt
      run: |
        cd skia/package
        
        # 生成CMakeLists.txt文件，支持所有平台
        cat > CMakeLists.txt << 'EOF'
        # Skia图形库的CMake配置文件（全平台支持）
        cmake_minimum_required(VERSION 3.15)
        
        # 设置项目信息
        project(SkiaPrebuilt
            VERSION 1.0.0
            DESCRIPTION "完整预编译的Skia图形库"
            LANGUAGES CXX C
        )
        
        # 设置C++标准
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 创建skia::skia接口库
        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)
        
        # 设置包含目录
        target_include_directories(skia INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/third_party>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/android>
            $<INSTALL_INTERFACE:.>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:third_party>
            $<INSTALL_INTERFACE:android>
        )
        
        # 查找所有的库文件
        file(GLOB SKIA_LIBRARIES "${SKIA_ROOT_DIR}/lib/*")
        
        # 根据平台设置特定的链接库和编译选项
        if(WIN32)
            # Windows平台配置 - 使用/MD运行时
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                UNICODE
                _UNICODE
            )
            
            # 设置Windows运行时为/MD（多线程DLL）
            target_compile_options(skia INTERFACE
                $<$<CONFIG:Debug>:/MDd>
                $<$<CONFIG:Release>:/MD>
                $<$<CONFIG:RelWithDebInfo>:/MD>
                $<$<CONFIG:MinSizeRel>:/MD>
            )
            
            # 添加Windows系统库
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                # OpenGL相关
                OpenGL32
                # DirectX相关
                d3d11
                dxgi
                d3dcompiler
                dxguid
                # 系统库
                Gdi32
                User32
                Kernel32
                Ole32
                OleAut32
                Uuid
                Advapi32
                Shell32
                # 字体和文本
                Usp10
                # 网络
                Ws2_32
            )
            
        elseif(APPLE)
            # macOS平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 查找macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
            find_library(COCOA_FRAMEWORK Cocoa)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            find_library(OPENGL_FRAMEWORK OpenGL)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore)
            find_library(IOSURFACE_FRAMEWORK IOSurface)
            
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK}
                ${COCOA_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
                ${OPENGL_FRAMEWORK}
                ${QUARTZCORE_FRAMEWORK}
                ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置
            target_compile_definitions(skia INTERFACE
                ANDROID
                SK_GANESH=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                __ANDROID_API__=21
            )
            
            target_compile_options(skia INTERFACE
                -fPIC
                -fno-rtti
                -fno-exceptions
            )
            
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                # OpenGL ES相关
                GLESv2
                EGL
                # Vulkan相关
                vulkan
                # Android系统库
                android
                log
                jnigraphics
                # 媒体相关
                mediandk
                # 系统库
                dl
                m
                z
            )
            
            # Android特定的链接选项
            target_link_options(skia INTERFACE
                -Wl,--gc-sections
                -Wl,--as-needed
            )
            
        else()
            # Linux平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 查找必要的系统库
            find_package(PkgConfig QUIET)
            if(PKG_CONFIG_FOUND)
                pkg_check_modules(FONTCONFIG QUIET fontconfig)
                pkg_check_modules(HARFBUZZ QUIET harfbuzz)
            endif()
            
            # 查找Vulkan
            find_package(Vulkan QUIET)
            
            # 查找X11相关库
            find_package(X11 QUIET)
            
            target_link_libraries(skia INTERFACE
                ${SKIA_LIBRARIES}
                # OpenGL
                GL
                # 系统库
                pthread
                dl
                m
            )
            
            # FontConfig支持
            if(FONTCONFIG_FOUND)
                target_link_libraries(skia INTERFACE ${FONTCONFIG_LIBRARIES})
                target_include_directories(skia INTERFACE ${FONTCONFIG_INCLUDE_DIRS})
            endif()
            
            # HarfBuzz支持
            if(HARFBUZZ_FOUND)
                target_link_libraries(skia INTERFACE ${HARFBUZZ_LIBRARIES})
                target_include_directories(skia INTERFACE ${HARFBUZZ_INCLUDE_DIRS})
            endif()
            
            # 添加Vulkan支持
            if(Vulkan_FOUND)
                target_link_libraries(skia INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skia INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            # 添加X11支持
            if(X11_FOUND)
                target_link_libraries(skia INTERFACE
                    ${X11_LIBRARIES}
                    ${X11_Xrandr_LIB}
                    ${X11_Xinerama_LIB}
                    ${X11_Xcursor_LIB}
                    ${X11_Xi_LIB}
                )
                target_include_directories(skia INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 设置编译选项
        target_compile_features(skia INTERFACE cxx_std_17)
        
        # 优化设置
        target_compile_options(skia INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 设置预处理器定义
        target_compile_definitions(skia INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        EOF
        
      shell: bash
      
    # 打包构建产物为ZIP文件
    - name: 打包Skia构建产物
      run: |
        cd skia/package
        
        # 根据运行平台选择合适的打包方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows系统使用PowerShell的Compress-Archive
          powershell "Compress-Archive -Path * -DestinationPath ../${{ matrix.platform }}.zip"
        else
          # Unix系统使用zip命令打包
          zip -r "../${{ matrix.platform }}.zip" *
        fi
        
        echo "✅ ${{ matrix.platform }}.zip 构建包创建完成"
      shell: bash
      
    # 上传构建产物到GitHub Actions
    - name: 上传Skia构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: skia/${{ matrix.platform }}.zip
        retention-days: 30
        compression-level: 0
        
  # 创建GitHub Release发布（仅在推送到主分支或定时任务时）
  create-release:
    needs: build-skia
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码以访问仓库信息
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有Skia构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia全平台每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia全平台构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release发布版本
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia 全平台构建包
          
          这个发布包包含了Skia图形库在多个平台的完整预编译版本，支持所有核心功能。
          
          ## 包含的平台
          
          ### 桌面平台
          - **x64_windows.zip** - Windows x64架构
            - GPU后端: Direct3D + OpenGL + Vulkan
            - 运行时: /MD (多线程DLL)
          
          - **x64_macos.zip** - macOS Intel x64架构
          - **arm64_macos.zip** - macOS Apple Silicon ARM64架构
            - GPU后端: Metal + OpenGL + Vulkan
            - 完整DNG RAW支持
          
          - **x64_linux.zip** - Linux x64架构
            - GPU后端: OpenGL + Vulkan
            - X11完整支持
          
          ### 移动平台
          - **x64_android.zip** - Android x64架构
          - **arm64_android.zip** - Android ARM64架构
            - GPU后端: OpenGL ES + Vulkan
            - Android API级别: 21+
            - NDK版本: r25c
          
          ## CMake使用方法
          
          ```cmake
          # 设置C++17标准
          set(CMAKE_CXX_STANDARD 17)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          add_subdirectory(path/to/skia)
          target_link_libraries(your_target skia::skia)
          ```
          
          ## 主要特性
          
          - 完整的Skia核心功能
          - GPU加速渲染（OpenGL/Vulkan/Metal/Direct3D）
          - PDF/SVG/动画支持
          - 内置字体和文本处理
          - 图像编解码支持
          - 颜色管理 (skcms模块)
          - Android平台完整支持
          - 生产环境就绪
          - 使用并行编译加速构建
          - 完整的模块和依赖包含
        files: |
          artifacts/*/**.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: 构建完成通知
      run: |
        echo "🎉 Skia全平台构建完成！"
        echo "📦 已生成以下平台的构建包："
        echo "   • Windows: x64（使用/MD运行时）"
        echo "   • macOS: x64, ARM64"
        echo "   • Linux: x64"
        echo "   • Android: x64, ARM64"
        echo "🔗 可在Actions页面下载，或在Releases中获取"
        echo "📋 每个包都包含完整的CMakeLists.txt配置"
        echo "🎮 支持GPU加速渲染（OpenGL/Vulkan/Metal/Direct3D）"
        echo "✨ 包含PDF、SVG、Skottie等核心功能"
        echo "🔤 使用内置字体和文本引擎，无系统依赖"
        echo "📄 PDF导出支持字体子集功能"
        echo "🚀 生产环境就绪，稳定性优先"
        echo "📁 完美支持源码include格式和模块依赖"
        echo "🎨 包含skcms颜色管理模块"
        echo "⚡ 使用并行编译加速构建过程"
