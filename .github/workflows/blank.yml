name: 构建Skia和Dawn库

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 清理磁盘空间
      run: |
        # 删除不必要的预安装软件
        Get-ChildItem -Path "C:\hostedtoolcache" -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
        Get-ChildItem -Path "C:\ProgramData\chocolatey" -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
        # 清理临时文件
        Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell

    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 设置Visual Studio环境
      uses: microsoft/setup-msbuild@v2

    - name: 安装LLVM 18
      run: |
        # 下载并安装LLVM 18的精简版本
        $url = "https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/LLVM-18.1.8-win64.exe"
        $output = "$env:TEMP\llvm-installer.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/S" -Wait
        echo "C:\Program Files\LLVM\bin" >> $env:GITHUB_PATH
      shell: powershell

    - name: 安装Depot Tools
      run: |
        git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools
        echo "$env:GITHUB_WORKSPACE\depot_tools" >> $env:GITHUB_PATH
      shell: powershell

    - name: 配置Git用户
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global advice.detachedHead false
      shell: cmd

    - name: 下载Skia源码（精简版）
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE\depot_tools;$env:PATH"
        $env:DEPOT_TOOLS_WIN_TOOLCHAIN = "0"
        mkdir skia-build
        cd skia-build
        # 使用精简配置下载Skia，排除emscripten相关依赖
        gclient config --name skia --unmanaged https://skia.googlesource.com/skia.git
        # 禁用不必要的依赖
        echo "solutions = [" > .gclient
        echo "  {" >> .gclient
        echo "    'name': 'skia'," >> .gclient
        echo "    'url': 'https://skia.googlesource.com/skia.git'," >> .gclient
        echo "    'managed': False," >> .gclient
        echo "    'custom_deps': {" >> .gclient
        echo "      'skia/third_party/externals/emsdk': None," >> .gclient
        echo "    }," >> .gclient
        echo "  }," >> .gclient
        echo "]" >> .gclient
        gclient sync --no-history --shallow
      shell: powershell

    - name: 下载Dawn源码（精简版）
      run: |
        # 克隆Dawn主仓库，不包含子模块
        git clone --depth 1 --no-recurse-submodules https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        
        # 只初始化必要的子模块
        git submodule update --init --depth 1 third_party/webgpu-headers
        git submodule update --init --depth 1 third_party/khronos
        git submodule update --init --depth 1 third_party/vulkan-headers
        git submodule update --init --depth 1 third_party/vulkan_memory_allocator
        
        # 跳过有问题的ANGLE子模块
        git config submodule.third_party/angle.update none
        
        # 手动下载必要的依赖
        python tools/fetch_dawn_dependencies.py --skip-submodules
      shell: cmd

    - name: 配置Skia构建参数（启用Graphite）
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE\depot_tools;$env:PATH"
        cd skia-build\skia
        python tools\git-sync-deps
        
        # 创建优化的构建配置，启用Graphite以支持Dawn
        $buildArgs = @(
          "is_official_build=true",
          "is_debug=false",
          "extra_cflags=[\`"/O2\`", \`"/Zi\`"]",
          "target_cpu=\`"x64\`"",
          "skia_enable_graphite=true",
          "skia_use_dawn=true",
          "skia_use_gl=true", 
          "skia_use_direct3d=true",
          "skia_use_vulkan=true",
          "skia_enable_tools=false",
          "skia_enable_skottie=false",
          "skia_enable_svg=false",
          "skia_enable_pdf=false",
          "skia_enable_flutter_defines=false",
          "skia_use_wasm=false",
          "cc=\`"clang\`"",
          "cxx=\`"clang++\`"",
          "win_vc=\`"2022\`""
        )
        
        gn gen out\x64-windows --args="$($buildArgs -join ' ')"
      shell: powershell

    - name: 配置Dawn构建参数
      run: |
        cd dawn-source
        mkdir build-win-x64
        cd build-win-x64
        
        cmake .. -G "Visual Studio 17 2022" -A x64 ^
          -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
          -DDAWN_BUILD_SAMPLES=OFF ^
          -DDAWN_BUILD_BENCHMARKS=OFF ^
          -DTINT_BUILD_TESTS=OFF ^
          -DTINT_BUILD_BENCHMARKS=OFF ^
          -DDAWN_BUILD_NODE_BINDINGS=OFF ^
          -DDAWN_ENABLE_D3D11=ON ^
          -DDAWN_ENABLE_D3D12=ON ^
          -DDAWN_ENABLE_VULKAN=ON ^
          -DDAWN_ENABLE_OPENGL=ON ^
          -DDAWN_ENABLE_OPENGLES=OFF ^
          -DDAWN_ENABLE_NULL=OFF ^
          -DCMAKE_CXX_STANDARD=20 ^
          -DDAWN_FETCH_DEPENDENCIES=OFF
      shell: cmd

    - name: 编译Dawn库
      run: |
        cd dawn-source\build-win-x64
        cmake --build . --config %BUILD_TYPE% --parallel 2 --target dawn_native dawn_platform dawn_proc webgpu_dawn
      shell: cmd

    - name: 编译Skia库
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE\depot_tools;$env:PATH"
        cd skia-build\skia
        ninja -C out\x64-windows -j 2 libskia.lib
      shell: powershell

    - name: 收集Dawn生成的文件
      run: |
        mkdir dawn-generated\include\dawn
        mkdir dawn-generated\include\webgpu
        mkdir dawn-generated\src\dawn
        
        # 复制生成的头文件和源文件
        if exist dawn-source\build-win-x64\gen\include\dawn xcopy /E /I /Y dawn-source\build-win-x64\gen\include\dawn dawn-generated\include\dawn\
        if exist dawn-source\build-win-x64\gen\include\webgpu xcopy /E /I /Y dawn-source\build-win-x64\gen\include\webgpu dawn-generated\include\webgpu\
        if exist dawn-source\build-win-x64\gen\src\dawn xcopy /E /I /Y dawn-source\build-win-x64\gen\src\dawn dawn-generated\src\dawn\
      shell: cmd

    - name: 准备Windows输出目录
      run: |
        mkdir Skia\include\core
        mkdir Skia\include\dawn  
        mkdir Skia\include\modules
        mkdir Skia\bin\Win\x64
        mkdir Skia\lib\Win\x64
        
        # 复制Skia头文件
        xcopy /E /I /Y skia-build\skia\include Skia\include\core\
        if exist skia-build\skia\modules xcopy /E /I /Y skia-build\skia\modules Skia\include\modules\
        
        # 复制Dawn头文件
        xcopy /E /I /Y dawn-source\include Skia\include\dawn\
        if exist dawn-generated\include\dawn xcopy /E /I /Y dawn-generated\include\dawn Skia\include\dawn\
        if exist dawn-generated\include\webgpu xcopy /E /I /Y dawn-generated\include\webgpu Skia\include\dawn\
        
        # 复制库文件
        copy skia-build\skia\out\x64-windows\*.lib Skia\lib\Win\x64\ 2>nul || echo "部分Skia库文件未找到"
        copy dawn-source\build-win-x64\%BUILD_TYPE%\*.lib Skia\lib\Win\x64\ 2>nul || echo "部分Dawn库文件未找到"
        
        # 复制可执行文件和DLL
        copy skia-build\skia\out\x64-windows\*.exe Skia\bin\Win\x64\ 2>nul || echo "无可执行文件"
        copy dawn-source\build-win-x64\%BUILD_TYPE%\*.dll Skia\bin\Win\x64\ 2>nul || echo "无DLL文件"
      shell: cmd

    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-windows-x64
        path: Skia/

  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 清理磁盘空间
      run: |
        # 删除不必要的包和缓存
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        # 显示可用空间
        df -h

    - name: 安装基础依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential git python3 python3-pip curl \
          libgl1-mesa-dev libglu1-mesa-dev \
          libvulkan-dev vulkan-tools \
          libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev \
          ninja-build cmake

    - name: 安装Clang 18
      run: |
        # 安装LLVM官方仓库
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends clang-18 lld-18
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100

    - name: 安装Depot Tools
      run: |
        git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH

    - name: 配置Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global advice.detachedHead false

    - name: 下载Skia源码（精简版）
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        mkdir skia-build
        cd skia-build
        
        # 创建精简的gclient配置，禁用emscripten
        cat > .gclient << 'EOF'
        solutions = [
          {
            "name": "skia",
            "url": "https://skia.googlesource.com/skia.git",
            "managed": False,
            "custom_deps": {
              "skia/third_party/externals/emsdk": None,
            },
          },
        ]
        EOF
        
        gclient sync --no-history --shallow

    - name: 下载Dawn源码（精简版）
      run: |
        # 克隆Dawn主仓库
        git clone --depth 1 --no-recurse-submodules https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        
        # 只初始化必要的子模块
        git submodule update --init --depth 1 third_party/webgpu-headers || true
        git submodule update --init --depth 1 third_party/khronos || true
        git submodule update --init --depth 1 third_party/vulkan-headers || true
        git submodule update --init --depth 1 third_party/vulkan_memory_allocator || true
        
        # 跳过有问题的子模块
        git config submodule.third_party/angle.update none

    - name: 配置Skia构建参数（启用Graphite）
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        python3 tools/git-sync-deps
        
        gn gen out/x64-linux --args='
          is_official_build=true
          is_debug=false
          extra_cflags=["-O2", "-g"]
          target_cpu="x64"
          skia_enable_graphite=true
          skia_use_dawn=true
          skia_use_gl=true
          skia_use_vulkan=true
          skia_enable_tools=false
          skia_enable_skottie=false
          skia_enable_svg=false
          skia_enable_pdf=false
          skia_enable_flutter_defines=false
          skia_use_wasm=false
          cc="clang-18"
          cxx="clang++-18"
        '

    - name: 配置Dawn构建参数
      run: |
        cd dawn-source
        mkdir build-linux-x64
        cd build-linux-x64
        
        cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DDAWN_BUILD_BENCHMARKS=OFF \
          -DTINT_BUILD_TESTS=OFF \
          -DTINT_BUILD_BENCHMARKS=OFF \
          -DDAWN_BUILD_NODE_BINDINGS=OFF \
          -DDAWN_ENABLE_VULKAN=ON \
          -DDAWN_ENABLE_OPENGL=ON \
          -DDAWN_ENABLE_OPENGLES=OFF \
          -DDAWN_ENABLE_NULL=OFF \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_C_COMPILER=clang-18 \
          -DCMAKE_CXX_COMPILER=clang++-18 \
          -DDAWN_FETCH_DEPENDENCIES=OFF

    - name: 编译Dawn库
      run: |
        cd dawn-source/build-linux-x64
        ninja dawn_native dawn_platform dawn_proc webgpu_dawn

    - name: 编译Skia库
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        ninja -C out/x64-linux -j 2 libskia.a

    - name: 收集Dawn生成的文件
      run: |
        mkdir -p dawn-generated/include/dawn
        mkdir -p dawn-generated/include/webgpu
        mkdir -p dawn-generated/src/dawn
        
        # 复制生成的文件
        if [ -d "dawn-source/build-linux-x64/gen/include/dawn" ]; then
          cp -r dawn-source/build-linux-x64/gen/include/dawn/* dawn-generated/include/dawn/
        fi
        if [ -d "dawn-source/build-linux-x64/gen/include/webgpu" ]; then
          cp -r dawn-source/build-linux-x64/gen/include/webgpu/* dawn-generated/include/webgpu/
        fi
        if [ -d "dawn-source/build-linux-x64/gen/src/dawn" ]; then
          cp -r dawn-source/build-linux-x64/gen/src/dawn/* dawn-generated/src/dawn/
        fi

    - name: 准备Linux输出目录
      run: |
        mkdir -p Skia/include/{core,dawn,modules}
        mkdir -p Skia/bin/Linux/x64
        mkdir -p Skia/lib/Linux/x64
        
        # 复制Skia头文件
        cp -r skia-build/skia/include/* Skia/include/core/
        if [ -d "skia-build/skia/modules" ]; then
          cp -r skia-build/skia/modules/* Skia/include/modules/
        fi
        
        # 复制Dawn头文件
        cp -r dawn-source/include/* Skia/include/dawn/
        if [ -d "dawn-generated/include/dawn" ]; then
          cp -r dawn-generated/include/dawn/* Skia/include/dawn/
        fi
        if [ -d "dawn-generated/include/webgpu" ]; then
          cp -r dawn-generated/include/webgpu/* Skia/include/dawn/
        fi
        
        # 复制库文件
        find skia-build/skia/out/x64-linux -name "*.a" -exec cp {} Skia/lib/Linux/x64/ \; 2>/dev/null || true
        find dawn-source/build-linux-x64 -name "*.a" -exec cp {} Skia/lib/Linux/x64/ \; 2>/dev/null || true
        
        # 复制可执行文件
        find skia-build/skia/out/x64-linux -type f -executable -exec cp {} Skia/bin/Linux/x64/ \; 2>/dev/null || true
        find dawn-source/build-linux-x64 -name "*.so" -exec cp {} Skia/bin/Linux/x64/ \; 2>/dev/null || true

    - name: 上传Linux构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-linux-x64
        path: Skia/

  build-android:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [arm64, x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 清理磁盘空间
      run: |
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        df -h

    - name: 安装基础依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential git python3 python3-pip curl unzip \
          ninja-build cmake

    - name: 设置Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d

    - name: 安装Depot Tools
      run: |
        git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH

    - name: 配置Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: 下载Skia源码（精简版）
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        mkdir skia-build
        cd skia-build
        
        cat > .gclient << 'EOF'
        solutions = [
          {
            "name": "skia", 
            "url": "https://skia.googlesource.com/skia.git",
            "managed": False,
            "custom_deps": {
              "skia/third_party/externals/emsdk": None,
            },
          },
        ]
        EOF
        
        gclient sync --no-history --shallow

    - name: 下载Dawn源码（精简版）
      run: |
        git clone --depth 1 --no-recurse-submodules https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        
        # 只初始化Android需要的子模块
        git submodule update --init --depth 1 third_party/webgpu-headers || true
        git submodule update --init --depth 1 third_party/khronos || true
        git submodule update --init --depth 1 third_party/vulkan-headers || true
        git submodule update --init --depth 1 third_party/vulkan_memory_allocator || true

    - name: 配置Skia构建参数（启用Graphite）
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        python3 tools/git-sync-deps
        
        # 设置Android架构参数
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ANDROID_ARCH="arm64"
        else
          ANDROID_ARCH="x64"
        fi
        
        gn gen out/${{ matrix.arch }}-android --args="
          is_official_build=true
          is_debug=false
          target_os=\"android\"
          target_cpu=\"${ANDROID_ARCH}\"
          skia_enable_graphite=true
          skia_use_dawn=true
          skia_use_vulkan=true
          skia_use_gl=true
          skia_enable_tools=false
          skia_enable_skottie=false
          skia_enable_svg=false
          skia_enable_pdf=false
          skia_use_wasm=false
          ndk=\"${ANDROID_NDK_HOME}\"
          android_ndk_api_level=24
        "

    - name: 配置Dawn构建参数
      run: |
        cd dawn-source
        mkdir build-android-${{ matrix.arch }}
        cd build-android-${{ matrix.arch }}
        
        # 设置Android ABI
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ANDROID_ABI="arm64-v8a"
        else
          ANDROID_ABI="x86_64"
        fi
        
        cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_SYSTEM_NAME=Android \
          -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
          -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME} \
          -DCMAKE_ANDROID_STL_TYPE=c++_static \
          -DCMAKE_ANDROID_API=24 \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DDAWN_BUILD_BENCHMARKS=OFF \
          -DTINT_BUILD_TESTS=OFF \
          -DTINT_BUILD_BENCHMARKS=OFF \
          -DDAWN_BUILD_NODE_BINDINGS=OFF \
          -DDAWN_ENABLE_VULKAN=ON \
          -DDAWN_ENABLE_OPENGLES=ON \
          -DDAWN_ENABLE_OPENGL=OFF \
          -DDAWN_ENABLE_NULL=OFF \
          -DCMAKE_CXX_STANDARD=20 \
          -DDAWN_FETCH_DEPENDENCIES=OFF

    - name: 编译Dawn库
      run: |
        cd dawn-source/build-android-${{ matrix.arch }}
        ninja dawn_native dawn_platform dawn_proc webgpu_dawn

    - name: 编译Skia库  
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        ninja -C out/${{ matrix.arch }}-android -j 2 libskia.a

    - name: 收集Dawn生成的文件
      run: |
        mkdir -p dawn-generated/include/dawn
        mkdir -p dawn-generated/include/webgpu
        mkdir -p dawn-generated/src/dawn
        
        if [ -d "dawn-source/build-android-${{ matrix.arch }}/gen/include/dawn" ]; then
          cp -r dawn-source/build-android-${{ matrix.arch }}/gen/include/dawn/* dawn-generated/include/dawn/
        fi
        if [ -d "dawn-source/build-android-${{ matrix.arch }}/gen/include/webgpu" ]; then
          cp -r dawn-source/build-android-${{ matrix.arch }}/gen/include/webgpu/* dawn-generated/include/webgpu/
        fi
        if [ -d "dawn-source/build-android-${{ matrix.arch }}/gen/src/dawn" ]; then
          cp -r dawn-source/build-android-${{ matrix.arch }}/gen/src/dawn/* dawn-generated/src/dawn/
        fi

    - name: 准备Android输出目录
      run: |
        mkdir -p Skia/include/{core,dawn,modules}
        mkdir -p Skia/bin/Android/${{ matrix.arch }}
        mkdir -p Skia/lib/Android/${{ matrix.arch }}
        
        # 复制Skia头文件
        cp -r skia-build/skia/include/* Skia/include/core/
        if [ -d "skia-build/skia/modules" ]; then
          cp -r skia-build/skia/modules/* Skia/include/modules/
        fi
        
        # 复制Dawn头文件
        cp -r dawn-source/include/* Skia/include/dawn/
        if [ -d "dawn-generated/include/dawn" ]; then
          cp -r dawn-generated/include/dawn/* Skia/include/dawn/
        fi
        if [ -d "dawn-generated/include/webgpu" ]; then
          cp -r dawn-generated/include/webgpu/* Skia/include/dawn/
        fi
        
        # 复制库文件
        find skia-build/skia/out/${{ matrix.arch }}-android -name "*.a" -exec cp {} Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn-source/build-android-${{ matrix.arch }} -name "*.a" -exec cp {} Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn-source/build-android-${{ matrix.arch }} -name "*.so" -exec cp {} Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true

    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-android-${{ matrix.arch }}
        path: Skia/

  package-final:
    runs-on: ubuntu-24.04
    needs: [build-windows, build-linux, build-android]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: 合并所有构建产物
      run: |
        mkdir -p Skia-Final
        
        # 合并所有平台的构建产物
        for artifact in artifacts/skia-dawn-*; do
          if [ -d "$artifact" ]; then
            echo "正在合并 $artifact"
            cp -r "$artifact"/* Skia-Final/ 2>/dev/null || true
          fi
        done
        
        # 确保目录结构正确
        mkdir -p Skia-Final/include/{core,dawn,modules}
        mkdir -p Skia-Final/bin/{Win/x64,Linux/x64,Android/{arm64,x64}}
        mkdir -p Skia-Final/lib/{Win/x64,Linux/x64,Android/{arm64,x64}}

    - name: 创建CMakeLists.txt主配置文件
      run: |
        cat > Skia-Final/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.20)
        project(SkiaDawn LANGUAGES CXX C)

        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # 检测当前平台和架构
        if(WIN32)
            set(PLATFORM_DIR "Win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        elseif(ANDROID)
            set(PLATFORM_DIR "Android")
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(ARCH_DIR "arm64")
            elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
                set(ARCH_DIR "x64")
            endif()
        elseif(UNIX)
            set(PLATFORM_DIR "Linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        endif()

        # 设置库和二进制文件路径
        set(LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
        set(BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

        # Dawn动态库目标 - 包含生成的文件
        add_library(DawnDynamic INTERFACE)
        target_include_directories(DawnDynamic INTERFACE
            ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
            ${CMAKE_CURRENT_SOURCE_DIR}/include/core
        )

        # 查找Dawn相关的库文件
        file(GLOB DAWN_LIBS 
            "${LIB_DIR}/*dawn*.a" 
            "${LIB_DIR}/*dawn*.lib"
            "${LIB_DIR}/*webgpu*.a" 
            "${LIB_DIR}/*webgpu*.lib"
            "${LIB_DIR}/*tint*.a"
            "${LIB_DIR}/*tint*.lib"
        )
        
        if(DAWN_LIBS)
            target_link_libraries(DawnDynamic INTERFACE ${DAWN_LIBS})
            message(STATUS "找到Dawn库文件: ${DAWN_LIBS}")
        else()
            message(WARNING "未找到Dawn库文件在路径: ${LIB_DIR}")
        endif()

        # Skia主目标
        add_library(Skia INTERFACE)
        target_include_directories(Skia INTERFACE
            ${CMAKE_CURRENT_SOURCE_DIR}/include/core
            ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
            ${CMAKE_CURRENT_SOURCE_DIR}/include/modules
        )

        # 查找Skia库文件
        file(GLOB SKIA_LIBS 
            "${LIB_DIR}/*skia*.a" 
            "${LIB_DIR}/*skia*.lib"
            "${LIB_DIR}/libskia.*"
        )
        
        if(SKIA_LIBS)
            target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
            message(STATUS "找到Skia库文件: ${SKIA_LIBS}")
        else()
            message(WARNING "未找到Skia库文件在路径: ${LIB_DIR}")
        endif()

        # 链接Dawn到Skia
        target_link_libraries(Skia INTERFACE DawnDynamic)

        # 平台特定的系统库链接
        if(WIN32)
            target_link_libraries(Skia INTERFACE
                d3d11 d3d12 dxgi dxguid
                opengl32 gdi32 user32 kernel32
                vulkan-1
            )
        elseif(ANDROID)
            target_link_libraries(Skia INTERFACE
                GLESv2 EGL vulkan
                android log
            )
        elseif(UNIX)
            target_link_libraries(Skia INTERFACE
                GL vulkan
                X11 Xrandr Xinerama Xcursor Xi
                pthread dl
            )
        endif()

        # 设置编译定义 - 包含Graphite支持
        target_compile_definitions(Skia INTERFACE
            SK_GANESH=1
            SK_GRAPHITE=1
            SK_GL=1
            SK_VULKAN=1
        )

        if(WIN32)
            target_compile_definitions(Skia INTERFACE
                SK_DIRECT3D=1
                DAWN_ENABLE_D3D11=1
                DAWN_ENABLE_D3D12=1
            )
        endif()

        if(ANDROID)
            target_compile_definitions(Skia INTERFACE
                SK_BUILD_FOR_ANDROID=1
                DAWN_ENABLE_OPENGLES=1
            )
        endif()

        # 导出目标供外部使用
        export(TARGETS Skia DawnDynamic FILE SkiaTargets.cmake)

        # 显示配置信息
        message(STATUS "Skia+Dawn库配置完成")
        message(STATUS "平台: ${PLATFORM_DIR}")
        message(STATUS "架构: ${ARCH_DIR}")
        message(STATUS "库目录: ${LIB_DIR}")
        message(STATUS "二进制目录: ${BIN_DIR}")
        message(STATUS "启用Graphite和Dawn WebGPU支持")
        EOF

    - name: 创建CMake配置文件
      run: |
        # 创建包配置文件
        cat > Skia-Final/SkiaConfig.cmake << 'EOF'
        # Skia+Dawn预编译库配置文件
        include(CMakeFindDependencyMacro)

        # 检查是否已经找到
        if(TARGET Skia)
            return()
        endif()

        # 获取当前文件所在目录
        get_filename_component(SKIA_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

        # 包含目标定义
        if(EXISTS "${SKIA_CMAKE_DIR}/SkiaTargets.cmake")
            include("${SKIA_CMAKE_DIR}/SkiaTargets.cmake")
        else()
            # 如果目标文件不存在，直接包含主CMakeLists.txt
            include("${SKIA_CMAKE_DIR}/CMakeLists.txt")
        endif()

        # 设置变量
        set(Skia_FOUND TRUE)
        set(Skia_VERSION "1.0.0")
        set(Skia_INCLUDE_DIRS 
            "${SKIA_CMAKE_DIR}/include/core"
            "${SKIA_CMAKE_DIR}/include/dawn" 
            "${SKIA_CMAKE_DIR}/include/modules"
        )

        # 提供组件信息
        set(Skia_Dawn_FOUND TRUE)
        set(Skia_Core_FOUND TRUE)
        set(Skia_Modules_FOUND TRUE)
        set(Skia_Graphite_FOUND TRUE)

        message(STATUS "Skia+Dawn库配置已加载 (包含Graphite和WebGPU支持)")
        EOF

        # 创建版本文件
        cat > Skia-Final/SkiaConfigVersion.cmake << 'EOF'
        set(PACKAGE_VERSION "1.0.0")

        # 检查版本兼容性
        if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
        else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if(PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
                set(PACKAGE_VERSION_EXACT TRUE)
            endif()
        endif()
        EOF

    - name: 创建使用示例
      run: |
        # 创建Graphite+Dawn使用示例
        cat > Skia-Final/example.cpp << 'EOF'
        // Skia+Dawn+Graphite集成使用示例
        #include "include/core/SkCanvas.h"
        #include "include/core/SkSurface.h"
        #include "include/core/SkImage.h"

        // Ganesh GPU后端
        #include "include/gpu/GrDirectContext.h"
        #include "include/gpu/GrBackendSurface.h"

        // Graphite GPU后端 (新的GPU架构)
        #ifdef SK_GRAPHITE
        #include "include/gpu/graphite/Context.h"
        #include "include/gpu/graphite/Surface.h"
        #include "include/gpu/graphite/Recording.h"
        #include "include/gpu/graphite/Recorder.h"
        #endif

        // Dawn WebGPU支持
        #ifdef SK_DAWN
        #include "include/gpu/dawn/GrDawnTypes.h"
        #include "include/dawn/webgpu_cpp.h"
        #ifdef SK_GRAPHITE
        #include "include/gpu/graphite/dawn/DawnTypes.h"
        #endif
        #endif

        #include <iostream>

        int main() {
            std::cout << "Skia+Dawn+Graphite集成库示例程序" << std::endl;
            
            // 测试CPU表面基本功能
            sk_sp<SkSurface> cpuSurface = SkSurface::MakeRasterN32Premul(800, 600);
            if (!cpuSurface) {
                std::cerr << "无法创建CPU表面" << std::endl;
                return -1;
            }
            
            SkCanvas* canvas = cpuSurface->getCanvas();
            canvas->clear(SK_ColorWHITE);
            
            // 绘制简单图形测试
            SkPaint paint;
            paint.setColor(SK_ColorBLUE);
            canvas->drawCircle(400, 300, 100, paint);
            
            std::cout << "Skia CPU渲染测试成功" << std::endl;
            
        #ifdef SK_GRAPHITE
            std::cout << "Graphite GPU后端支持已启用" << std::endl;
            // 注意：实际的Graphite上下文创建需要具体的GPU后端初始化
            // 这里只是展示API结构
        #endif
            
        #ifdef SK_DAWN
            std::cout << "Dawn WebGPU支持已启用" << std::endl;
            // 这里可以添加Dawn WebGPU的初始化和使用代码
            // 注意：需要先初始化WebGPU设备和上下文
        #endif
            
            return 0;
        }
        EOF

        # 创建CMake使用示例
        cat > Skia-Final/ExampleCMakeLists.txt << 'EOF'
        # Skia+Dawn+Graphite库使用示例CMakeLists.txt
        cmake_minimum_required(VERSION 3.20)
        project(MySkiaApp LANGUAGES CXX)

        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # 查找Skia包（调整路径到您的Skia目录）
        find_package(Skia REQUIRED PATHS "${CMAKE_CURRENT_SOURCE_DIR}/path/to/Skia")

        # 创建您的应用程序
        add_executable(MyApp example.cpp)

        # 链接Skia库
        target_link_libraries(MyApp PRIVATE Skia)

        # 可选：设置输出目录
        set_target_properties(MyApp PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
        )

        # 显示链接的库信息
        get_target_property(SKIA_LIBS Skia INTERFACE_LINK_LIBRARIES)
        message(STATUS "链接的Skia库: ${SKIA_LIBS}")

        # 显示编译定义
        get_target_property(SKIA_DEFS Skia INTERFACE_COMPILE_DEFINITIONS)
        message(STATUS "Skia编译定义: ${SKIA_DEFS}")
        EOF

    - name: 创建文档文件
      run: |
        cat > Skia-Final/README.md << 'EOF'
        # Skia + Dawn + Graphite 预编译库

        这是一个包含Skia图形库、Dawn WebGPU和Graphite GPU后端的预编译库包，支持多平台和多图形后端。

        ## 构建信息
        - **构建类型**: RelWithDebInfo
        - **C++ 标准**: C++20
        - **编译器**: Clang 18, GCC 13, MSVC 2022
        - **特殊功能**: 启用Graphite和Dawn WebGPU支持

        ## 支持的平台和后端

        ### Windows (x64)
        - DirectX 11/12
        - Vulkan
        - OpenGL
        - Dawn WebGPU
        - 编译器: MSVC 2022 + Clang 18

        ### Linux (x64, Ubuntu 24.04)
        - Vulkan
        - OpenGL
        - Dawn WebGPU
        - 编译器: Clang 18

        ### Android (arm64, x64)
        - Vulkan
        - OpenGL ES (EGL)
        - Dawn WebGPU
        - API Level: 24+
        - STL: c++_static

        ## GPU后端架构

        ### Ganesh (传统GPU后端)
        - 成熟稳定的GPU渲染后端
        - 支持OpenGL、Vulkan、DirectX等
        - 兼容现有的Skia应用程序

        ### Graphite (新GPU后端)
        - 现代化的GPU渲染架构
        - 更好的多线程支持
        - 优化的命令缓冲区管理
        - 支持Dawn WebGPU集成

        ## 目录结构
        ```
        Skia/
        ├── include/                    # 头文件目录
        │   ├── core/                  # Skia核心头文件
        │   ├── dawn/                  # Dawn WebGPU头文件（包含生成的文件）
        │   └── modules/               # Skia模块头文件
        ├── bin/                       # 可执行文件和动态库
        │   ├── Win/x64/
        │   ├── Linux/x64/
        │   └── Android/{arm64,x64}/
        ├── lib/                       # 静态库文件
        │   ├── Win/x64/
        │   ├── Linux/x64/
        │   └── Android/{arm64,x64}/
        ├── CMakeLists.txt            # 主CMake配置文件
        ├── SkiaConfig.cmake          # CMake包配置文件
        └── SkiaConfigVersion.cmake   # CMake版本配置文件
        ```

        ## 快速开始

        ### 1. 基本使用方法
        将Skia目录复制到您的项目中，然后在CMakeLists.txt中添加:

        ```cmake
        # 查找Skia包
        find_package(Skia REQUIRED PATHS "${CMAKE_CURRENT_SOURCE_DIR}/path/to/Skia")

        # 创建您的应用程序
        add_executable(MyApp main.cpp)

        # 链接Skia库
        target_link_libraries(MyApp PRIVATE Skia)
        ```

        ### 2. 使用不同的GPU后端

        #### Ganesh后端 (传统)
        ```cpp
        #include "include/gpu/GrDirectContext.h"
        #include "include/gpu/GrBackendSurface.h"

        // 创建OpenGL上下文
        sk_sp<GrDirectContext> context = GrDirectContext::MakeGL();
        ```

        #### Graphite后端 (现代)
        ```cpp
        #ifdef SK_GRAPHITE
        #include "include/gpu/graphite/Context.h"
        #include "include/gpu/graphite/Recorder.h"

        // 创建Graphite上下文
        std::unique_ptr<skgpu::graphite::Context> context = 
            skgpu::graphite::Context::MakeDawn(dawnDevice);
        #endif
        ```

        #### Dawn WebGPU集成
        ```cpp
        #ifdef SK_DAWN
        #include "include/dawn/webgpu_cpp.h"
        #include "include/gpu/graphite/dawn/DawnTypes.h"

        // 初始化WebGPU设备
        wgpu::Device device = CreateWebGPUDevice();
        
        // 创建Graphite上下文
        auto context = skgpu::graphite::Context::MakeDawn(
            skgpu::graphite::DawnBackendContext{device}
        );
        #endif
        ```

        ## 编译定义
        库会自动设置以下编译定义:
        - `SK_GANESH=1` - 启用Ganesh GPU后端
        - `SK_GRAPHITE=1` - 启用Graphite GPU后端
        - `SK_GL=1` - 启用OpenGL支持
        - `SK_VULKAN=1` - 启用Vulkan支持
        - `SK_DIRECT3D=1` - 启用DirectX支持 (Windows)
        - `SK_BUILD_FOR_ANDROID=1` - Android构建标识 (Android)
        - `DAWN_ENABLE_*` - Dawn后端支持标识

        ## 特殊功能

        ### Graphite + Dawn WebGPU
        - 完整的WebGPU API支持
        - 跨平台GPU抽象层
        - 现代化的图形管线
        - 优化的资源管理

        ### 动态生成文件
        - 包含Dawn运行时生成的头文件
        - 自动处理WebGPU绑定
        - 完整的Tint着色器编译器支持

        ## 故障排除

        ### 常见问题
        1. **Graphite相关错误**: 确保使用支持的GPU后端
        2. **Dawn初始化失败**: 检查WebGPU驱动程序支持
        3. **链接错误**: 确保所有Dawn库都被正确链接

        ### 依赖的系统库
        - **Windows**: d3d11.lib, d3d12.lib, dxgi.lib, opengl32.lib, vulkan-1.lib
        - **Linux**: libGL, libvulkan, libX11等X11库
        - **Android**: libGLESv2, libEGL, libvulkan, libandroid

        ## 版本兼容性
        - 支持最新的WebGPU规范
        - 兼容Skia主分支API
        - 支持Graphite实验性功能

        ## 技术支持
        如遇到问题，请检查:
        1. CMake版本 >= 3.20
        2. C++编译器支持C++20标准
        3. 目标平台的WebGPU驱动程序已正确安装
        4. Graphite功能在目标设备上受支持
        EOF

        # 创建构建信息文件
        cat > Skia-Final/BuildInfo.txt << 'EOF'
        Skia + Dawn + Graphite 预编译库构建信息
        ===============================================

        构建配置:
        - 构建类型: RelWithDebInfo
        - C++ 标准: C++20
        - 优化级别: O2 + 调试信息

        支持的编译器:
        - Windows: MSVC 2022 + Clang 18
        - Linux: Clang 18
        - Android: Clang (NDK r26d)

        启用的Skia功能:
        - Ganesh GPU后端 (传统)
        - Graphite GPU后端 (现代) ✨
        - Dawn WebGPU支持 ✨
        - Vulkan支持
        - OpenGL/OpenGL ES支持
        - DirectX 11/12支持 (Windows)

        禁用的功能（减少体积）:
        - Skottie动画支持
        - SVG支持
        - PDF支持
        - 工具和示例程序
        - 单元测试和基准测试
        - WebAssembly支持

        Dawn配置:
        - 启用的后端: D3D11, D3D12, Vulkan, OpenGL, OpenGL ES
        - 禁用的功能: 示例程序、测试、Node.js绑定
        - 包含动态生成的头文件和源码
        - 集成Tint着色器编译器

        特殊注意事项:
        - Graphite是Skia的实验性新GPU后端
        - Dawn提供跨平台WebGPU抽象
        - 所有后端已合并到单一库文件中
        - 支持现代GPU编程模式
        EOF

    - name: 验证构建产物结构
      run: |
        echo "=== 验证最终构建产物结构 ==="
        find Skia-Final -type f -name "*.lib" -o -name "*.a" -o -name "*.so" | head -20
        echo ""
        echo "=== 头文件目录结构 ==="
        find Skia-Final/include -type d | head -10
        echo ""
        echo "=== CMake文件 ==="
        ls -la Skia-Final/*.cmake Skia-Final/CMakeLists.txt 2>/dev/null || echo "CMake文件未找到"
        echo ""
        echo "=== 文档文件 ==="
        ls -la Skia-Final/*.md Skia-Final/*.txt 2>/dev/null || echo "文档文件未找到"

    - name: 创建最终压缩包
      run: |
        cd Skia-Final
        zip -r ../Skia.zip . -x "*.git*" "*.DS_Store"
        cd ..
        echo "=== 最终文件信息 ==="
        ls -lh Skia.zip
        echo ""
        echo "=== 压缩包内容预览 ==="
        unzip -l Skia.zip | head -30

    - name: 上传最终构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia-Final-Package
        path: Skia.zip

    - name: 发布Release (仅主分支)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: build-${{ github.run_number }}
        name: Skia + Dawn + Graphite 预编译库 v${{ github.run_number }}
        body: |
          # Skia + Dawn + Graphite 预编译库 自动构建版本

          此版本包含经过优化的Skia、Dawn WebGPU和Graphite GPU后端预编译库，支持多平台和现代GPU编程。

          ## 🚀 新功能特性
          - **Graphite GPU后端**: 现代化的GPU渲染架构
          - **Dawn WebGPU集成**: 跨平台WebGPU抽象层
          - **优化的磁盘使用**: 精简构建配置，减少不必要的依赖
          - **多平台支持**: Windows x64, Linux x64, Android arm64/x64
          - **CMake集成**: 开箱即用的CMake配置

          ## 📋 支持的图形后端
          - **Windows**: DirectX 11/12, Vulkan, OpenGL, WebGPU
          - **Linux**: Vulkan, OpenGL, WebGPU
          - **Android**: Vulkan, OpenGL ES, WebGPU

          ## 🛠️ 技术规格
          - C++20 标准
          - RelWithDebInfo 构建配置
          - Ganesh + Graphite双GPU后端
          - Dawn WebGPU支持
          - 包含动态生成文件

          ## 🎯 适用场景
          - 现代图形应用程序开发
          - 跨平台GPU编程
          - WebGPU应用程序
          - 高性能2D/3D图形渲染

          ## 📦 使用方法
          1. 下载 `Skia.zip` 并解压
          2. 参考包内的 `README.md` 和示例文件
          3. 使用CMake集成到您的项目中
          4. 选择Ganesh或Graphite GPU后端

          ## ⚠️ 注意事项
          - Graphite是实验性GPU后端，API可能会变化
          - 确保目标系统支持WebGPU
          - Android需要API Level 24或更高版本
          - 建议使用CMake 3.20或更高版本
        files: Skia.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
