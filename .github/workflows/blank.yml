name: 构建 Skia 和 Dawn

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: RelWithDebInfo
  SKIA_VERSION: chrome/m126
  DAWN_VERSION: main

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Visual Studio 环境
      uses: microsoft/setup-msbuild@v2

    - name: 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 安装 Git
      run: |
        # 确保 Git 在 PATH 中
        git --version
        where git
      shell: cmd

    - name: 安装依赖工具
      run: |
        # 安装必要的工具
        choco install ninja -y
        pip install requests
      shell: cmd

    - name: 设置环境变量
      run: |
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" >> $GITHUB_ENV
        echo "GYP_MSVS_VERSION=2022" >> $GITHUB_ENV
        echo "DEPOT_TOOLS_UPDATE=0" >> $GITHUB_ENV
        echo "GIT_CACHE_PATH=${{ github.workspace }}\git-cache" >> $GITHUB_ENV
      shell: bash

    - name: 清理并创建工作目录
      run: |
        # 清理可能存在的目录
        if (Test-Path "git-cache") { Remove-Item -Recurse -Force "git-cache" }
        if (Test-Path "skia-build") { Remove-Item -Recurse -Force "skia-build" }
        if (Test-Path "depot_tools") { Remove-Item -Recurse -Force "depot_tools" }
        
        # 创建新的工作目录
        New-Item -ItemType Directory -Path "git-cache" -Force
        New-Item -ItemType Directory -Path "skia-build" -Force
      shell: powershell

    - name: 获取 depot_tools
      run: |
        # 直接下载 depot_tools zip 文件而不是 git clone
        Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-infra/depot_tools.zip" -OutFile "depot_tools.zip"
        Expand-Archive -Path "depot_tools.zip" -DestinationPath "."
        
        # 设置环境变量
        $env:PATH = "$PWD\depot_tools;$env:PATH"
        echo "$PWD\depot_tools" >> $env:GITHUB_PATH
        
        # 更新 depot_tools
        cd depot_tools
        .\update_depot_tools.bat
      shell: powershell

    - name: 配置 Git 缓存
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global cache.cachepath "${{ github.workspace }}\git-cache"
      shell: cmd

    - name: 手动下载和配置 Skia
      run: |
        cd skia-build
        
        # 直接 clone Skia 仓库
        git clone --depth 1 --branch ${{ env.SKIA_VERSION }} https://skia.googlesource.com/skia.git
        cd skia
        
        # 清理并创建第三方库目录
        if [ -d "third_party" ]; then
          rm -rf third_party
        fi
        mkdir -p third_party
        cd third_party
        
        # 下载主要的第三方库
        echo "正在下载 googletest..."
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/google/googletest.git googletest
        
        echo "正在下载 harfbuzz..."
        git clone --depth 1 https://skia.googlesource.com/external/github.com/harfbuzz/harfbuzz.git harfbuzz
        
        echo "正在下载 icu..."
        git clone --depth 1 https://chromium.googlesource.com/chromium/src/third_party/icu.git icu
        
        echo "正在下载 libjpeg-turbo..."
        git clone --depth 1 https://skia.googlesource.com/external/github.com/libjpeg-turbo/libjpeg-turbo.git libjpeg-turbo
        
        echo "正在下载 libpng..."
        git clone --depth 1 https://skia.googlesource.com/external/github.com/glennrp/libpng.git libpng
        
        echo "正在下载 libwebp..."
        git clone --depth 1 https://skia.googlesource.com/external/github.com/webmproject/libwebp.git libwebp
        
        echo "正在下载 zlib..."
        git clone --depth 1 https://skia.googlesource.com/external/github.com/madler/zlib.git zlib
        
        echo "正在下载 cpu_features..."
        git clone --depth 1 https://skia.googlesource.com/external/github.com/google/cpu_features.git cpu_features
        
        cd ..
      shell: bash

    - name: 下载和配置 Dawn
      run: |
        cd skia-build
        
        # 清理可能存在的 dawn 目录
        if [ -d "dawn" ]; then
          rm -rf dawn
        fi
        
        git clone --depth 1 --branch ${{ env.DAWN_VERSION }} https://dawn.googlesource.com/dawn.git
        cd dawn
        
        # 清理并创建第三方库目录
        if [ -d "third_party" ]; then
          rm -rf third_party
        fi
        mkdir -p third_party
        cd third_party
        
        echo "正在下载 Dawn 依赖项..."
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/google/googletest.git googletest
        git clone --depth 1 https://chromium.googlesource.com/external/khronos/SPIRV-Headers.git spirv-headers
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/KhronosGroup/glslang.git glslang
        
        cd ..
      shell: bash

    - name: 编译 Dawn (Windows)
      run: |
        cd skia-build/dawn
        
        # 清理并创建构建目录
        if [ -d "out" ]; then
          rm -rf out
        fi
        mkdir -p out/RelWithDebInfo
        
        # 创建 Dawn 构建配置
        cat > out/RelWithDebInfo/args.gn << 'EOF'
        is_debug = false
        is_component_build = false
        target_cpu = "x64"
        
        # Dawn 配置
        dawn_enable_d3d11 = true
        dawn_enable_d3d12 = true
        dawn_enable_vulkan = true
        dawn_enable_desktop_gl = true
        dawn_enable_opengles = false
        dawn_use_swiftshader = false
        dawn_complete_static_libs = true
        dawn_enable_error_injection = false
        dawn_enable_wgsl = true
        dawn_standalone = true
        
        # 编译器配置
        is_clang = true
        clang_use_chrome_plugins = false
        
        # 禁用测试和示例
        dawn_enable_vulkan_validation_layers = false
        dawn_enable_vulkan_loader = true
        dawn_enable_desktop_gl = true
        EOF
        
        # 生成构建文件
        python tools/gn gen out/RelWithDebInfo
        
        # 编译 Dawn
        ninja -C out/RelWithDebInfo
      shell: bash

    - name: 编译 Skia (Windows)  
      run: |
        cd skia-build/skia
        
        # 清理并创建构建目录
        if [ -d "out" ]; then
          rm -rf out
        fi
        mkdir -p out/RelWithDebInfo
        
        # 创建 Skia 构建配置
        cat > out/RelWithDebInfo/args.gn << 'EOF'
        is_debug = false
        is_component_build = false
        target_cpu = "x64"
        
        # 编译器配置
        cc = "clang"
        cxx = "clang++"
        is_clang = true
        clang_use_chrome_plugins = false
        
        # Skia 功能配置
        skia_use_dawn = true
        skia_use_direct3d = true
        skia_use_gl = true
        skia_use_vulkan = true
        skia_enable_gpu = true
        skia_enable_sksl = true
        skia_enable_tools = false
        skia_enable_ccpr = true
        
        # Dawn 集成
        dawn_dir = "../dawn"
        skia_compile_processors = true
        skia_compile_sksl_tests = false
        
        # 系统库配置
        skia_enable_fontmgr_win = true
        skia_enable_fontmgr_win_gdi = true
        skia_use_system_harfbuzz = false
        skia_use_system_icu = false
        skia_use_system_libjpeg_turbo = false
        skia_use_system_libpng = false
        skia_use_system_libwebp = false
        skia_use_system_zlib = false
        
        # C++ 标准
        extra_cflags_cc = ["-std=c++20"]
        EOF
        
        # 生成构建文件
        python bin/gn gen out/RelWithDebInfo
        
        # 编译 Skia
        ninja -C out/RelWithDebInfo
      shell: bash

    - name: 收集 Windows 构建产物
      run: |
        # 创建产物目录结构
        mkdir -p artifacts/Windows/x64/include
        mkdir -p artifacts/Windows/x64/lib
        mkdir -p artifacts/Windows/x64/bin
        
        # 复制 Skia 头文件
        echo "正在复制 Skia 头文件..."
        cp -r skia-build/skia/include/* artifacts/Windows/x64/include/
        
        # 复制 Dawn 头文件和生成的文件
        echo "正在复制 Dawn 头文件..."
        if [ -d "skia-build/dawn/out/RelWithDebInfo/gen/include" ]; then
          cp -r skia-build/dawn/out/RelWithDebInfo/gen/include/* artifacts/Windows/x64/include/
        fi
        
        # 复制 Dawn 原始头文件
        if [ -d "skia-build/dawn/include" ]; then
          cp -r skia-build/dawn/include/* artifacts/Windows/x64/include/
        fi
        
        # 收集所有静态库文件
        echo "正在收集库文件..."
        find skia-build/skia/out/RelWithDebInfo -name "*.lib" -exec cp {} artifacts/Windows/x64/lib/ \; 2>/dev/null || true
        find skia-build/dawn/out/RelWithDebInfo -name "*.lib" -exec cp {} artifacts/Windows/x64/lib/ \; 2>/dev/null || true
        
        # 收集 DLL 和可执行文件
        echo "正在收集二进制文件..."
        find skia-build/skia/out/RelWithDebInfo -name "*.dll" -exec cp {} artifacts/Windows/x64/bin/ \; 2>/dev/null || true
        find skia-build/dawn/out/RelWithDebInfo -name "*.dll" -exec cp {} artifacts/Windows/x64/bin/ \; 2>/dev/null || true
        find skia-build/skia/out/RelWithDebInfo -name "*.exe" -exec cp {} artifacts/Windows/x64/bin/ \; 2>/dev/null || true
        
        # 显示收集到的文件
        echo "收集到的库文件:"
        ls -la artifacts/Windows/x64/lib/ 2>/dev/null || echo "没有找到库文件"
        echo "收集到的二进制文件:"
        ls -la artifacts/Windows/x64/bin/ 2>/dev/null || echo "没有找到二进制文件"
        echo "收集到的头文件目录:"
        ls -la artifacts/Windows/x64/include/ 2>/dev/null || echo "没有找到头文件"
      shell: bash

    - name: 上传 Windows 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-windows-x64
        path: artifacts/Windows/x64

  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-18 \
          gcc-13 \
          g++-13 \
          ninja-build \
          pkg-config \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libwayland-dev \
          libxkbcommon-dev \
          python3 \
          python3-pip \
          git \
          curl

    - name: 设置 Clang 为默认编译器
      run: |
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-18 100

    - name: 清理并创建工作目录
      run: |
        # 清理可能存在的目录
        rm -rf depot_tools skia-build
        mkdir -p skia-build

    - name: 获取 depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$PWD/depot_tools" >> $GITHUB_PATH

    - name: 下载和配置 Skia
      run: |
        cd skia-build
        
        # 清理可能存在的目录
        rm -rf skia
        
        git clone --depth 1 --branch ${{ env.SKIA_VERSION }} https://skia.googlesource.com/skia.git
        cd skia
        
        # 清理并创建第三方库目录
        rm -rf third_party
        mkdir -p third_party
        cd third_party
        
        echo "正在下载第三方依赖项..."
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/google/googletest.git googletest
        git clone --depth 1 https://skia.googlesource.com/external/github.com/harfbuzz/harfbuzz.git harfbuzz
        git clone --depth 1 https://chromium.googlesource.com/chromium/src/third_party/icu.git icu
        git clone --depth 1 https://skia.googlesource.com/external/github.com/libjpeg-turbo/libjpeg-turbo.git libjpeg-turbo
        git clone --depth 1 https://skia.googlesource.com/external/github.com/glennrp/libpng.git libpng
        git clone --depth 1 https://skia.googlesource.com/external/github.com/webmproject/libwebp.git libwebp
        git clone --depth 1 https://skia.googlesource.com/external/github.com/madler/zlib.git zlib
        git clone --depth 1 https://skia.googlesource.com/external/github.com/google/cpu_features.git cpu_features
        cd ..

    - name: 下载和配置 Dawn
      run: |
        cd skia-build
        
        # 清理可能存在的目录
        rm -rf dawn
        
        git clone --depth 1 --branch ${{ env.DAWN_VERSION }} https://dawn.googlesource.com/dawn.git
        cd dawn
        
        # 清理并创建第三方库目录
        rm -rf third_party
        mkdir -p third_party
        cd third_party
        
        echo "正在下载 Dawn 依赖项..."
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/google/googletest.git googletest
        git clone --depth 1 https://chromium.googlesource.com/external/khronos/SPIRV-Headers.git spirv-headers
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/KhronosGroup/glslang.git glslang
        cd ..

    - name: 编译 Dawn (Linux)
      run: |
        cd skia-build/dawn
        
        # 清理并创建构建目录
        rm -rf out
        mkdir -p out/RelWithDebInfo
        
        # 创建 Dawn 构建配置
        cat > out/RelWithDebInfo/args.gn << 'EOF'
        is_debug = false
        is_component_build = false
        target_cpu = "x64"
        
        # Dawn 配置
        dawn_enable_vulkan = true
        dawn_enable_desktop_gl = true
        dawn_enable_opengles = false
        dawn_use_swiftshader = false
        dawn_complete_static_libs = true
        dawn_enable_error_injection = false
        dawn_enable_wgsl = true
        dawn_standalone = true
        
        # 编译器配置
        cc = "clang-18"
        cxx = "clang++-18"
        is_clang = true
        clang_use_chrome_plugins = false
        
        # 禁用测试
        dawn_enable_vulkan_validation_layers = false
        dawn_enable_vulkan_loader = true
        EOF
        
        # 生成构建文件
        python3 tools/gn gen out/RelWithDebInfo
        
        # 编译 Dawn
        ninja -C out/RelWithDebInfo

    - name: 编译 Skia (Linux)
      run: |
        cd skia-build/skia
        
        # 清理并创建构建目录
        rm -rf out
        mkdir -p out/RelWithDebInfo
        
        # 创建 Skia 构建配置
        cat > out/RelWithDebInfo/args.gn << 'EOF'
        is_debug = false
        is_component_build = false
        target_cpu = "x64"
        
        # 编译器配置
        cc = "clang-18"
        cxx = "clang++-18"
        is_clang = true
        clang_use_chrome_plugins = false
        
        # Skia 功能配置
        skia_use_dawn = true
        skia_use_gl = true
        skia_use_vulkan = true
        skia_enable_gpu = true
        skia_enable_sksl = true
        skia_enable_tools = false
        skia_enable_ccpr = true
        
        # Dawn 集成
        dawn_dir = "../dawn"
        skia_compile_processors = true
        skia_compile_sksl_tests = false
        
        # 系统库配置
        skia_use_system_harfbuzz = false
        skia_use_system_icu = false
        skia_use_system_libjpeg_turbo = false
        skia_use_system_libpng = false
        skia_use_system_libwebp = false
        skia_use_system_zlib = false
        
        # C++ 标准
        extra_cflags_cc = ["-std=c++20"]
        EOF
        
        # 生成构建文件
        python3 bin/gn gen out/RelWithDebInfo
        
        # 编译 Skia
        ninja -C out/RelWithDebInfo

    - name: 收集 Linux 构建产物
      run: |
        # 创建产物目录结构
        mkdir -p artifacts/Linux/x64/include
        mkdir -p artifacts/Linux/x64/lib
        mkdir -p artifacts/Linux/x64/bin
        
        # 复制 Skia 头文件
        echo "正在复制 Skia 头文件..."
        cp -r skia-build/skia/include/* artifacts/Linux/x64/include/
        
        # 复制 Dawn 头文件和生成的文件
        echo "正在复制 Dawn 头文件..."
        if [ -d "skia-build/dawn/out/RelWithDebInfo/gen/include" ]; then
          cp -r skia-build/dawn/out/RelWithDebInfo/gen/include/* artifacts/Linux/x64/include/
        fi
        
        # 复制 Dawn 原始头文件
        if [ -d "skia-build/dawn/include" ]; then
          cp -r skia-build/dawn/include/* artifacts/Linux/x64/include/
        fi
        
        # 收集静态库文件
        echo "正在收集库文件..."
        find skia-build/skia/out/RelWithDebInfo -name "*.a" -exec cp {} artifacts/Linux/x64/lib/ \; 2>/dev/null || true
        find skia-build/dawn/out/RelWithDebInfo -name "*.a" -exec cp {} artifacts/Linux/x64/lib/ \; 2>/dev/null || true
        
        # 收集动态库文件
        find skia-build/skia/out/RelWithDebInfo -name "*.so" -exec cp {} artifacts/Linux/x64/lib/ \; 2>/dev/null || true
        find skia-build/dawn/out/RelWithDebInfo -name "*.so" -exec cp {} artifacts/Linux/x64/lib/ \; 2>/dev/null || true
        
        # 显示收集到的文件
        echo "收集到的库文件:"
        ls -la artifacts/Linux/x64/lib/ 2>/dev/null || echo "没有找到库文件"

    - name: 上传 Linux 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-linux-x64
        path: artifacts/Linux/x64

  build-android:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [arm64, x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-18 \
          ninja-build \
          pkg-config \
          python3 \
          python3-pip \
          git \
          curl

    - name: 设置 Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d

    - name: 清理并创建工作目录
      run: |
        # 清理可能存在的目录
        rm -rf depot_tools skia-build
        mkdir -p skia-build

    - name: 获取 depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$PWD/depot_tools" >> $GITHUB_PATH

    - name: 下载和配置 Skia
      run: |
        cd skia-build
        
        # 清理可能存在的目录
        rm -rf skia
        
        git clone --depth 1 --branch ${{ env.SKIA_VERSION }} https://skia.googlesource.com/skia.git
        cd skia
        
        # 清理并创建第三方库目录
        rm -rf third_party
        mkdir -p third_party
        cd third_party
        
        echo "正在下载第三方依赖项..."
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/google/googletest.git googletest
        git clone --depth 1 https://skia.googlesource.com/external/github.com/harfbuzz/harfbuzz.git harfbuzz
        git clone --depth 1 https://chromium.googlesource.com/chromium/src/third_party/icu.git icu
        git clone --depth 1 https://skia.googlesource.com/external/github.com/libjpeg-turbo/libjpeg-turbo.git libjpeg-turbo
        git clone --depth 1 https://skia.googlesource.com/external/github.com/glennrp/libpng.git libpng
        git clone --depth 1 https://skia.googlesource.com/external/github.com/webmproject/libwebp.git libwebp
        git clone --depth 1 https://skia.googlesource.com/external/github.com/madler/zlib.git zlib
        git clone --depth 1 https://skia.googlesource.com/external/github.com/google/cpu_features.git cpu_features
        cd ..

    - name: 下载和配置 Dawn
      run: |
        cd skia-build
        
        # 清理可能存在的目录
        rm -rf dawn
        
        git clone --depth 1 --branch ${{ env.DAWN_VERSION }} https://dawn.googlesource.com/dawn.git
        cd dawn
        
        # 清理并创建第三方库目录
        rm -rf third_party
        mkdir -p third_party
        cd third_party
        
        echo "正在下载 Dawn 依赖项..."
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/google/googletest.git googletest
        git clone --depth 1 https://chromium.googlesource.com/external/khronos/SPIRV-Headers.git spirv-headers
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/KhronosGroup/SPIRV-Tools.git spirv-tools
        git clone --depth 1 https://chromium.googlesource.com/external/github.com/KhronosGroup/glslang.git glslang
        cd ..

    - name: 编译 Dawn (Android)
      run: |
        cd skia-build/dawn
        
        # 清理并创建构建目录
        rm -rf out
        mkdir -p out/RelWithDebInfo
        
        # 创建 Dawn 构建配置
        cat > out/RelWithDebInfo/args.gn << 'EOF'
        is_debug = false
        is_component_build = false
        target_os = "android"
        target_cpu = "${{ matrix.arch == 'arm64' && 'arm64' || 'x64' }}"
        android_ndk_root = "${{ env.ANDROID_NDK_LATEST_HOME }}"
        
        # Dawn 配置
        dawn_enable_vulkan = true
        dawn_enable_opengles = true
        dawn_enable_desktop_gl = false
        dawn_use_swiftshader = false
        dawn_complete_static_libs = true
        dawn_enable_error_injection = false
        dawn_enable_wgsl = true
        dawn_standalone = true
        
        # Android 特定配置
        android_api_level = 26
        EOF
        
        # 生成构建文件
        python3 tools/gn gen out/RelWithDebInfo
        
        # 编译 Dawn
        ninja -C out/RelWithDebInfo

    - name: 编译 Skia (Android)
      run: |
        cd skia-build/skia
        
        # 清理并创建构建目录
        rm -rf out
        mkdir -p out/RelWithDebInfo
        
        # 创建 Skia 构建配置
        cat > out/RelWithDebInfo/args.gn << 'EOF'
        is_debug = false
        is_component_build = false
        target_os = "android"
        target_cpu = "${{ matrix.arch == 'arm64' && 'arm64' || 'x64' }}"
        android_ndk_root = "${{ env.ANDROID_NDK_LATEST_HOME }}"
        
        # Skia 功能配置
        skia_use_dawn = true
        skia_use_vulkan = true
        skia_use_gl = true
        skia_enable_gpu = true
        skia_enable_sksl = true
        skia_enable_tools = false
        skia_enable_ccpr = true
        
        # Dawn 集成
        dawn_dir = "../dawn"
        skia_compile_processors = true
        skia_compile_sksl_tests = false
        
        # 系统库配置
        skia_use_system_harfbuzz = false
        skia_use_system_icu = false
        skia_use_system_libjpeg_turbo = false
        skia_use_system_libpng = false
        skia_use_system_libwebp = false
        skia_use_system_zlib = false
        
        # Android 特定配置
        android_api_level = 26
        
        # C++ 标准
        extra_cflags_cc = ["-std=c++20"]
        EOF
        
        # 生成构建文件
        python3 bin/gn gen out/RelWithDebInfo
        
        # 编译 Skia
        ninja -C out/RelWithDebInfo

    - name: 收集 Android 构建产物
      run: |
        # 创建产物目录结构
        mkdir -p artifacts/Android/${{ matrix.arch }}/include
        mkdir -p artifacts/Android/${{ matrix.arch }}/lib
        mkdir -p artifacts/Android/${{ matrix.arch }}/bin
        
        # 复制 Skia 头文件
        echo "正在复制 Skia 头文件..."
        cp -r skia-build/skia/include/* artifacts/Android/${{ matrix.arch }}/include/
        
        # 复制 Dawn 头文件和生成的文件
        echo "正在复制 Dawn 头文件..."
        if [ -d "skia-build/dawn/out/RelWithDebInfo/gen/include" ]; then
          cp -r skia-build/dawn/out/RelWithDebInfo/gen/include/* artifacts/Android/${{ matrix.arch }}/include/
        fi
        
        # 复制 Dawn 原始头文件
        if [ -d "skia-build/dawn/include" ]; then
          cp -r skia-build/dawn/include/* artifacts/Android/${{ matrix.arch }}/include/
        fi
        
        # 收集静态库文件
        echo "正在收集库文件..."
        find skia-build/skia/out/RelWithDebInfo -name "*.a" -exec cp {} artifacts/Android/${{ matrix.arch }}/lib/ \; 2>/dev/null || true
        find skia-build/dawn/out/RelWithDebInfo -name "*.a" -exec cp {} artifacts/Android/${{ matrix.arch }}/lib/ \; 2>/dev/null || true
        
        # 收集动态库文件
        find skia-build/skia/out/RelWithDebInfo -name "*.so" -exec cp {} artifacts/Android/${{ matrix.arch }}/lib/ \; 2>/dev/null || true
        find skia-build/dawn/out/RelWithDebInfo -name "*.so" -exec cp {} artifacts/Android/${{ matrix.arch }}/lib/ \; 2>/dev/null || true
        
        # 显示收集到的文件
        echo "收集到的库文件:"
        ls -la artifacts/Android/${{ matrix.arch }}/lib/ 2>/dev/null || echo "没有找到库文件"

    - name: 上传 Android 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-android-${{ matrix.arch }}
        path: artifacts/Android/${{ matrix.arch }}

  package:
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: 组织最终目录结构
      run: |
        # 创建 Skia 目录结构
        mkdir -p Skia/include/{include,dawn,modules}
        mkdir -p Skia/bin/{Win/x64,Linux/x64,Android/{arm64,x64}}
        mkdir -p Skia/lib/{Win/x64,Linux/x64,Android/{arm64,x64}}
        
        echo "正在组织最终目录结构..."
        
        # 复制头文件 (使用 Windows 版本作为主要头文件源，如果没有则使用 Linux)
        if [ -d "all-artifacts/skia-dawn-windows-x64/include" ]; then
          echo "使用 Windows 头文件..."
          cp -r all-artifacts/skia-dawn-windows-x64/include/* Skia/include/include/ 2>/dev/null || true
        elif [ -d "all-artifacts/skia-dawn-linux-x64/include" ]; then
          echo "使用 Linux 头文件..."
          cp -r all-artifacts/skia-dawn-linux-x64/include/* Skia/include/include/ 2>/dev/null || true
        fi
        
        # 分离 Dawn 头文件
        if [ -d "Skia/include/include/dawn" ]; then
          echo "分离 Dawn 头文件..."
          cp -r Skia/include/include/dawn/* Skia/include/dawn/ 2>/dev/null || true
          rm -rf Skia/include/include/dawn 2>/dev/null || true
        fi
        
        if [ -d "Skia/include/include/webgpu" ]; then
          echo "分离 WebGPU 头文件..."
          cp -r Skia/include/include/webgpu/* Skia/include/dawn/ 2>/dev/null || true
          rm -rf Skia/include/include/webgpu 2>/dev/null || true
        fi
        
        # 复制各平台的库文件和二进制文件
        echo "正在复制平台文件..."
        
        # Windows
        if [ -d "all-artifacts/skia-dawn-windows-x64" ]; then
          echo "复制 Windows 文件..."
          cp -r all-artifacts/skia-dawn-windows-x64/lib/* Skia/lib/Win/x64/ 2>/dev/null || true
          cp -r all-artifacts/skia-dawn-windows-x64/bin/* Skia/bin/Win/x64/ 2>/dev/null || true
        fi
        
        # Linux
        if [ -d "all-artifacts/skia-dawn-linux-x64" ]; then
          echo "复制 Linux 文件..."
          cp -r all-artifacts/skia-dawn-linux-x64/lib/* Skia/lib/Linux/x64/ 2>/dev/null || true
          cp -r all-artifacts/skia-dawn-linux-x64/bin/* Skia/bin/Linux/x64/ 2>/dev/null || true
        fi
        
        # Android ARM64
        if [ -d "all-artifacts/skia-dawn-android-arm64" ]; then
          echo "复制 Android ARM64 文件..."
          cp -r all-artifacts/skia-dawn-android-arm64/lib/* Skia/lib/Android/arm64/ 2>/dev/null || true
          cp -r all-artifacts/skia-dawn-android-arm64/bin/* Skia/bin/Android/arm64/ 2>/dev/null || true
        fi
        
        # Android x64
        if [ -d "all-artifacts/skia-dawn-android-x64" ]; then
          echo "复制 Android x64 文件..."
          cp -r all-artifacts/skia-dawn-android-x64/lib/* Skia/lib/Android/x64/ 2>/dev/null || true
          cp -r all-artifacts/skia-dawn-android-x64/bin/* Skia/bin/Android/x64/ 2>/dev/null || true
        fi
        
        # 显示最终结构
        echo "最终目录结构:"
        find Skia -type f | head -30

    - name: 创建 CMakeLists.txt
      run: |
        cat > Skia/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.20)
        project(Skia VERSION 1.0.0 LANGUAGES CXX)

        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # 检测平台和架构
        if(WIN32)
            set(PLATFORM_DIR "Win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        elseif(ANDROID)
            set(PLATFORM_DIR "Android")
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(ARCH_DIR "arm64")
            elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
                set(ARCH_DIR "x64")
            else()
                message(FATAL_ERROR "不支持的 Android 架构: ${CMAKE_ANDROID_ARCH_ABI}")
            endif()
        elseif(UNIX)
            set(PLATFORM_DIR "Linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                message(FATAL_ERROR "不支持的 Linux 架构")
            endif()
        else()
            message(FATAL_ERROR "不支持的平台")
        endif()

        # 设置库和头文件路径
        set(SKIA_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include/include")
        set(DAWN_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include/dawn")
        set(SKIA_LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
        set(SKIA_BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

        # 创建 Dawn 动态库目标
        add_library(DawnDynamic INTERFACE)

        # 设置 Dawn 包含目录
        target_include_directories(DawnDynamic INTERFACE
            ${DAWN_INCLUDE_DIR}
            ${SKIA_INCLUDE_DIR}/gpu/dawn
        )

        # 查找 Dawn 相关的库文件
        if(WIN32)
            file(GLOB DAWN_LIBRARIES 
                "${SKIA_LIB_DIR}/*dawn*.lib" 
                "${SKIA_LIB_DIR}/*webgpu*.lib"
                "${SKIA_LIB_DIR}/*Dawn*.lib"
                "${SKIA_LIB_DIR}/*WebGPU*.lib"
            )
        elseif(UNIX)
            file(GLOB DAWN_LIBRARIES 
                "${SKIA_LIB_DIR}/*dawn*.a" 
                "${SKIA_LIB_DIR}/*webgpu*.a"
                "${SKIA_LIB_DIR}/*Dawn*.a"
                "${SKIA_LIB_DIR}/*WebGPU*.a"
            )
        endif()

        if(DAWN_LIBRARIES)
            target_link_libraries(DawnDynamic INTERFACE ${DAWN_LIBRARIES})
            message(STATUS "找到 Dawn 库文件: ${DAWN_LIBRARIES}")
        else()
            message(WARNING "在 ${SKIA_LIB_DIR} 中未找到 Dawn 库文件")
        endif()

        # 创建 Skia 目标
        add_library(Skia INTERFACE)

        # 设置包含目录
        target_include_directories(Skia INTERFACE
            ${SKIA_INCLUDE_DIR}
            ${SKIA_INCLUDE_DIR}/core
            ${SKIA_INCLUDE_DIR}/config
            ${SKIA_INCLUDE_DIR}/effects
            ${SKIA_INCLUDE_DIR}/gpu
            ${SKIA_INCLUDE_DIR}/utils
            ${DAWN_INCLUDE_DIR}
        )

        # 查找并链接 Skia 库文件
        if(WIN32)
            # Windows 静态库
            file(GLOB SKIA_LIBRARIES 
                "${SKIA_LIB_DIR}/skia*.lib"
                "${SKIA_LIB_DIR}/*skia*.lib"
            )
        elseif(UNIX)
            # Linux/Android 静态库
            file(GLOB SKIA_LIBRARIES 
                "${SKIA_LIB_DIR}/libskia*.a"
                "${SKIA_LIB_DIR}/*skia*.a"
            )
        endif()

        if(SKIA_LIBRARIES)
            target_link_libraries(Skia INTERFACE ${SKIA_LIBRARIES})
            message(STATUS "找到 Skia 库文件: ${SKIA_LIBRARIES}")
        else()
            message(WARNING "在 ${SKIA_LIB_DIR} 中未找到 Skia 库文件")
        endif()

        # 链接 Dawn 到 Skia
        target_link_libraries(Skia INTERFACE DawnDynamic)

        # 平台特定的系统库
        if(WIN32)
            target_link_libraries(Skia INTERFACE
                d3d11 d3d12 dxgi dxguid
                opengl32 gdi32 user32 kernel32
                ole32 oleaut32 uuid
            )
        elseif(ANDROID)
            target_link_libraries(Skia INTERFACE
                vulkan
                EGL GLESv2
                android log
            )
        elseif(UNIX)
            find_package(PkgConfig REQUIRED)
            pkg_check_modules(X11 REQUIRED x11)
            pkg_check_modules(GL REQUIRED gl)
            
            target_link_libraries(Skia INTERFACE
                vulkan
                ${X11_LIBRARIES}
                ${GL_LIBRARIES}
                pthread dl
            )
        endif()

        # 设置编译选项
        target_compile_features(Skia INTERFACE cxx_std_20)

        if(MSVC)
            target_compile_options(Skia INTERFACE
                /std:c++20
                /permissive-
            )
        else()
            target_compile_options(Skia INTERFACE
                -std=c++20
            )
        endif()

        # 导出目标
        install(TARGETS Skia DawnDynamic
            EXPORT SkiaTargets
            LIBRARY DESTINATION lib
            ARCHIVE DESTINATION lib
            RUNTIME DESTINATION bin
        )

        install(DIRECTORY include/
            DESTINATION include
        )

        install(EXPORT SkiaTargets
            FILE SkiaTargets.cmake
            NAMESPACE Skia::
            DESTINATION lib/cmake/Skia
        )

        # 创建配置文件
        include(CMakePackageConfigHelpers)
        write_basic_package_version_file(
            SkiaConfigVersion.cmake
            VERSION ${PROJECT_VERSION}
            COMPATIBILITY AnyNewerVersion
        )

        configure_package_config_file(
            ${CMAKE_CURRENT_SOURCE_DIR}/SkiaConfig.cmake.in
            ${CMAKE_CURRENT_BINARY_DIR}/SkiaConfig.cmake
            INSTALL_DESTINATION lib/cmake/Skia
        )

        install(FILES
            ${CMAKE_CURRENT_BINARY_DIR}/SkiaConfig.cmake
            ${CMAKE_CURRENT_BINARY_DIR}/SkiaConfigVersion.cmake
            DESTINATION lib/cmake/Skia
        )
        EOF

    - name: 创建 CMake 配置模板文件
      run: |
        cat > Skia/SkiaConfig.cmake.in << 'EOF'
        @PACKAGE_INIT@

        include(CMakeFindDependencyMacro)

        # 查找依赖项
        if(WIN32)
            # Windows 平台依赖项已在目标中定义
        elseif(ANDROID)
            # Android 平台依赖项已在目标中定义
        elseif(UNIX)
            find_dependency(PkgConfig REQUIRED)
        endif()

        include("${CMAKE_CURRENT_LIST_DIR}/SkiaTargets.cmake")

        check_required_components(Skia)
        EOF

    - name: 创建 Skia.zip 压缩包
      run: |
        echo "正在创建 Skia.zip 压缩包..."
        zip -r Skia.zip Skia/
        
        echo "压缩包创建完成，大小："
        ls -lh Skia.zip

    - name: 上传最终构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia-Final-Package
        path: Skia.zip

    - name: 创建发布版本
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Skia 和 Dawn v${{ github.run_number }}
        body: |
          ## Skia 和 Dawn 预编译库

          这个版本包含了以下平台的 Skia 和 Dawn 预编译库:
          
          ### 支持的平台和渲染后端:
          - **Windows x64**: DirectX 11, DirectX 12, Vulkan, OpenGL (MSVC 2022)
          - **Linux x64**: Vulkan, OpenGL (Ubuntu 24.04, Clang 18)
          - **Android**: ARM64, x64 - Vulkan, OpenGL ES (EGL)
          
          ### 构建配置:
          - 构建类型: RelWithDebInfo
          - C++ 标准: C++20
          - 编译器: Clang 18, GCC 13, MSVC 2022
          
          ### 使用方法:
          1. 解压 `Skia.zip`
          2. 在您的 CMake 项目中使用:
             ```cmake
             find_package(Skia REQUIRED)
             target_link_libraries(your_target Skia::Skia)
             ```
          
          ### 目录结构:
          ```
          Skia/
          ├── include/include/     # Skia 核心头文件
          ├── include/dawn/        # Dawn 头文件 (包含动态生成的文件)
          ├── include/modules/     # Skia 模块头文件
          ├── bin/                 # 各平台二进制文件
          ├── lib/                 # 各平台库文件
          └── CMakeLists.txt       # CMake 配置文件
          ```
          
          ### Dawn 动态生成文件:
          此版本包含了 Dawn 构建过程中动态生成的头文件和源码，确保预编译库可以正常使用。
          
          ### 主要修复:
          - 修复了目录冲突问题
          - 改进了依赖项下载流程
          - 增强了错误处理和日志输出
          - 优化了构建产物收集过程
        files: Skia.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
