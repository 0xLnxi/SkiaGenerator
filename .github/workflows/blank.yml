name: 构建Skia与Dawn

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SKIA_VERSION: "chrome/m127"
  DAWN_VERSION: "main"

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Visual Studio环境
      uses: microsoft/setup-msbuild@v2

    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install ninja

    - name: 安装Ninja和必要工具
      run: |
        choco install ninja -y
        choco install git -y

    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: 设置环境变量
      run: |
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GYP_MSVS_VERSION=2022" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: 克隆Skia源码
      run: |
        git clone --branch ${{ env.SKIA_VERSION }} --single-branch https://skia.googlesource.com/skia.git skia
        cd skia
        # 跳过emsdk相关的依赖同步，避免Windows下的激活问题
        python tools/git-sync-deps --skip-emsdk

    - name: 克隆Dawn源码
      run: |
        git clone --branch ${{ env.DAWN_VERSION }} --single-branch https://dawn.googlesource.com/dawn.git dawn
        cd dawn
        cp scripts/standalone.gclient .gclient
        gclient sync

    - name: 配置Skia构建参数 (Windows)
      run: |
        cd skia
        # 配置支持所有Windows后端的构建参数
        bin/gn gen out/Release-${{ matrix.arch }} --args='
          is_official_build=true
          is_debug=false
          target_cpu="${{ matrix.arch }}"
          win_vc="2022"
          clang_win="C:\Program Files\LLVM"
          extra_cflags=["/std:c++20"]
          extra_cxxflags=["/std:c++20"]
          skia_use_dawn=true
          skia_use_gl=true
          skia_use_angle=true
          skia_use_direct3d=true
          skia_use_dng_sdk=false
          skia_use_expat=true
          skia_use_fontconfig=false
          skia_use_freetype=true
          skia_use_harfbuzz=true
          skia_use_icu=true
          skia_use_libjpeg_turbo_encode=true
          skia_use_libjpeg_turbo_decode=true
          skia_use_libpng_encode=true
          skia_use_libpng_decode=true
          skia_use_libwebp_encode=true
          skia_use_libwebp_decode=true
          skia_use_vulkan=true
          skia_use_zlib=true
          skia_enable_gpu=true
          skia_enable_tools=false
          skia_enable_skottie=true
          dawn_path="../dawn"
          skia_compile_processors=true
        '

    - name: 配置Dawn构建参数 (Windows)
      run: |
        cd dawn
        # 配置Dawn支持所有Windows后端
        mkdir -p out/Release-${{ matrix.arch }}
        $argsContent = @'
        import("//build_overrides/build.gni")
        
        target_cpu = "${{ matrix.arch }}"
        is_debug = false
        is_official_build = true
        is_clang = true
        dawn_enable_d3d11 = true
        dawn_enable_d3d12 = true
        dawn_enable_vulkan = true
        dawn_enable_opengl = true
        dawn_enable_desktop_gl = true
        dawn_use_glfw = false
        dawn_use_x11 = false
        dawn_build_samples = false
        dawn_build_node_bindings = false
        dawn_enable_wgsl = true
        tint_build_tests = false
        dawn_complete_static_libs = true
        dawn_enable_error_injection = false
        '@
        $argsContent | Out-File -FilePath "out/Release-${{ matrix.arch }}/args.gn" -Encoding utf8
        
        gn gen out/Release-${{ matrix.arch }}

    - name: 构建Dawn库
      run: |
        cd dawn
        ninja -C out/Release-${{ matrix.arch }} dawn_native dawn_proc dawn_wire dawn_utils dawncpp_headers webgpu_headers dawn_common tint

    - name: 构建Skia库
      run: |
        cd skia
        ninja -C out/Release-${{ matrix.arch }} skia modules

    - name: 创建输出目录结构
      run: |
        New-Item -ItemType Directory -Force -Path "output/Skia/include/core"
        New-Item -ItemType Directory -Force -Path "output/Skia/include/dawn"
        New-Item -ItemType Directory -Force -Path "output/Skia/include/modules"
        New-Item -ItemType Directory -Force -Path "output/Skia/bin/Win/${{ matrix.arch }}"
        New-Item -ItemType Directory -Force -Path "output/Skia/lib/Win/${{ matrix.arch }}"
        New-Item -ItemType Directory -Force -Path "output/Skia/src/dawn/gen"

    - name: 收集Skia头文件
      run: |
        # 复制Skia核心头文件
        robocopy skia/include output/Skia/include/core /E /NFL /NDL /NJH /NJS /nc /ns /np
        # 复制模块头文件（如果存在）
        if (Test-Path "skia/modules") {
          Get-ChildItem -Path "skia/modules" -Recurse -Include "*.h", "*.hpp" | ForEach-Object {
            $relativePath = $_.FullName.Substring((Resolve-Path "skia/modules").Path.Length + 1)
            $targetPath = "output/Skia/include/modules/$relativePath"
            $targetDir = Split-Path $targetPath -Parent
            if (!(Test-Path $targetDir)) {
              New-Item -ItemType Directory -Force -Path $targetDir
            }
            Copy-Item $_.FullName $targetPath
          }
        }

    - name: 收集Dawn头文件和生成文件
      run: |
        # 复制Dawn原生头文件
        robocopy dawn/include output/Skia/include/dawn /E /NFL /NDL /NJH /NJS /nc /ns /np
        # 复制Dawn生成的头文件
        if (Test-Path "dawn/out/Release-${{ matrix.arch }}/gen/include") {
          robocopy "dawn/out/Release-${{ matrix.arch }}/gen/include" "output/Skia/include/dawn" /E /NFL /NDL /NJH /NJS /nc /ns /np
        }
        # 复制WebGPU头文件
        if (Test-Path "dawn/out/Release-${{ matrix.arch }}/gen/webgpu-headers") {
          robocopy "dawn/out/Release-${{ matrix.arch }}/gen/webgpu-headers" "output/Skia/include" /E /NFL /NDL /NJH /NJS /nc /ns /np
        }

    - name: 收集库文件
      run: |
        # 复制Skia库文件
        Copy-Item "skia/out/Release-${{ matrix.arch }}/skia.lib" "output/Skia/lib/Win/${{ matrix.arch }}/"
        # 复制Dawn相关库文件
        Get-ChildItem "dawn/out/Release-${{ matrix.arch }}/" -Filter "*.lib" | Copy-Item -Destination "output/Skia/lib/Win/${{ matrix.arch }}/"

    - name: 收集Dawn生成的源文件
      run: |
        # 复制生成的源文件
        if (Test-Path "dawn/out/Release-${{ matrix.arch }}/gen/src") {
          robocopy "dawn/out/Release-${{ matrix.arch }}/gen/src" "output/Skia/src/dawn/gen" /E /NFL /NDL /NJH /NJS /nc /ns /np
        }

    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-windows-${{ matrix.arch }}
        path: output/

  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装构建依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-18 \
          gcc-13 \
          g++-13 \
          ninja-build \
          python3-pip \
          pkg-config \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libvulkan-dev \
          vulkan-tools \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libwayland-dev \
          libxkbcommon-dev \
          libfontconfig1-dev \
          libfreetype6-dev

    - name: 设置编译器版本
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH

    - name: 克隆Skia源码
      run: |
        git clone --branch ${{ env.SKIA_VERSION }} --single-branch https://skia.googlesource.com/skia.git skia
        cd skia
        python3 tools/git-sync-deps

    - name: 克隆Dawn源码
      run: |
        git clone --branch ${{ env.DAWN_VERSION }} --single-branch https://dawn.googlesource.com/dawn.git dawn
        cd dawn
        cp scripts/standalone.gclient .gclient
        gclient sync

    - name: 配置Skia构建参数 (Linux)
      run: |
        cd skia
        # 配置支持Vulkan和OpenGL的构建参数
        bin/gn gen out/Release-${{ matrix.arch }} --args='
          is_official_build=true
          is_debug=false
          target_cpu="${{ matrix.arch }}"
          cc="clang-18"
          cxx="clang++-18"
          extra_cflags=["-std=c++20"]
          extra_cxxflags=["-std=c++20"]
          skia_use_dawn=true
          skia_use_gl=true
          skia_use_vulkan=true
          skia_use_dng_sdk=false
          skia_use_expat=true
          skia_use_fontconfig=true
          skia_use_freetype=true
          skia_use_harfbuzz=true
          skia_use_icu=true
          skia_use_libjpeg_turbo_encode=true
          skia_use_libjpeg_turbo_decode=true
          skia_use_libpng_encode=true
          skia_use_libpng_decode=true
          skia_use_libwebp_encode=true
          skia_use_libwebp_decode=true
          skia_use_zlib=true
          skia_enable_gpu=true
          skia_enable_tools=false
          skia_enable_skottie=true
          dawn_path="../dawn"
          skia_compile_processors=true
        '

    - name: 配置Dawn构建参数 (Linux)
      run: |
        cd dawn
        # 配置Dawn支持Vulkan和OpenGL的构建参数
        mkdir -p out/Release-${{ matrix.arch }}
        cat > out/Release-${{ matrix.arch }}/args.gn << 'EOF'
        import("//build_overrides/build.gni")
        
        target_cpu = "${{ matrix.arch }}"
        is_debug = false
        is_official_build = true
        is_clang = true
        dawn_enable_vulkan = true
        dawn_enable_opengl = true
        dawn_enable_desktop_gl = true
        dawn_use_glfw = false
        dawn_use_x11 = true
        dawn_use_wayland = true
        dawn_build_samples = false
        dawn_build_node_bindings = false
        dawn_enable_wgsl = true
        tint_build_tests = false
        dawn_complete_static_libs = true
        dawn_enable_error_injection = false
        EOF
        
        gn gen out/Release-${{ matrix.arch }}

    - name: 构建Dawn库
      run: |
        cd dawn
        ninja -C out/Release-${{ matrix.arch }} dawn_native dawn_proc dawn_wire dawn_utils dawncpp_headers webgpu_headers dawn_common tint

    - name: 构建Skia库
      run: |
        cd skia
        ninja -C out/Release-${{ matrix.arch }} skia modules

    - name: 创建输出目录结构
      run: |
        mkdir -p output/Skia/include/core
        mkdir -p output/Skia/include/dawn
        mkdir -p output/Skia/include/modules
        mkdir -p output/Skia/bin/Linux/${{ matrix.arch }}
        mkdir -p output/Skia/lib/Linux/${{ matrix.arch }}
        mkdir -p output/Skia/src/dawn/gen

    - name: 收集Skia头文件
      run: |
        # 复制Skia核心头文件
        cp -r skia/include/* output/Skia/include/core/
        # 复制模块头文件
        if [ -d "skia/modules" ]; then
          find skia/modules -name "*.h" -o -name "*.hpp" | while read file; do
            relative_path=$(realpath --relative-to=skia/modules "$file")
            mkdir -p "output/Skia/include/modules/$(dirname "$relative_path")"
            cp "$file" "output/Skia/include/modules/$relative_path"
          done
        fi

    - name: 收集Dawn头文件和生成文件
      run: |
        # 复制Dawn原生头文件
        cp -r dawn/include/* output/Skia/include/dawn/
        # 复制Dawn生成的头文件
        if [ -d "dawn/out/Release-${{ matrix.arch }}/gen/include" ]; then
          cp -r dawn/out/Release-${{ matrix.arch }}/gen/include/* output/Skia/include/dawn/
        fi
        # 复制WebGPU头文件
        if [ -d "dawn/out/Release-${{ matrix.arch }}/gen/webgpu-headers" ]; then
          cp -r dawn/out/Release-${{ matrix.arch }}/gen/webgpu-headers/* output/Skia/include/
        fi

    - name: 收集库文件
      run: |
        # 复制Skia库文件
        cp skia/out/Release-${{ matrix.arch }}/libskia.a output/Skia/lib/Linux/${{ matrix.arch }}/
        # 复制Dawn库文件
        find dawn/out/Release-${{ matrix.arch }}/ -name "*.a" -exec cp {} output/Skia/lib/Linux/${{ matrix.arch }}/ \;

    - name: 收集Dawn生成的源文件
      run: |
        # 复制生成的源文件
        if [ -d "dawn/out/Release-${{ matrix.arch }}/gen/src" ]; then
          cp -r dawn/out/Release-${{ matrix.arch }}/gen/src/* output/Skia/src/dawn/gen/
        fi

    - name: 上传Linux构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-linux-${{ matrix.arch }}
        path: output/

  build-android:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [arm64, x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d

    - name: 安装构建依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-18 \
          ninja-build \
          python3-pip \
          pkg-config

    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH

    - name: 克隆Skia源码
      run: |
        git clone --branch ${{ env.SKIA_VERSION }} --single-branch https://skia.googlesource.com/skia.git skia
        cd skia
        python3 tools/git-sync-deps

    - name: 克隆Dawn源码
      run: |
        git clone --branch ${{ env.DAWN_VERSION }} --single-branch https://dawn.googlesource.com/dawn.git dawn
        cd dawn
        cp scripts/standalone.gclient .gclient
        gclient sync

    - name: 设置架构变量
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          echo "ANDROID_ARCH=arm64" >> $GITHUB_ENV
          echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
        else
          echo "ANDROID_ARCH=x64" >> $GITHUB_ENV
          echo "ANDROID_ABI=x86_64" >> $GITHUB_ENV
        fi

    - name: 配置Skia构建参数 (Android)
      run: |
        cd skia
        # 配置Android构建支持Vulkan和GLES
        bin/gn gen out/Release-android-${{ matrix.arch }} --args='
          is_official_build=true
          is_debug=false
          target_os="android"
          target_cpu="${{ env.ANDROID_ARCH }}"
          ndk="${{ env.ANDROID_NDK_ROOT }}"
          android_api_level=24
          skia_use_dawn=true
          skia_use_gl=true
          skia_use_vulkan=true
          skia_use_dng_sdk=false
          skia_use_expat=true
          skia_use_fontconfig=false
          skia_use_freetype=true
          skia_use_harfbuzz=true
          skia_use_icu=true
          skia_use_libjpeg_turbo_encode=true
          skia_use_libjpeg_turbo_decode=true
          skia_use_libpng_encode=true
          skia_use_libpng_decode=true
          skia_use_libwebp_encode=true
          skia_use_libwebp_decode=true
          skia_use_zlib=true
          skia_enable_gpu=true
          skia_enable_tools=false
          skia_enable_skottie=true
          dawn_path="../dawn"
          skia_compile_processors=true
        '

    - name: 配置Dawn构建参数 (Android)
      run: |
        cd dawn
        # 配置Dawn Android构建参数
        mkdir -p out/Release-android-${{ matrix.arch }}
        cat > out/Release-android-${{ matrix.arch }}/args.gn << EOF
        import("//build_overrides/build.gni")
        
        target_os = "android"
        target_cpu = "${{ env.ANDROID_ARCH }}"
        android_ndk_root = "${{ env.ANDROID_NDK_ROOT }}"
        android_api_level = 24
        is_debug = false
        is_official_build = true
        is_clang = true
        dawn_enable_vulkan = true
        dawn_enable_opengles = true
        dawn_use_glfw = false
        dawn_use_x11 = false
        dawn_build_samples = false
        dawn_build_node_bindings = false
        dawn_enable_wgsl = true
        tint_build_tests = false
        dawn_complete_static_libs = true
        dawn_enable_error_injection = false
        EOF
        
        gn gen out/Release-android-${{ matrix.arch }}

    - name: 构建Dawn库
      run: |
        cd dawn
        ninja -C out/Release-android-${{ matrix.arch }} dawn_native dawn_proc dawn_wire dawn_utils dawncpp_headers webgpu_headers dawn_common tint

    - name: 构建Skia库
      run: |
        cd skia
        ninja -C out/Release-android-${{ matrix.arch }} skia modules

    - name: 创建输出目录结构并收集文件
      run: |
        mkdir -p output/Skia/include/core
        mkdir -p output/Skia/include/dawn
        mkdir -p output/Skia/include/modules
        mkdir -p output/Skia/bin/Android/${{ matrix.arch }}
        mkdir -p output/Skia/lib/Android/${{ matrix.arch }}
        mkdir -p output/Skia/src/dawn/gen
        
        # 复制Skia头文件
        cp -r skia/include/* output/Skia/include/core/
        # 复制模块头文件
        if [ -d "skia/modules" ]; then
          find skia/modules -name "*.h" -o -name "*.hpp" | while read file; do
            relative_path=$(realpath --relative-to=skia/modules "$file")
            mkdir -p "output/Skia/include/modules/$(dirname "$relative_path")"
            cp "$file" "output/Skia/include/modules/$relative_path"
          done
        fi
        # 复制Dawn头文件
        cp -r dawn/include/* output/Skia/include/dawn/
        if [ -d "dawn/out/Release-android-${{ matrix.arch }}/gen/include" ]; then
          cp -r dawn/out/Release-android-${{ matrix.arch }}/gen/include/* output/Skia/include/dawn/
        fi
        # 复制库文件
        cp skia/out/Release-android-${{ matrix.arch }}/libskia.a output/Skia/lib/Android/${{ matrix.arch }}/
        find dawn/out/Release-android-${{ matrix.arch }}/ -name "*.a" -exec cp {} output/Skia/lib/Android/${{ matrix.arch }}/ \;
        # 收集Dawn生成的源文件
        if [ -d "dawn/out/Release-android-${{ matrix.arch }}/gen/src" ]; then
          cp -r dawn/out/Release-android-${{ matrix.arch }}/gen/src/* output/Skia/src/dawn/gen/
        fi

    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-android-${{ matrix.arch }}
        path: output/

  package:
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: 合并构建产物
      run: |
        mkdir -p final/Skia
        # 合并所有平台的构建产物
        for artifact in artifacts/*/; do
          if [ -d "$artifact/Skia" ]; then
            cp -r "$artifact/Skia"/* final/Skia/
          fi
        done

    - name: 创建CMakeLists.txt配置文件
      run: |
        cat > final/Skia/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.20)
        project(Skia LANGUAGES CXX)

        # 设置C++20标准
        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # 检测平台和架构
        if(WIN32)
            set(PLATFORM_DIR "Win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        elseif(ANDROID)
            set(PLATFORM_DIR "Android")
            if(ANDROID_ABI STREQUAL "arm64-v8a")
                set(ARCH_DIR "arm64")
            elseif(ANDROID_ABI STREQUAL "x86_64")
                set(ARCH_DIR "x64")
            endif()
        else()
            set(PLATFORM_DIR "Linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        endif()

        # 设置库和二进制文件路径
        set(LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
        set(BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

        # 创建Skia主目标
        add_library(Skia STATIC IMPORTED GLOBAL)

        # 设置包含目录
        target_include_directories(Skia INTERFACE
            ${CMAKE_CURRENT_SOURCE_DIR}/include/core
            ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
            ${CMAKE_CURRENT_SOURCE_DIR}/include/modules
        )

        # 设置Skia库文件路径
        if(WIN32)
            set_target_properties(Skia PROPERTIES
                IMPORTED_LOCATION "${LIB_DIR}/skia.lib"
            )
        else()
            set_target_properties(Skia PROPERTIES
                IMPORTED_LOCATION "${LIB_DIR}/libskia.a"
            )
        endif()

        # 创建Dawn动态生成库目标
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/dawn/gen")
            # 收集Dawn生成的源文件
            file(GLOB_RECURSE DAWN_GEN_SOURCES
                "${CMAKE_CURRENT_SOURCE_DIR}/src/dawn/gen/*.cpp"
                "${CMAKE_CURRENT_SOURCE_DIR}/src/dawn/gen/*.cc"
                "${CMAKE_CURRENT_SOURCE_DIR}/src/dawn/gen/*.c"
            )
            
            if(DAWN_GEN_SOURCES)
                # 创建Dawn动态生成源文件库
                add_library(DawnDym STATIC ${DAWN_GEN_SOURCES})
                
                target_include_directories(DawnDym PUBLIC
                    ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
                    ${CMAKE_CURRENT_SOURCE_DIR}/src/dawn/gen
                )
                
                target_compile_features(DawnDym PUBLIC cxx_std_20)
                
                # 链接Dawn动态库到Skia
                target_link_libraries(Skia INTERFACE DawnDym)
            endif()
        endif()

        # 链接Dawn静态库
        if(WIN32)
            # Windows下的Dawn相关库
            file(GLOB DAWN_LIBS 
                "${LIB_DIR}/dawn*.lib" 
                "${LIB_DIR}/webgpu*.lib" 
                "${LIB_DIR}/tint*.lib"
                "${LIB_DIR}/dawn_*.lib"
            )
            if(DAWN_LIBS)
                target_link_libraries(Skia INTERFACE ${DAWN_LIBS})
            endif()
            
            # Windows系统库
            target_link_libraries(Skia INTERFACE
                d3d11 d3d12 dxgi dxguid
                opengl32 glu32
                vulkan-1
                user32 gdi32 advapi32
            )
        elseif(ANDROID)
            # Android下的Dawn相关库
            file(GLOB DAWN_LIBS 
                "${LIB_DIR}/libdawn*.a" 
                "${LIB_DIR}/libwebgpu*.a" 
                "${LIB_DIR}/libtint*.a"
                "${LIB_DIR}/libdawn_*.a"
            )
            if(DAWN_LIBS)
                target_link_libraries(Skia INTERFACE ${DAWN_LIBS})
            endif()
            
            # Android系统库
            target_link_libraries(Skia INTERFACE
                GLESv2 EGL
                vulkan
                android log
            )
        else()
            # Linux下的Dawn相关库
            file(GLOB DAWN_LIBS 
                "${LIB_DIR}/libdawn*.a" 
                "${LIB_DIR}/libwebgpu*.a" 
                "${LIB_DIR}/libtint*.a"
                "${LIB_DIR}/libdawn_*.a"
            )
            if(DAWN_LIBS)
                target_link_libraries(Skia INTERFACE ${DAWN_LIBS})
            endif()
            
            # Linux系统库
            target_link_libraries(Skia INTERFACE
                GL GLU
                vulkan
                X11 Xext Xrandr Xinerama Xcursor Xi
                pthread dl
                fontconfig freetype
            )
        endif()

        # 设置编译定义
        target_compile_definitions(Skia INTERFACE
            SK_RELEASE=1
            SK_ENABLE_SKSL=1
            SK_GAMMA_APPLY_TO_A8=1
            SK_ALLOW_STATIC_GLOBAL_INITIALIZERS=1
            SK_SUPPORT_GPU=1
            SK_SUPPORT_OPENCL=0
            SK_FORCE_DISTANCE_FIELD_TEXT=0
        )

        # 根据平台设置特定编译定义
        if(WIN32)
            target_compile_definitions(Skia INTERFACE
                SK_BUILD_FOR_WIN=1
                SK_SUPPORT_PDF=1
                DAWN_ENABLE_BACKEND_D3D11=1
                DAWN_ENABLE_BACKEND_D3D12=1
                DAWN_ENABLE_BACKEND_VULKAN=1
                DAWN_ENABLE_BACKEND_OPENGL=1
                NOMINMAX
                WIN32_LEAN_AND_MEAN
            )
        elseif(ANDROID)
            target_compile_definitions(Skia INTERFACE
                SK_BUILD_FOR_ANDROID=1
                DAWN_ENABLE_BACKEND_VULKAN=1
                DAWN_ENABLE_BACKEND_OPENGLES=1
            )
        else()
            target_compile_definitions(Skia INTERFACE
                SK_BUILD_FOR_UNIX=1
                SK_R32_SHIFT=16
                DAWN_ENABLE_BACKEND_VULKAN=1
                DAWN_ENABLE_BACKEND_OPENGL=1
            )
        endif()

        # 导出目标以供其他项目使用
        export(TARGETS Skia FILE SkiaTargets.cmake)
        
        # 提供查找包支持
        include(CMakePackageConfigHelpers)
        write_basic_package_version_file(
            SkiaConfigVersion.cmake
            VERSION 1.0.0
            COMPATIBILITY SameMajorVersion
        )
        
        configure_package_config_file(
            ${CMAKE_CURRENT_SOURCE_DIR}/SkiaConfig.cmake.in
            ${CMAKE_CURRENT_BINARY_DIR}/SkiaConfig.cmake
            INSTALL_DESTINATION lib/cmake/Skia
        )
        EOF

    - name: 创建包配置模板文件
      run: |
        cat > final/Skia/SkiaConfig.cmake.in << 'EOF'
        @PACKAGE_INIT@

        include("${CMAKE_CURRENT_LIST_DIR}/SkiaTargets.cmake")

        check_required_components(Skia)
        EOF

    - name: 创建最终压缩包
      run: |
        cd final
        zip -r Skia.zip Skia/

    - name: 上传最终构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia
        path: final/Skia.zip

    - name: 创建发布版本
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Skia与Dawn预编译库 v${{ github.run_number }}
        body: |
          # Skia与Dawn预编译库

          此发布包含了支持多平台和多后端的Skia预编译库，完整集成了Dawn WebGPU实现。

          ## 支持的平台和后端

          ### Windows (x64)
          - DirectX 11
          - DirectX 12  
          - Vulkan
          - OpenGL
          - 编译器: MSVC 2022, Clang 18

          ### Linux Ubuntu 24.04 (x64)
          - Vulkan
          - OpenGL
          - 编译器: GCC 13, Clang 18

          ### Android (arm64, x64)
          - Vulkan
          - OpenGL ES (EGL)
          - 编译器: Clang 18

          ## 使用方法

          1. 解压 `Skia.zip`
          2. 在你的CMake项目中添加:
             ```cmake
             add_subdirectory(path/to/Skia)
             target_link_libraries(your_target Skia)
             ```

          ## 目录结构

          ```
          Skia/
          ├── include/
          │   ├── core/          # Skia核心头文件
          │   ├── dawn/          # Dawn头文件（包含生成的头文件）
          │   └── modules/       # Skia模块头文件
          ├── lib/
          │   ├── Win/x64/       # Windows库文件
          │   ├── Linux/x64/     # Linux库文件
          │   └── Android/       # Android库文件
          ├── src/
          │   └── dawn/gen/      # Dawn动态生成的源文件
          └── CMakeLists.txt     # CMake配置文件
          ```

          ## 技术规格
          - 编译配置: RelWithDebugInfo
          - C++标准: C++20
          - 集成Dawn WebGPU支持
          - 包含所有必要的动态生成源文件

          ## 修复内容
          - 修复了Windows下emsdk激活失败的问题
          - 优化了Dawn生成文件的收集逻辑
          - 改进了CMake配置的跨平台兼容性
        files: |
          final/Skia.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
