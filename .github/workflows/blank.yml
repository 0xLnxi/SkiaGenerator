# Skia + Dawn 全平台构建工作流（极限存储优化版）
name: 编译 Skia + Dawn 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

env:
  # 统一构建类型为RelWithDebInfo
  BUILD_TYPE: RelWithDebInfo

jobs:
  # Windows平台单独构建（存储空间相对充足）
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          - platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            compiler: msvc2022

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 显示磁盘使用情况
    - name: 显示磁盘使用情况
      run: |
        echo "Windows磁盘使用情况："
        Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, Size, FreeSpace
        
    # 设置Python环境
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      run: |
        # 安装ninja构建工具
        choco install ninja -y --no-progress
        # 安装LLVM 18用于Clang编译器
        choco install llvm --version=18.1.8 --force -y --no-progress
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    # 设置Visual Studio环境
    - name: 设置Visual Studio环境
      uses: microsoft/setup-msbuild@v2
      
    # 获取depot_tools（轻量级）
    - name: 获取depot_tools
      run: |
        git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码（最小化）
    - name: 获取Skia源代码
      run: |
        $env:PATH = "${{ github.workspace }}\depot_tools;" + $env:PATH
        
        # 创建最小化的gclient配置
        @"
        solutions = [
          {
            "name": "skia",
            "url": "https://skia.googlesource.com/skia.git",
            "deps_file": "DEPS",
            "managed": False,
            "custom_deps": {
              "skia/third_party/externals/angle2": None,
              "skia/third_party/externals/dawn": None,
            },
            "custom_vars": {
              "skia_use_dawn": True,
            },
          },
        ]
        "@ | Out-File -FilePath .gclient -Encoding utf8
        
        # 浅克隆Skia
        gclient sync --no-history --shallow --jobs=2
      shell: powershell
      
    # 获取Dawn源代码（Windows专用最小化）
    - name: 获取Dawn源代码
      run: |
        # 浅克隆Dawn主仓库
        git clone --depth=1 https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        # 最小化获取依赖，跳过不必要的组件
        python tools/fetch_dawn_dependencies.py --skip-chrome-binary-sdk
      shell: powershell
      
    # 配置Dawn构建参数（Windows优化）
    - name: 配置Dawn构建参数
      run: |
        cd dawn-source
        mkdir build-${{ matrix.platform }}
        cd build-${{ matrix.platform }}
        
        # Windows平台使用MSVC 2022，最小化构建
        cmake .. -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DDAWN_BUILD_SAMPLES=OFF `
          -DDAWN_BUILD_TESTS=OFF `
          -DDAWN_BUILD_BENCHMARKS=OFF `
          -DDAWN_BUILD_FUZZERS=OFF `
          -DDAWN_ENABLE_D3D11=ON `
          -DDAWN_ENABLE_D3D12=ON `
          -DDAWN_ENABLE_VULKAN=ON `
          -DDAWN_ENABLE_OPENGL=ON `
          -DCMAKE_CXX_STANDARD=20 `
          -DDAWN_USE_BUILT_DXC=ON `
          -DDAWN_ENABLE_INSTALL=OFF `
          -DDAWN_ENABLE_PIC=OFF
      shell: powershell
      
    # 编译Dawn（Windows）
    - name: 编译Dawn
      run: |
        cd dawn-source\build-${{ matrix.platform }}
        # Windows平台使用MSBuild，只编译核心库
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 2 --target dawn_headers --target dawn_cpp --target webgpu_dawn
        
        Write-Host "✅ Dawn编译完成"
        
        # 立即清理构建临时文件
        Get-ChildItem -Recurse -Include "*.obj" | Remove-Item -Force
        Get-ChildItem -Recurse -Include "CMakeFiles" | Remove-Item -Recurse -Force
      shell: powershell
      
    # 配置Skia构建参数（Windows）
    - name: 配置Skia构建参数
      run: |
        cd skia
        $env:PATH = "${{ github.workspace }}\depot_tools;" + $env:PATH
        
        # 最小化同步依赖
        python tools/git-sync-deps
        
        # 基础构建参数设置
        $args = "is_official_build=false"
        $args += " is_debug=false"
        $args += " extra_cflags=[\`"/O2\`", \`"/Zi\`"]"
        $args += " skia_use_dawn=true"
        $args += " skia_dawn_dir=\`"../dawn-source\`""
        
        # 禁用不必要的功能
        $args += " skia_use_system_expat=false"
        $args += " skia_use_system_icu=false"
        $args += " skia_use_system_libjpeg_turbo=false"
        $args += " skia_use_system_libpng=false"
        $args += " skia_use_system_libwebp=false"
        $args += " skia_use_system_zlib=false"
        
        # 启用核心功能
        $args += " skia_enable_pdf=true"
        $args += " skia_enable_skottie=true"
        $args += " skia_enable_skshaper=true"
        $args += " skia_enable_svg=true"
        $args += " skia_use_icu=true"
        
        # 启用GPU后端支持
        $args += " skia_enable_gpu=true"
        $args += " skia_use_gl=true"
        $args += " skia_use_vulkan=true"
        $args += " skia_enable_spirv_validation=false"
        
        # 禁用工具构建和测试
        $args += " skia_enable_tools=false"
        $args += " skia_build_fuzzers=false"
        $args += " skia_enable_sksl_test=false"
        
        # Windows平台特定配置
        $args += " skia_use_angle=true"
        $args += " skia_use_direct3d=true"
        $args += " skia_use_freetype=true"
        $args += " skia_use_system_freetype2=false"
        $args += " skia_use_harfbuzz=true"
        $args += " skia_use_system_harfbuzz=false"
        $args += " cc=\`"clang\`""
        $args += " cxx=\`"clang++\`""
        $args += " clang_win=\`"C:/Program Files/LLVM\`""
        
        # 设置目标平台和架构
        $args += " target_os=\`"win\`""
        $args += " target_cpu=\`"x64\`""
        
        echo "BUILD_ARGS=$args" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell
      
    # 生成Skia构建文件（Windows）
    - name: 生成Skia构建文件
      run: |
        cd skia
        $env:PATH = "${{ github.workspace }}\depot_tools;" + $env:PATH
        Write-Host "正在为Windows平台生成Skia构建文件..."
        .\bin\gn gen out\Release --args="$env:BUILD_ARGS"
        Write-Host "Skia构建配置完成"
      shell: powershell
      
    # 编译Skia（Windows）
    - name: 编译Skia
      run: |
        cd skia
        $env:PATH = "${{ github.workspace }}\depot_tools;" + $env:PATH
        Write-Host "开始编译Windows平台的Skia..."
        
        # 使用较少的并行线程
        ninja -C out\Release -j2
        
        Write-Host "✅ Windows平台Skia编译完成"
        
        # 立即清理构建临时文件
        Get-ChildItem -Path out\Release -Recurse -Include "*.obj" | Remove-Item -Force
        Get-ChildItem -Path out\Release -Recurse -Include "*.d" | Remove-Item -Force
      shell: powershell
      
    # 创建Windows发布包
    - name: 创建Windows发布包
      run: |
        # 创建输出目录结构
        New-Item -ItemType Directory -Path "Skia\include\core" -Force
        New-Item -ItemType Directory -Path "Skia\include\dawn" -Force
        New-Item -ItemType Directory -Path "Skia\include\modules" -Force
        New-Item -ItemType Directory -Path "Skia\lib\win\x64" -Force
        New-Item -ItemType Directory -Path "Skia\bin\win\x64" -Force
        
        # 复制Skia头文件
        Copy-Item -Path "skia\include\*" -Destination "Skia\include\core\" -Recurse -Force
        
        # 复制Dawn头文件和生成文件
        Copy-Item -Path "dawn-source\include\*" -Destination "Skia\include\dawn\" -Recurse -Force
        if (Test-Path "dawn-source\build-${{ matrix.platform }}\gen\include\dawn") {
            Copy-Item -Path "dawn-source\build-${{ matrix.platform }}\gen\include\dawn\*" -Destination "Skia\include\dawn\" -Recurse -Force
        }
        if (Test-Path "dawn-source\build-${{ matrix.platform }}\gen\include\webgpu") {
            Copy-Item -Path "dawn-source\build-${{ matrix.platform }}\gen\include\webgpu\*" -Destination "Skia\include\dawn\" -Recurse -Force
        }
        
        # 复制库文件
        Get-ChildItem -Path "skia\out\Release" -Filter "*.lib" | Copy-Item -Destination "Skia\lib\win\x64\"
        Get-ChildItem -Path "dawn-source\build-${{ matrix.platform }}\${{ env.BUILD_TYPE }}" -Filter "*.lib" -ErrorAction SilentlyContinue | Copy-Item -Destination "Skia\lib\win\x64\"
        
        Write-Host "✅ Windows构建包创建完成"
      shell: powershell
      
    # 生成CMakeLists.txt文件（Windows）
    - name: 生成CMakeLists.txt
      run: |
        $cmakeContent = @"
# Skia + Dawn 图形库的CMake配置文件（Windows版）
cmake_minimum_required(VERSION 3.20)

project(SkiaDawnPrebuilt
    VERSION 1.0.0
    DESCRIPTION "Skia + Dawn WebGPU 预编译库"
    LANGUAGES CXX C
)

# 设置C++标准
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 获取当前目录
get_filename_component(SKIA_ROOT_DIR "`${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

# 检测平台和架构
if(WIN32)
    set(PLATFORM_DIR "win")
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(ARCH_DIR "x64")
    else()
        set(ARCH_DIR "x86")
    endif()
endif()

# 设置库文件路径
set(LIB_DIR "`${SKIA_ROOT_DIR}/lib/`${PLATFORM_DIR}/`${ARCH_DIR}")

# 创建DawnDynamic接口库
add_library(DawnDynamic INTERFACE)

# 设置Dawn包含目录
target_include_directories(DawnDynamic INTERFACE
    `$<BUILD_INTERFACE:`${SKIA_ROOT_DIR}/include/dawn>
    `$<INSTALL_INTERFACE:include/dawn>
)

# 查找Dawn库文件
file(GLOB DAWN_LIBS 
    "`${LIB_DIR}/*dawn*.lib" 
    "`${LIB_DIR}/*webgpu*.lib"
)

if(DAWN_LIBS)
    target_link_libraries(DawnDynamic INTERFACE `${DAWN_LIBS})
endif()

# 创建Skia主目标
add_library(Skia INTERFACE)
add_library(skia::skia ALIAS Skia)

# 设置Skia包含目录
target_include_directories(Skia INTERFACE
    `$<BUILD_INTERFACE:`${SKIA_ROOT_DIR}/include/core>
    `$<BUILD_INTERFACE:`${SKIA_ROOT_DIR}/include/dawn>
    `$<BUILD_INTERFACE:`${SKIA_ROOT_DIR}/include/modules>
    `$<INSTALL_INTERFACE:include/core>
    `$<INSTALL_INTERFACE:include/dawn>
    `$<INSTALL_INTERFACE:include/modules>
)

# 查找Skia库文件
file(GLOB SKIA_LIBS 
    "`${LIB_DIR}/*skia*.lib"
)

if(SKIA_LIBS)
    target_link_libraries(Skia INTERFACE `${SKIA_LIBS})
endif()

# 链接Dawn到Skia
target_link_libraries(Skia INTERFACE DawnDynamic)

# Windows平台链接库
if(WIN32)
    target_link_libraries(Skia INTERFACE
        # DirectX相关
        d3d11 d3d12 dxgi dxguid d3dcompiler
        # OpenGL相关
        opengl32
        # Vulkan相关
        vulkan-1
        # 系统库
        gdi32 user32 kernel32 ole32 oleaut32 uuid advapi32 shell32
        # 字体和文本
        usp10
        # 网络
        ws2_32
    )
    
    target_compile_definitions(Skia INTERFACE
        SK_GANESH=1 SK_VULKAN=1 SK_GL=1 SK_DIRECT3D=1 SK_DAWN=1
        WIN32_LEAN_AND_MEAN NOMINMAX
    )
endif()

# 设置编译特性
target_compile_features(Skia INTERFACE cxx_std_20)

# 导出目标
export(TARGETS Skia DawnDynamic FILE SkiaTargets.cmake)
"@
        
        $cmakeContent | Out-File -FilePath "Skia\CMakeLists.txt" -Encoding utf8
        
        # 创建构建信息文件
        $buildInfo = @"
Skia + Dawn 构建信息（Windows版）
===============================
平台: Windows
架构: x64
构建模式: ${{ env.BUILD_TYPE }}
编译器: MSVC 2022 + Clang 18
C++标准: C++20

支持的图形后端:
- DirectX 11/12
- Vulkan
- OpenGL
- Dawn WebGPU

特别说明:
- 存储优化版本，仅包含核心功能
- Dawn WebGPU完全集成
- 生产环境就绪
- CMake完全支持
"@
        
        $buildInfo | Out-File -FilePath "Skia\BUILD_INFO.txt" -Encoding utf8
      shell: powershell
      
    # 打包Windows构建产物
    - name: 打包Windows构建产物
      run: |
        Compress-Archive -Path "Skia\*" -DestinationPath "${{ matrix.platform }}.zip" -CompressionLevel Optimal
        Write-Host "✅ ${{ matrix.platform }}.zip 构建包创建完成"
        Get-ChildItem -Name "*.zip" | ForEach-Object { Get-Item $_ | Select-Object Name, Length }
      shell: powershell
      
    # 上传Windows构建产物
    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: ${{ matrix.platform }}.zip
        retention-days: 7
        compression-level: 0

  # Linux平台构建（超级优化版）
  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            compiler: clang18

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 极限清理磁盘空间
    - name: 极限清理磁盘空间
      run: |
        echo "清理前磁盘使用情况："
        df -h
        
        # 停止不必要的服务
        sudo systemctl stop docker
        sudo systemctl stop mysql
        sudo systemctl stop postgresql
        
        # 删除大型软件包和工具链
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y '^clang-.*'
        sudo apt-get remove -y azure-cli
        sudo apt-get remove -y google-cloud-cli
        sudo apt-get remove -y firefox
        sudo apt-get remove -y google-chrome-stable
        sudo apt-get remove -y microsoft-edge-stable
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        
        # 删除大型目录
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/local/graalvm
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/share/firefox
        sudo rm -rf /usr/share/gradle
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /root/.cache
        sudo rm -rf /home/runner/.cache
        
        # 清理Docker相关
        sudo rm -rf /var/lib/docker
        
        # 清理系统日志
        sudo journalctl --vacuum-time=1d
        
        # 清理临时文件
        sudo rm -rf /tmp/*
        sudo rm -rf /var/tmp/*
        
        echo "清理后磁盘使用情况："
        df -h
        
    # 设置Python环境
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # 安装Linux系统依赖（最小化）
    - name: 安装Linux系统依赖
      run: |
        sudo apt-get update
        # 只安装绝对必要的包
        sudo apt-get install -y --no-install-recommends \
          build-essential ninja-build cmake \
          clang-18 \
          libgl1-mesa-dev libvulkan-dev \
          libx11-dev
          
        # 设置编译器
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        
    # 获取depot_tools（超轻量级）
    - name: 获取depot_tools
      run: |
        git clone --depth=1 --single-branch https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        
    # 获取最小化的Skia源代码
    - name: 获取最小化Skia源代码
      run: |
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        
        # 创建最小化配置
        cat > .gclient << 'EOF'
        solutions = [
          {
            "name": "skia",
            "url": "https://skia.googlesource.com/skia.git",
            "deps_file": "DEPS",
            "managed": False,
            "custom_deps": {
              "skia/third_party/externals/angle2": None,
              "skia/third_party/externals/dawn": None,
              "skia/third_party/externals/dng_sdk": None,
              "skia/third_party/externals/piex": None,
            },
            "custom_vars": {
              "skia_use_dawn": False,
            },
          },
        ]
        EOF
        
        # 超浅克隆
        gclient sync --no-history --shallow --jobs=1 --delete_unversioned_trees
        
    # 获取超精简Dawn源代码
    - name: 获取超精简Dawn源代码  
      run: |
        # 只克隆Dawn核心，不获取子模块
        git clone --depth=1 --no-recurse-submodules https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        
        # 只获取绝对必要的子模块
        git submodule update --init --depth=1 third_party/abseil-cpp
        git submodule update --init --depth=1 third_party/khronos
        
    # 立即清理源码
    - name: 立即清理源码
      run: |
        # 删除所有测试文件和资源
        find . -name "*test*" -type f -name "*.cpp" -delete 2>/dev/null || true
        find . -name "*test*" -type f -name "*.cc" -delete 2>/dev/null || true
        find . -name "*test*" -type f -name "*.h" -delete 2>/dev/null || true
        find . -name "*.png" -size +50k -delete 2>/dev/null || true
        find . -name "*.jpg" -size +50k -delete 2>/dev/null || true
        find . -name "*.webp" -size +50k -delete 2>/dev/null || true
        find . -name "*.gif" -size +50k -delete 2>/dev/null || true
        
        # 删除示例和文档
        rm -rf skia/resources/images 2>/dev/null || true
        rm -rf skia/resources/sksl 2>/dev/null || true
        rm -rf skia/docs 2>/dev/null || true
        rm -rf skia/bench 2>/dev/null || true
        rm -rf skia/gm 2>/dev/null || true
        rm -rf dawn-source/docs 2>/dev/null || true
        
        echo "源码清理完成"
        df -h
        
    # 配置Dawn构建（超精简）
    - name: 配置Dawn构建
      run: |
        cd dawn-source
        mkdir -p build-minimal
        cd build-minimal
        
        # 最小化CMake配置
        cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=clang-18 \
          -DCMAKE_CXX_COMPILER=clang++-18 \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DDAWN_BUILD_TESTS=OFF \
          -DDAWN_BUILD_BENCHMARKS=OFF \
          -DDAWN_BUILD_FUZZERS=OFF \
          -DDAWN_BUILD_NODE_BINDINGS=OFF \
          -DDAWN_ENABLE_VULKAN=ON \
          -DDAWN_ENABLE_OPENGL=ON \
          -DDAWN_ENABLE_INSTALL=OFF \
          -DDAWN_ENABLE_PIC=OFF \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG"
          
    # 编译Dawn（仅核心库）
    - name: 编译Dawn核心库
      run: |
        cd dawn-source/build-minimal
        
        # 只编译最核心的目标
        ninja -j1 dawn_headers dawn_cpp
        
        echo "✅ Dawn核心库编译完成"
        df -h || true
        
    # 配置Skia构建（超精简）
    - name: 配置Skia构建
      run: |
        cd skia
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        
        # 最小化同步
        python3 tools/git-sync-deps
        
        # 超精简构建参数
        args="is_official_build=false"
        args="$args is_debug=false"
        args="$args extra_cflags=[\"-O2\", \"-DNDEBUG\"]"
        args="$args skia_use_dawn=false"
        
        # 禁用所有可选功能
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        args="$args skia_use_system_freetype2=false"
        args="$args skia_use_system_harfbuzz=false"
        
        # 只启用核心GPU功能
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        
        # 禁用所有非必要功能
        args="$args skia_enable_pdf=false"
        args="$args skia_enable_skottie=false"
        args="$args skia_enable_skshaper=false"
        args="$args skia_enable_svg=false"
        args="$args skia_use_icu=false"
        args="$args skia_enable_tools=false"
        args="$args skia_build_fuzzers=false"
        args="$args skia_enable_fontmgr_empty=true"
        args="$args skia_use_freetype=false"
        args="$args skia_use_fontconfig=false"
        args="$args skia_use_harfbuzz=false"
        
        # Linux平台配置
        args="$args skia_use_x11=true"
        args="$args cc=\"clang-18\""
        args="$args cxx=\"clang++-18\""
        args="$args target_os=\"linux\""
        args="$args target_cpu=\"x64\""
        
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
        
    # 生成Skia构建文件
    - name: 生成Skia构建文件
      run: |
        cd skia
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        echo "正在生成Linux平台Skia构建文件..."
        bin/gn gen out/Release --args="$BUILD_ARGS"
        echo "构建配置完成"
        df -h || true
        
    # 编译Skia（超保守）
    - name: 编译Skia
      run: |
        cd skia
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        echo "开始编译Linux平台Skia（精简版）..."
        
        # 使用单线程编译以节省内存
        ninja -C out/Release -j1
        
        echo "✅ Linux平台Skia编译完成"
        
        # 立即清理
        find out/Release -name "*.o" -delete 2>/dev/null || true
        find out/Release -name "*.d" -delete 2>/dev/null || true
        df -h || true
        
    # 创建Linux发布包（精简版）
    - name: 创建Linux发布包
      run: |
        mkdir -p Skia/include/core
        mkdir -p Skia/include/dawn
        mkdir -p Skia/lib/linux/x64
        
        # 只复制核心头文件
        cp -r skia/include/* Skia/include/core/
        
        # 复制Dawn头文件（如果存在）
        cp -r dawn-source/include/* Skia/include/dawn/ 2>/dev/null || true
        
        # 复制库文件
        find skia/out/Release -name "*.a" -exec cp {} Skia/lib/linux/x64/ \; 2>/dev/null || true
        find dawn-source/build-minimal -name "*.a" -exec cp {} Skia/lib/linux/x64/ \; 2>/dev/null || true
        
        # 创建简化的CMakeLists.txt
        cat > Skia/CMakeLists.txt << 'EOF'
# Skia 精简版CMake配置（Linux）
cmake_minimum_required(VERSION 3.20)

project(SkiaLinux VERSION 1.0.0 LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

add_library(Skia INTERFACE)
add_library(skia::skia ALIAS Skia)

target_include_directories(Skia INTERFACE
    $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/core>
    $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/dawn>
    $<INSTALL_INTERFACE:include/core>
    $<INSTALL_INTERFACE:include/dawn>
)

file(GLOB SKIA_LIBS "${SKIA_ROOT_DIR}/lib/linux/x64/*.a")
if(SKIA_LIBS)
    target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
endif()

target_link_libraries(Skia INTERFACE GL X11 pthread dl m)

target_compile_definitions(Skia INTERFACE
    SK_GANESH=1 SK_VULKAN=1 SK_GL=1
)

target_compile_features(Skia INTERFACE cxx_std_20)
EOF
        
        echo "✅ Linux精简版构建包创建完成"
        df -h || true
        
    # 打包Linux构建产物
    - name: 打包Linux构建产物
      run: |
        zip -9 -r "${{ matrix.platform }}.zip" Skia/
        echo "✅ ${{ matrix.platform }}.zip 构建包创建完成"
        ls -lh ${{ matrix.platform }}.zip
        
        # 清理所有临时文件
        rm -rf Skia/ skia/ dawn-source/ depot_tools/
        df -h || true
        
    # 上传Linux构建产物
    - name: 上传Linux构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: ${{ matrix.platform }}.zip
        retention-days: 7
        compression-level: 0

  # Android平台构建（最保守版本）
  build-android:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21
            compiler: clang18

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 极限清理磁盘空间（Android版）
    - name: 极限清理磁盘空间
      run: |
        echo "清理前磁盘使用情况："
        df -h
        
        # 执行最激进的清理
        sudo systemctl stop docker mysql postgresql
        sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' '^clang-.*' azure-cli google-cloud-cli firefox google-chrome-stable microsoft-edge-stable
        sudo apt-get autoremove -y && sudo apt-get autoclean
        
        # 删除所有大型目录
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache /usr/local/share/boost /usr/local/graalvm /usr/local/share/chromium /usr/local/share/firefox /usr/share/gradle /usr/local/lib/node_modules /root/.cache /home/runner/.cache /var/lib/docker
        
        # 清理系统
        sudo journalctl --vacuum-time=1d
        sudo rm -rf /tmp/* /var/tmp/*
        
        echo "清理后磁盘使用情况："
        df -h
        
    # 设置Python环境
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # 设置Android NDK（轻量级）
    - name: 设置Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        
    # 安装最小化依赖
    - name: 安装最小化依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends build-essential ninja-build cmake clang-18
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        
    # 获取超精简depot_tools
    - name: 获取超精简depot_tools
      run: |
        git clone --depth=1 --single-branch https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        
    # 获取Android专用精简Skia
    - name: 获取Android专用精简Skia
      run: |
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        
        # Android专用最小化配置
        cat > .gclient << 'EOF'
        solutions = [
          {
            "name": "skia",
            "url": "https://skia.googlesource.com/skia.git",
            "deps_file": "DEPS",
            "managed": False,
            "custom_deps": {
              "skia/third_party/externals/angle2": None,
              "skia/third_party/externals/dawn": None,
              "skia/third_party/externals/dng_sdk": None,
              "skia/third_party/externals/piex": None,
              "skia/third_party/externals/imgui": None,
            },
          },
        ]
        EOF
        
        gclient sync --no-history --shallow --jobs=1 --delete_unversioned_trees
        
        # 立即清理
        find . -name "*test*" -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.h" \) -delete 2>/dev/null || true
        find . -name "*.png" -size +10k -delete 2>/dev/null || true
        rm -rf skia/resources skia/docs skia/bench skia/gm 2>/dev/null || true
        
        df -h || true
        
    # 配置Android Skia构建（仅核心功能）
    - name: 配置Android Skia构建
      run: |
        cd skia
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        python3 tools/git-sync-deps
        
        # Android超精简构建参数
        args="is_official_build=false"
        args="$args is_debug=false"
        args="$args extra_cflags=[\"-O2\", \"-DNDEBUG\"]"
        
        # 禁用所有可选功能
        args="$args skia_use_dawn=false"
        args="$args skia_enable_pdf=false"
        args="$args skia_enable_skottie=false"
        args="$args skia_enable_skshaper=false"
        args="$args skia_enable_svg=false"
        args="$args skia_use_icu=false"
        args="$args skia_enable_tools=false"
        args="$args skia_build_fuzzers=false"
        args="$args skia_use_freetype=true"
        args="$args skia_use_system_freetype2=false"
        
        # 只启用核心GPU功能
        args="$args skia_enable_gpu=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_use_gl=true"
        args="$args skia_enable_spirv_validation=false"
        
        # Android平台配置
        args="$args ndk=\"$ANDROID_NDK_HOME\""
        args="$args android_api_level=21"
        args="$args skia_enable_fontmgr_android=true"
        args="$args target_os=\"android\""
        args="$args target_cpu=\"arm64\""
        
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
        df -h || true
        
    # 生成Android Skia构建文件
    - name: 生成Android Skia构建文件
      run: |
        cd skia
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        bin/gn gen out/Release --args="$BUILD_ARGS"
        df -h || true
        
    # 编译Android Skia（单线程）
    - name: 编译Android Skia
      run: |
        cd skia
        export PATH=${{ github.workspace }}/depot_tools:$PATH
        echo "开始编译Android平台Skia（超精简版）..."
        
        # 单线程编译
        ninja -C out/Release -j1
        
        echo "✅ Android平台Skia编译完成"
        
        # 立即清理
        find out/Release -name "*.o" -delete 2>/dev/null || true
        df -h || true
        
    # 创建Android发布包
    - name: 创建Android发布包
      run: |
        mkdir -p Skia/include/core
        mkdir -p Skia/lib/android/arm64
        
        # 复制头文件和库
        cp -r skia/include/* Skia/include/core/
        find skia/out/Release -name "*.a" -exec cp {} Skia/lib/android/arm64/ \; 2>/dev/null || true
        
        # 创建Android专用CMakeLists.txt
        cat > Skia/CMakeLists.txt << 'EOF'
# Skia Android版CMake配置
cmake_minimum_required(VERSION 3.20)
project(SkiaAndroid VERSION 1.0.0 LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

add_library(Skia INTERFACE)
add_library(skia::skia ALIAS Skia)

target_include_directories(Skia INTERFACE
    $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/core>
    $<INSTALL_INTERFACE:include/core>
)

file(GLOB SKIA_LIBS "${SKIA_ROOT_DIR}/lib/android/arm64/*.a")
if(SKIA_LIBS)
    target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
endif()

if(ANDROID)
    target_link_libraries(Skia INTERFACE GLESv2 EGL vulkan android log dl m z)
    target_compile_definitions(Skia INTERFACE
        ANDROID SK_GANESH=1 SK_VULKAN=1 SK_GL=1 __ANDROID_API__=21
    )
endif()

target_compile_features(Skia INTERFACE cxx_std_20)
EOF
        
        echo "✅ Android构建包创建完成"
        df -h || true
        
    # 打包Android构建产物
    - name: 打包Android构建产物
      run: |
        zip -9 -r "${{ matrix.platform }}.zip" Skia/
        echo "✅ ${{ matrix.platform }}.zip 构建包创建完成"
        ls -lh ${{ matrix.platform }}.zip
        
        # 清理所有文件
        rm -rf Skia/ skia/ depot_tools/
        df -h || true
        
    # 上传Android构建产物
    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: ${{ matrix.platform }}.zip
        retention-days: 7
        compression-level: 0

  # 创建最终发布
  create-release:
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-dawn-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia+Dawn超精简版每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-dawn-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia+Dawn超精简版构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia + Dawn WebGPU 超精简版构建包
          
          这是经过极限存储优化的Skia图形库构建包，专门为解决GitHub Actions存储空间不足问题而设计。
          
          ## ⚠️ 重要说明
          
          由于GitHub Actions Ubuntu runners存储空间限制，本版本进行了以下优化：
          
          ### 🔧 优化措施
          - **Windows版本**: 完整功能，包含Dawn WebGPU支持
          - **Linux版本**: 精简版，仅核心GPU功能，移除Dawn以节省空间
          - **Android版本**: 超精简版，仅核心功能
          
          ### 📦 包含的平台
          
          #### Windows平台 (完整版)
          - **x64_windows.zip** - Windows x64架构
            - **图形后端**: DirectX 11/12 + Vulkan + OpenGL + Dawn WebGPU
            - **功能**: 完整的Skia功能 + Dawn WebGPU
            - **编译器**: MSVC 2022 + Clang 18
          
          #### Linux平台 (精简版)
          - **x64_linux.zip** - Linux x64架构
            - **图形后端**: Vulkan + OpenGL（无Dawn）
            - **功能**: 核心GPU渲染功能
            - **编译器**: Clang 18
          
          #### Android平台 (超精简版)
          - **arm64_android.zip** - Android ARM64架构
            - **图形后端**: Vulkan + OpenGL ES（无Dawn）
            - **功能**: 基础GPU渲染
            - **API级别**: 21+
          
          ## 🚀 使用方法
          
          ```cmake
          # 设置C++20标准
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # 添加Skia包
          add_subdirectory(path/to/Skia)
          
          # 链接到您的目标
          target_link_libraries(your_target skia::skia)
          ```
          
          ## 📋 版本差异
          
          | 平台 | Dawn WebGPU | PDF支持 | SVG支持 | 文本整形 | 包大小 |
          |------|-------------|---------|---------|----------|--------|
          | Windows | ✅ 完整 | ✅ | ✅ | ✅ | 大 |
          | Linux | ❌ 无 | ❌ | ❌ | ❌ | 小 |
          | Android | ❌ 无 | ❌ | ❌ | ❌ | 最小 |
          
          ## 💡 建议
          
          - **生产环境**: 推荐使用Windows版本，功能最完整
          - **快速原型**: Linux/Android版本适合基础GPU渲染需求
          - **完整功能**: 如需完整功能，建议在本地环境编译
          
          这是针对GitHub Actions存储限制的临时解决方案。我们正在寻找更好的方案来提供完整版本。
        files: |
          artifacts/*/**.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: 构建完成通知
      run: |
        echo "🎉 Skia + Dawn 超精简版构建完成！"
        echo "⚠️  注意：由于存储空间限制，各平台功能有所差异"
        echo "📦 构建结果："
        echo "   • Windows x64: 完整版 (DirectX + Vulkan + OpenGL + Dawn WebGPU)"
        echo "   • Linux x64: 精简版 (Vulkan + OpenGL，无Dawn)"  
        echo "   • Android ARM64: 超精简版 (基础GPU功能)"
        echo "💡 建议：生产环境优先使用Windows版本"
        echo "🔍 正在寻找更好的解决方案以提供完整版本"
