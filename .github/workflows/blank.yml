name: "Build Skia + Dawn 全平台构建包"

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 0:00 执行

permissions:
  contents: write
  packages: write
  actions: read

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            compiler: msvc2022
          - os: ubuntu-24.04
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            compiler: clang18
          - os: ubuntu-24.04
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            compiler: clang18
          - os: ubuntu-24.04
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21
            compiler: clang18

    steps:
      - name: Checkout repository (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Clean disk space (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get clean

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake clang-18 gcc-13 g++-13 \
            libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev \
            libvulkan-dev vulkan-tools libxrandr-dev libxinerama-dev \
            libxcursor-dev libxi-dev libx11-dev libicu-dev libharfbuzz-dev openjdk-11-jdk
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja -y
          choco install llvm --version=18.1.8 -y
          echo "C:\\Program Files\\LLVM\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Android NDK
        if: matrix.target_os == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Fetch depot_tools
        run: |
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools
          echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        shell: bash

      - name: Fetch Skia source via gclient
        run: |
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          mkdir -p skia-build && cd skia-build
          gclient config --name skia https://skia.googlesource.com/skia.git
          gclient sync --no-history --with_branch_heads
        shell: bash

      - name: Fetch Dawn source (shallow)
        run: |
          git clone --depth 1 --recursive https://dawn.googlesource.com/dawn.git dawn-source
          cd dawn-source
          python3 tools/fetch_dawn_dependencies.py --no-history
        shell: bash

      - name: Configure Dawn build
        run: |
          cd dawn-source
          mkdir -p build-${{ matrix.platform }} && cd build-${{ matrix.platform }}
          case "${{ matrix.target_os }}" in
            win)
              cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.arch == 'x64' && 'x64' || 'Win32' }} \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_D3D11=ON -DDAWN_ENABLE_D3D12=ON -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON \
                -DCMAKE_CXX_STANDARD=20 -DDAWN_USE_BUILT_DXC=ON
              ;;
            linux)
              cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
            android)
              if [[ "${{ matrix.arch }}" == "arm64" ]]; then ANDROID_ABI="arm64-v8a"; else ANDROID_ABI="x86_64"; fi
              cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_SYSTEM_NAME=Android -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
                -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME} -DCMAKE_ANDROID_STL_TYPE=c++_static \
                -DCMAKE_ANDROID_API=${{ matrix.android_api }} \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGLES=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
          esac
        shell: bash

      - name: Build Dawn
        run: |
          cd dawn-source/build-${{ matrix.platform }}
          if [[ "${{ matrix.target_os }}" == "win" ]]; then
            cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
          else
            ninja -j4
          fi
        shell: bash

      - name: Configure Skia build
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          python3 tools/git-sync-deps --if-not-exists --shallow
          BUILD_ARGS=\"is_official_build=false is_debug=false skia_use_dawn=true skia_dawn_dir='../../dawn-source' \"
          BUILD_ARGS+=\"skia_enable_gpu=true skia_use_gl=true skia_use_vulkan=true skia_enable_spirv_validation=false \"
          BUILD_ARGS+=\"target_os='${{ matrix.target_os }}' target_cpu='${{ matrix.target_cpu }}' cc='clang' cxx='clang++' \"
          if [[ \"${{ matrix.target_os }}\" == \"win\" ]]; then
            BUILD_ARGS+=\" skia_use_direct3d=true skia_use_angle=true skia_use_freetype=true clang_win='C:/Program Files/LLVM' \"
          fi
          echo \"BUILD_ARGS=$BUILD_ARGS\" >> $GITHUB_ENV
        shell: bash

      - name: Generate Skia build files
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          bin/gn gen out/Release --args=\"$BUILD_ARGS\"
        shell: bash

      - name: Build Skia
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          ninja -C out/Release -j4
        shell: bash

      - name: Collect Dawn headers/libs
        run: |
          mkdir -p dawn-output/{include,dawn,lib}
          cp -r dawn-source/include/* dawn-output/include/ || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen dawn-output/dawn || true
          if [[ "${{ matrix.target_os }}" == "win" ]]; then
            find dawn-source/build-${{ matrix.platform }}/${{ env.BUILD_TYPE }} -name "*.lib" -exec cp {} dawn-output/lib/ \;
          else
            find dawn-source/build-${{ matrix.platform }} -name "*.a" -exec cp {} dawn-output/lib/ \;
            find dawn-source/build-${{ matrix.platform }} -name "*.so" -exec cp {} dawn-output/lib/ \;
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: skia-dawn-${{ matrix.platform }}
          path: |
            skia-build/skia/out/Release
            dawn-output
