# Skia 全平台构建工作流（仅Skia + Graphite，不包含Dawn）
name: 编译 Skia 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            
          # macOS x64架构
          - os: macos-latest
            platform: x64_macos
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest
            platform: arm64_macos
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 清理磁盘空间（仅限Linux但不包含Android构建）
    - name: 清理磁盘空间
      if: runner.os == 'Linux' && matrix.target_os != 'android'
      run: |
        echo "=== 清理前磁盘使用情况 ==="
        df -h
        
        # 删除不必要的软件包和文件
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        
        # 删除大型不必要的软件（但保留Android相关）
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        
        # 清理Docker相关文件
        docker system prune -a -f || true
        
        # 清理snap包
        sudo snap list | awk 'NR>1{print $1}' | xargs -r sudo snap remove || true
        
        echo "=== 清理后磁盘使用情况 ==="
        df -h
        
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包（Linux和Android构建需要）
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        
        # 安装基础构建工具
        sudo apt-get install -y build-essential ninja-build
        
        # 检查Ubuntu版本
        echo "=== 检查系统版本 ==="
        lsb_release -a
        
        # 只安装核心编译器（避免包冲突）
        sudo apt-get install -y gcc g++ clang clang++
        
        # 安装C++标准库开发包
        sudo apt-get install -y libc++-dev libc++abi-dev || echo "libc++ 安装失败，继续使用 libstdc++"
        
        # 安装图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        
        # 安装Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools || echo "Vulkan 开发库安装失败，继续构建"
        
        # 安装X11相关库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        
        # 安装ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        
        # 安装pkg-config工具
        sudo apt-get install -y pkg-config
        
        # 安装Java开发环境（Android构建需要）
        if [ "${{ matrix.target_os }}" = "android" ]; then
          sudo apt-get install -y openjdk-11-jdk
        fi
        
        # 显示编译器版本信息
        echo "=== 编译器版本信息 ==="
        gcc --version | head -1
        g++ --version | head -1
        clang --version | head -1
        clang++ --version | head -1
        echo "======================"
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装Xcode命令行工具
        xcode-select --install 2>/dev/null || true
        # 安装ninja构建工具
        brew install ninja || true
        # 验证Xcode版本并确保支持C++20
        echo "=== macOS编译器版本信息 ==="
        xcodebuild -version
        clang --version | head -1
        echo "========================="
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装ninja构建工具
        choco install ninja -y
        
    # 设置Android NDK环境（仅限Android平台）- 使用GitHub Actions自带的Android环境
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      run: |
        echo "=== 设置Android NDK环境 ==="
        
        # 检查系统中是否已有Android SDK
        if [ -d "$ANDROID_HOME" ]; then
          echo "找到Android SDK目录: $ANDROID_HOME"
          ls -la "$ANDROID_HOME" || true
        fi
        
        # 检查是否已有NDK
        if [ -d "$ANDROID_HOME/ndk" ]; then
          echo "找到NDK目录:"
          ls -la "$ANDROID_HOME/ndk/" || true
          # 使用最新的NDK版本
          LATEST_NDK=$(ls -1 "$ANDROID_HOME/ndk/" | sort -V | tail -1)
          if [ -n "$LATEST_NDK" ]; then
            export ANDROID_NDK_ROOT="$ANDROID_HOME/ndk/$LATEST_NDK"
            echo "设置NDK路径为: $ANDROID_NDK_ROOT"
            echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          fi
        fi
        
        # 如果没有找到NDK，手动安装
        if [ -z "$ANDROID_NDK_ROOT" ] || [ ! -d "$ANDROID_NDK_ROOT" ]; then
          echo "未找到NDK，尝试安装..."
          
          # 创建Android SDK目录
          sudo mkdir -p /usr/local/lib/android/sdk
          
          # 下载并安装Android SDK命令行工具
          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          sudo mv cmdline-tools /usr/local/lib/android/sdk/
          sudo mkdir -p /usr/local/lib/android/sdk/cmdline-tools/latest
          sudo mv /usr/local/lib/android/sdk/cmdline-tools/* /usr/local/lib/android/sdk/cmdline-tools/latest/ 2>/dev/null || true
          
          # 设置环境变量
          export ANDROID_HOME=/usr/local/lib/android/sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
          
          # 接受许可证并安装NDK
          echo "y" | sudo $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          sudo $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" || true
          
          # 设置NDK路径
          export ANDROID_NDK_ROOT="$ANDROID_HOME/ndk/25.2.9519653"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        fi
        
        echo "最终NDK路径: $ANDROID_NDK_ROOT"
        
    # 验证Android NDK安装
    - name: 验证Android NDK安装
      if: matrix.target_os == 'android'
      run: |
        echo "=== Android NDK 验证 ==="
        echo "NDK路径: $ANDROID_NDK_ROOT"
        
        if [ -z "$ANDROID_NDK_ROOT" ]; then
          echo "错误: ANDROID_NDK_ROOT 环境变量未设置"
          exit 1
        fi
        
        if [ ! -d "$ANDROID_NDK_ROOT" ]; then
          echo "错误: NDK目录不存在: $ANDROID_NDK_ROOT"
          exit 1
        fi
        
        echo "NDK目录内容:"
        ls -la "$ANDROID_NDK_ROOT" || echo "无法列出NDK目录内容"
        
        # 检查关键文件是否存在
        if [ -d "$ANDROID_NDK_ROOT/sources/android/cpufeatures" ]; then
          echo "cpu-features目录存在"
          ls -la "$ANDROID_NDK_ROOT/sources/android/cpufeatures/"
        else
          echo "警告: cpu-features目录不存在，但继续构建"
        fi
        
        # 检查NDK版本信息
        if [ -f "$ANDROID_NDK_ROOT/source.properties" ]; then
          echo "NDK版本信息:"
          cat "$ANDROID_NDK_ROOT/source.properties"
        fi
        
        # 检查工具链
        if [ -d "$ANDROID_NDK_ROOT/toolchains" ]; then
          echo "可用工具链:"
          ls -la "$ANDROID_NDK_ROOT/toolchains/"
        fi
        
        echo "======================"
        
    # 获取Google的depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码并同步依赖
    - name: 获取Skia源代码
      run: |
        # 使用浅克隆减少下载大小
        git clone --depth 1 https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
      shell: bash
      
    # 检查磁盘空间
    - name: 检查磁盘空间
      run: |
        echo "=== Skia下载后磁盘使用情况 ==="
        df -h
      shell: bash
      
    # 配置Skia构建参数（仅包含Graphite，不包含Dawn）
    - name: 配置Skia构建参数
      run: |
        cd skia
        
        # 基础构建参数设置 - 启用全量功能
        args="is_official_build=true"
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用全量功能支持，但使用内置依赖库
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skottie=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持 - 包含Graphite但不包含Dawn
        args="$args skia_enable_gpu=true"
        args="$args skia_enable_graphite=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        # 注意：禁用Dawn WebGPU，将通过外部CMake链接
        args="$args skia_use_dawn=false"
        args="$args skia_enable_spirv_validation=false"
        
        # 禁用工具构建以避免测试工具API问题和节省空间
        args="$args skia_enable_tools=false"
        args="$args skia_build_tests=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数和编译选项
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置 - 使用MSVC 2022和C++20标准
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=false"
            args="$args skia_use_piex=false"
            # 设置Windows使用/MD运行时和C++20标准
            args="$args extra_cflags=[\"/MD\", \"/std:c++20\"]"
            args="$args extra_cflags_c=[\"/MD\"]"
            args="$args extra_cflags_cc=[\"/MD\", \"/std:c++20\"]"
            ;;
          "mac")
            # macOS平台特定配置 - 使用最新Clang和C++20标准
            args="$args skia_use_metal=true"
            args="$args skia_enable_skottie=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_pdf_subset_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            # 设置C++20标准和兼容性选项
            args="$args extra_cflags_cc=[\"-std=c++20\", \"-stdlib=libc++\", \"-mmacosx-version-min=10.15\"]"
            args="$args extra_ldflags=[\"-stdlib=libc++\", \"-mmacosx-version-min=10.15\"]"
            ;;
          "linux")
            # Linux平台特定配置 - 使用系统默认编译器和C++20标准
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            args="$args skia_use_system_freetype2=true"
            args="$args skia_use_system_harfbuzz=true"
            # 检查是否有libc++，如果有则使用，否则使用libstdc++
            if command -v clang++ >/dev/null 2>&1 && pkg-config --exists libc++; then
              echo "使用 libc++ 标准库"
              args="$args extra_cflags_cc=[\"-std=c++20\", \"-stdlib=libc++\"]"
              args="$args extra_ldflags=[\"-stdlib=libc++\", \"-lc++abi\"]"
              args="$args cc=\"clang\""
              args="$args cxx=\"clang++\""
            else
              echo "使用 libstdc++ 标准库"
              args="$args extra_cflags_cc=[\"-std=c++20\"]"
              args="$args cc=\"gcc\""
              args="$args cxx=\"g++\""
            fi
            ;;
          "android")
            # Android平台特定配置 - 使用NDK Clang和C++20标准
            echo "配置Android构建参数..."
            echo "NDK路径: $ANDROID_NDK_ROOT"
            
            # 验证NDK路径有效性
            if [ -z "$ANDROID_NDK_ROOT" ] || [ ! -d "$ANDROID_NDK_ROOT" ]; then
              echo "错误: NDK路径无效或未设置"
              echo "ANDROID_NDK_ROOT = '$ANDROID_NDK_ROOT'"
              exit 1
            fi
            
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args android_api_level=${{ matrix.android_api }}"
            
            # Android特定的Skia配置
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_vulkan=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=false"
            args="$args skia_use_piex=false"
            
            # 禁用一些Android上可能有问题的功能
            args="$args skia_use_libwebp_decode=true"
            args="$args skia_use_libwebp_encode=true"
            
            # 设置C++20标准
            args="$args extra_cflags_cc=[\"-std=c++20\"]"
            
            echo "Android构建参数配置完成"
            ;;
        esac
        
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 使用GN生成构建文件
    - name: 生成Skia构建文件
      run: |
        cd skia
        echo "正在为 ${{ matrix.target_os }} 平台生成构建文件..."
        echo "构建参数: $BUILD_ARGS"
        bin/gn gen out/Release --args="$BUILD_ARGS"
        echo "构建配置完成"
      shell: bash
      
    # 使用Ninja编译Skia
    - name: 编译Skia
      run: |
        cd skia
        echo "开始编译 ${{ matrix.target_os }} 平台的Skia..."
        
        # 检查编译前磁盘空间
        echo "=== 编译前磁盘使用情况 ==="
        df -h
        
        # 根据平台设置并行编译线程数（减少内存使用）
        if [ "${{ matrix.target_os }}" = "android" ]; then
          # Android构建使用较少线程避免内存不足
          echo "使用2线程编译Android版本..."
          ninja -C out/Release -j2
        elif [ "${{ matrix.target_os }}" = "linux" ]; then
          # Linux构建使用4线程
          echo "使用4线程编译Linux版本..."
          ninja -C out/Release -j4
        else
          # 其他平台使用6线程
          echo "使用6线程编译其他平台版本..."
          ninja -C out/Release -j6
        fi
        echo "✅ ${{ matrix.target_os }} 平台Skia编译完成"
      shell: bash
      
    # 清理中间文件以节省空间
    - name: 清理Skia中间文件
      run: |
        cd skia
        # 删除编译过程中的临时文件
        find out/Release -name "*.o" -delete 2>/dev/null || true
        find out/Release -name "*.obj" -delete 2>/dev/null || true
        find out/Release -name "*.pdb" -delete 2>/dev/null || true
        
        echo "=== Skia编译后磁盘使用情况 ==="
        df -h
      shell: bash
      
    # 创建发布包并整理文件
    - name: 创建Skia发布包
      run: |
        cd skia
        
        # 创建Skia目录结构
        mkdir -p Skia/bin/${{ matrix.target_os }}/${{ matrix.target_cpu }}
        mkdir -p Skia/lib/${{ matrix.target_os }}/${{ matrix.target_cpu }}
        mkdir -p Skia/include
        mkdir -p Skia/modules
        mkdir -p Skia/examples
        
        # 复制头文件
        cp -r include/* Skia/include/
        
        # 复制modules目录
        if [ -d "modules" ]; then
          cp -r modules/* Skia/modules/ 2>/dev/null || true
        fi
        
        # 复制third_party中的必要头文件
        if [ -d "third_party" ]; then
          mkdir -p Skia/third_party
          find third_party -name "*.h" -o -name "*.hpp" | while read file; do
            dir=$(dirname "$file")
            mkdir -p "Skia/$dir"
            cp "$file" "Skia/$file" 2>/dev/null || true
          done
        fi
        
        # 根据不同平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台文件复制
            find out/Release -name "*.lib" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            find out/Release -name "*.dll" -exec cp {} Skia/bin/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            find out/Release -name "*.exe" -exec cp {} Skia/bin/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            ;;
          "mac")
            # macOS平台文件复制
            find out/Release -name "*.a" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            find out/Release -name "*.dylib" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -not -name "*.dylib" -exec cp {} Skia/bin/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            ;;
          "linux"|"android")
            # Linux和Android平台文件复制
            find out/Release -name "*.a" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            find out/Release -name "*.so" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -exec cp {} Skia/bin/${{ matrix.target_os }}/${{ matrix.target_cpu }}/ \; 2>/dev/null || true
            ;;
        esac
        
        # 复制示例文件（只复制小文件）
        if [ -d "resources" ]; then
          mkdir -p Skia/examples
          find resources -type f -size -1M -exec cp {} Skia/examples/ \; 2>/dev/null || true
        fi
        
        # 创建构建信息文件
        cat > Skia/BUILD_INFO.txt << EOF
        Skia + Graphite 完整构建信息
        ===========================
        平台: ${{ matrix.target_os }}
        架构: ${{ matrix.target_cpu }}
        包名: ${{ matrix.platform }}
        构建模式: Release (官方完整构建)
        C++标准: C++20
        
        支持的功能:
        - GPU渲染 (OpenGL + Vulkan)
        - Graphite渲染引擎
        - PDF导出 (内置HarfBuzz)
        - SVG支持
        - Skottie动画
        - 文本整形 (内置HarfBuzz)
        - 字体管理 (内置FreeType)
        - 图像编解码
        - 颜色管理 (skcms模块)
        
        图形后端:
        - OpenGL/OpenGL ES
        - Vulkan
        - Graphite渲染引擎
        - Metal (仅macOS)
        - Direct3D (仅Windows)
        
        编译器配置:
        - Windows: MSVC 2022 with /MD runtime
        - macOS: 最新 Clang with libc++
        - Linux: GCC/Clang with libstdc++/libc++（自动检测）
        - Android: NDK Clang（自动安装最新版本）
        
        注意事项:
        - 此版本不包含Dawn WebGPU
        - Dawn需要通过外部CMake项目链接
        - 启用了Graphite现代渲染后端
        - Android使用自动安装的NDK版本
        EOF
        
        echo "=== 最终磁盘使用情况 ==="
        df -h
      shell: bash
      
    # 生成统一的CMakeLists.txt文件（skdn接口，为外部Dawn链接做准备）
    - name: 生成Skia CMakeLists.txt
      run: |
        cd skia/Skia
        
        # 生成CMakeLists.txt文件，创建skdn接口库，为外部Dawn链接做准备
        cat > CMakeLists.txt << 'EOF'
        # Skia + Graphite 图形库的CMake配置文件（全平台支持，支持外部Dawn链接）
        cmake_minimum_required(VERSION 3.20)
        
        # 设置项目信息
        project(SkiaGraphitePrebuilt
            VERSION 1.0.0
            DESCRIPTION "完整预编译的Skia图形库 + Graphite渲染引擎"
            LANGUAGES CXX C
        )
        
        # 设置C++20标准
        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKDN_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 检测当前平台和架构
        if(WIN32)
            set(SKDN_PLATFORM "win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SKDN_ARCH "x64")
            else()
                set(SKDN_ARCH "x86")
            endif()
        elseif(APPLE)
            set(SKDN_PLATFORM "mac")
            if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64")
                set(SKDN_ARCH "arm64")
            else()
                set(SKDN_ARCH "x64")
            endif()
        elseif(ANDROID)
            set(SKDN_PLATFORM "android")
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(SKDN_ARCH "arm64")
            else()
                set(SKDN_ARCH "x64")
            endif()
        else()
            set(SKDN_PLATFORM "linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SKDN_ARCH "x64")
            else()
                set(SKDN_ARCH "x86")
            endif()
        endif()
        
        # 设置库文件路径
        set(SKDN_LIB_DIR "${SKDN_ROOT_DIR}/lib/${SKDN_PLATFORM}/${SKDN_ARCH}")
        set(SKDN_BIN_DIR "${SKDN_ROOT_DIR}/bin/${SKDN_PLATFORM}/${SKDN_ARCH}")
        
        # 创建skdn接口库（统一的Skia + Graphite接口）
        add_library(skdn INTERFACE)
        add_library(skdn::skdn ALIAS skdn)
        
        # 设置包含目录
        target_include_directories(skdn INTERFACE
            $<BUILD_INTERFACE:${SKDN_ROOT_DIR}>
            $<BUILD_INTERFACE:${SKDN_ROOT_DIR}/include>
            $<BUILD_INTERFACE:${SKDN_ROOT_DIR}/modules>
            $<BUILD_INTERFACE:${SKDN_ROOT_DIR}/third_party>
            $<INSTALL_INTERFACE:.>
            $<INSTALL_INTERFACE:include>
            $<INSTALL_INTERFACE:modules>
            $<INSTALL_INTERFACE:third_party>
        )
        
        # 查找所有的库文件
        file(GLOB SKDN_LIBRARIES "${SKDN_LIB_DIR}/*")
        
        # 定义选项：是否启用外部Dawn支持
        option(SKDN_USE_DAWN "启用外部Dawn WebGPU支持" OFF)
        
        # 根据平台设置特定的链接库和编译选项
        if(WIN32)
            # Windows平台配置 - 支持C++20和Graphite
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                UNICODE
                _UNICODE
            )
            
            # 如果启用了Dawn支持，添加相应定义
            if(SKDN_USE_DAWN)
                target_compile_definitions(skdn INTERFACE SK_DAWN=1)
            endif()
            
            # 设置Windows运行时和C++20
            target_compile_options(skdn INTERFACE
                $<$<CONFIG:Debug>:/MDd /std:c++20>
                $<$<CONFIG:Release>:/MD /std:c++20>
                $<$<CONFIG:RelWithDebInfo>:/MD /std:c++20>
                $<$<CONFIG:MinSizeRel>:/MD /std:c++20>
            )
            
            # 添加Windows系统库
            target_link_libraries(skdn INTERFACE
                ${SKDN_LIBRARIES}
                # OpenGL相关
                OpenGL32
                # DirectX相关
                d3d11
                dxgi
                d3dcompiler
                dxguid
                # 系统库
                Gdi32
                User32
                Kernel32
                Ole32
                OleAut32
                Uuid
                Advapi32
                Shell32
                # 字体和文本
                Usp10
                # 网络
                Ws2_32
            )
            
        elseif(APPLE)
            # macOS平台配置 - 支持C++20和Graphite
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 如果启用了Dawn支持，添加相应定义
            if(SKDN_USE_DAWN)
                target_compile_definitions(skdn INTERFACE SK_DAWN=1)
            endif()
            
            # 设置C++20标准
            target_compile_options(skdn INTERFACE
                -std=c++20
                -stdlib=libc++
            )
            
            # 查找macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
            find_library(COCOA_FRAMEWORK Cocoa)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            find_library(OPENGL_FRAMEWORK OpenGL)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore)
            find_library(IOSURFACE_FRAMEWORK IOSurface)
            
            target_link_libraries(skdn INTERFACE
                ${SKDN_LIBRARIES}
                ${FOUNDATION_FRAMEWORK}
                ${COREGRAPHICS_FRAMEWORK}
                ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK}
                ${COCOA_FRAMEWORK}
                ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK}
                ${OPENGL_FRAMEWORK}
                ${QUARTZCORE_FRAMEWORK}
                ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置 - 支持C++20和Graphite
            target_compile_definitions(skdn INTERFACE
                ANDROID
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                __ANDROID_API__=21
            )
            
            # 如果启用了Dawn支持，添加相应定义
            if(SKDN_USE_DAWN)
                target_compile_definitions(skdn INTERFACE SK_DAWN=1)
            endif()
            
            target_compile_options(skdn INTERFACE
                -std=c++20
                -fPIC
                -fno-rtti
                -fno-exceptions
            )
            
            target_link_libraries(skdn INTERFACE
                ${SKDN_LIBRARIES}
                # OpenGL ES相关
                GLESv2
                EGL
                # Vulkan相关
                vulkan
                # Android系统库
                android
                log
                jnigraphics
                # 媒体相关
                mediandk
                # 系统库
                dl
                m
                z
            )
            
            # Android特定的链接选项
            target_link_options(skdn INTERFACE
                -Wl,--gc-sections
                -Wl,--as-needed
            )
            
        else()
            # Linux平台配置 - 支持C++20和Graphite
            target_compile_definitions(skdn INTERFACE
                SK_GANESH=1
                SK_GRAPHITE=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # 如果启用了Dawn支持，添加相应定义
            if(SKDN_USE_DAWN)
                target_compile_definitions(skdn INTERFACE SK_DAWN=1)
            endif()
            
            # 设置C++20标准（自适应标准库）
            target_compile_options(skdn INTERFACE
                -std=c++20
            )
            
            # 查找必要的系统库
            find_package(PkgConfig QUIET)
            if(PKG_CONFIG_FOUND)
                pkg_check_modules(FONTCONFIG QUIET fontconfig)
                pkg_check_modules(HARFBUZZ QUIET harfbuzz)
            endif()
            
            # 查找Vulkan
            find_package(Vulkan QUIET)
            
            # 查找X11相关库
            find_package(X11 QUIET)
            
            target_link_libraries(skdn INTERFACE
                ${SKDN_LIBRARIES}
                # OpenGL
                GL
                # 系统库
                pthread
                dl
                m
            )
            
            # 检测并使用合适的C++标准库
            include(CheckCXXSourceCompiles)
            set(CMAKE_REQUIRED_FLAGS "-std=c++20")
            check_cxx_source_compiles("
                #include <memory>
                int main() { return 0; }
            " HAVE_WORKING_CXX20)
            
            if(HAVE_WORKING_CXX20)
                message(STATUS "C++20支持检测通过，使用系统默认标准库")
            endif()
            
            # FontConfig支持
            if(FONTCONFIG_FOUND)
                target_link_libraries(skdn INTERFACE ${FONTCONFIG_LIBRARIES})
                target_include_directories(skdn INTERFACE ${FONTCONFIG_INCLUDE_DIRS})
            endif()
            
            # HarfBuzz支持
            if(HARFBUZZ_FOUND)
                target_link_libraries(skdn INTERFACE ${HARFBUZZ_LIBRARIES})
                target_include_directories(skdn INTERFACE ${HARFBUZZ_INCLUDE_DIRS})
            endif()
            
            # 添加Vulkan支持
            if(Vulkan_FOUND)
                target_link_libraries(skdn INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skdn INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            # 添加X11支持
            if(X11_FOUND)
                target_link_libraries(skdn INTERFACE
                    ${X11_LIBRARIES}
                    ${X11_Xrandr_LIB}
                    ${X11_Xinerama_LIB}
                    ${X11_Xcursor_LIB}
                    ${X11_Xi_LIB}
                )
                target_include_directories(skdn INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 如果启用了Dawn支持，尝试查找Dawn库
        if(SKDN_USE_DAWN)
            find_package(Dawn QUIET)
            if(Dawn_FOUND)
                target_link_libraries(skdn INTERFACE Dawn::Dawn)
                message(STATUS "找到外部Dawn库，已自动链接")
            else()
                message(WARNING "启用了Dawn支持但未找到Dawn库，请确保Dawn库已正确安装")
            endif()
        endif()
        
        # 设置编译特性
        target_compile_features(skdn INTERFACE cxx_std_20)
        
        # 优化设置
        target_compile_options(skdn INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 设置预处理器定义
        target_compile_definitions(skdn INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        # 显示配置信息
        message(STATUS "SKDN配置信息:")
        message(STATUS "  平台: ${SKDN_PLATFORM}")
        message(STATUS "  架构: ${SKDN_ARCH}")
        message(STATUS "  库目录: ${SKDN_LIB_DIR}")
        message(STATUS "  二进制目录: ${SKDN_BIN_DIR}")
        message(STATUS "  C++标准: C++20")
        message(STATUS "  支持功能: Skia + Graphite渲染引擎")
        message(STATUS "  Dawn支持: ${SKDN_USE_DAWN}")
        
        # 创建辅助函数用于简化Dawn的链接
        function(SkdnLinkDawn target)
            if(NOT TARGET ${target})
                message(FATAL_ERROR "目标 ${target} 不存在")
            endif()
            
            # 链接skdn库
            target_link_libraries(${target} PRIVATE skdn::skdn)
            
            # 如果用户传递了Dawn库，则链接它
            if(ARGC GREATER 1)
                target_link_libraries(${target} PRIVATE ${ARGV1})
                target_compile_definitions(${target} PRIVATE SK_DAWN=1)
                message(STATUS "为目标 ${target} 链接了Dawn库: ${ARGV1}")
            endif()
        endfunction()
        
        # 提供使用示例的消息
        if(NOT SKDN_QUIET)
            message(STATUS "")
            message(STATUS "=== SKDN使用示例 ===")
            message(STATUS "基础使用（仅Skia + Graphite）:")
            message(STATUS "  target_link_libraries(your_target skdn::skdn)")
            message(STATUS "")
            message(STATUS "使用外部Dawn库:")
            message(STATUS "  set(SKDN_USE_DAWN ON)")
            message(STATUS "  find_package(Dawn REQUIRED)")
            message(STATUS "  target_link_libraries(your_target skdn::skdn Dawn::Dawn)")
            message(STATUS "")
            message(STATUS "或使用辅助函数:")
            message(STATUS "  SkdnLinkDawn(your_target Dawn::Dawn)")
            message(STATUS "==================")
            message(STATUS "")
        endif()
        EOF
        
      shell: bash
      
    # 打包构建产物为ZIP文件
    - name: 打包Skia构建产物
      run: |
        cd skia
        
        # 根据运行平台选择合适的打包方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows系统使用PowerShell的Compress-Archive
          powershell "Compress-Archive -Path Skia -DestinationPath Skia_Prebuilt_${{ matrix.platform }}.zip"
        else
          # Unix系统使用zip命令打包
          zip -r "Skia_Prebuilt_${{ matrix.platform }}.zip" Skia
        fi
        
        echo "✅ Skia_Prebuilt_${{ matrix.platform }}.zip 构建包创建完成"
        
        # 显示最终文件大小
        ls -lh "Skia_Prebuilt_${{ matrix.platform }}.zip"
      shell: bash
      
    # 上传构建产物到GitHub Actions
    - name: 上传Skia构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia_Prebuilt_${{ matrix.platform }}
        path: skia/Skia_Prebuilt_${{ matrix.platform }}.zip
        retention-days: 30
        compression-level: 0
        
  # 创建GitHub Release发布（仅在推送到主分支或定时任务时）
  create-release:
    needs: build-skia
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码以访问仓库信息
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有Skia构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-graphite-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia+Graphite全平台每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-graphite-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia+Graphite全平台构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release发布版本
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia + Graphite 全平台构建包（Android修复版）
          
          这个发布包包含了Skia图形库和Graphite渲染引擎在多个平台的完整预编译版本，支持外部Dawn WebGPU链接。
          
          ## 包含的平台
          
          ### 桌面平台
          - **Skia_Prebuilt_x64_windows.zip** - Windows x64架构
            - GPU后端: Direct3D + OpenGL + Vulkan + Graphite
            - 编译器: MSVC 2022 with /MD runtime
            - C++标准: C++20
          
          - **Skia_Prebuilt_x64_macos.zip** - macOS Intel x64架构
          - **Skia_Prebuilt_arm64_macos.zip** - macOS Apple Silicon ARM64架构
            - GPU后端: Metal + OpenGL + Vulkan + Graphite
            - 编译器: 最新 Clang with libc++
            - C++标准: C++20
          
          - **Skia_Prebuilt_x64_linux.zip** - Linux x64架构
            - GPU后端: OpenGL + Vulkan + Graphite
            - 编译器: GCC/Clang（自动选择最佳）
            - C++标准: C++20
          
          ### 移动平台
          - **Skia_Prebuilt_x64_android.zip** - Android x64架构
          - **Skia_Prebuilt_arm64_android.zip** - Android ARM64架构
            - GPU后端: OpenGL ES + Vulkan + Graphite
            - 编译器: 自动安装的NDK Clang
            - Android API级别: 21+
            - C++标准: C++20
          
          ## CMake使用方法
          
          ### 基础使用（仅Skia + Graphite）
          
          ```cmake
          # 设置C++20标准
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # 添加Skia子目录
          add_subdirectory(path/to/Skia)
          
          # 链接skdn接口库
          target_link_libraries(your_target skdn::skdn)
          ```
          
          ### 使用外部Dawn WebGPU
          
          ```cmake
          # 设置C++20标准
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # 启用Dawn支持
          set(SKDN_USE_DAWN ON)
          
          # 添加Skia子目录
          add_subdirectory(path/to/Skia)
          
          # 查找并链接Dawn
          find_package(Dawn REQUIRED)
          target_link_libraries(your_target skdn::skdn Dawn::Dawn)
          
          # 或使用辅助函数
          SkdnLinkDawn(your_target Dawn::Dawn)
          ```
          
          ## 主要特性
          
          - ✅ **完整的Skia核心功能**
          - ✅ **Graphite现代渲染引擎**
          - ✅ **GPU加速渲染**（OpenGL/Vulkan/Metal/Direct3D）
          - ✅ **PDF/SVG/动画支持**
          - ✅ **内置字体和文本处理**
          - ✅ **图像编解码支持**
          - ✅ **颜色管理** (skcms模块)
          - ✅ **C++20标准编译**
          - ✅ **统一接口库** (skdn)
          - ✅ **外部Dawn WebGPU支持**
          - ✅ **全平台支持**
          - ✅ **生产环境就绪**
          
          ## Android修复
          
          - ✅ **修复NDK路径问题**: 自动检测和安装Android NDK
          - ✅ **智能磁盘清理**: Android构建时保留必要的Android SDK
          - ✅ **多重NDK支持**: 支持系统自带和自动安装的NDK
          - ✅ **增强验证**: 详细的NDK路径和文件验证
          - ✅ **容错机制**: 自动回退和错误处理
          
          ## 架构说明
          
          - 此版本专注于Skia核心功能和Graphite渲染引擎
          - Dawn WebGPU作为可选的外部依赖，可通过CMake链接
          - 提供了便捷的CMake函数来简化Dawn的集成
          - 支持动态启用/禁用Dawn功能
          - Android构建使用智能NDK管理，确保构建成功
        files: |
          artifacts/*/**.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
