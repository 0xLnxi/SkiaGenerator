name: 编译 Skia 多平台动态库构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64架构
          - os: windows-latest
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            
          # Windows ARM64架构
          - os: windows-latest
            platform: arm64_windows
            arch: arm64
            target_os: win
            target_cpu: arm64
            
          # macOS x64架构
          - os: macos-latest
            platform: x64_macos
            arch: x64
            target_os: mac
            target_cpu: x64
            
          # macOS ARM64架构
          - os: macos-latest
            platform: arm64_macos
            arch: arm64
            target_os: mac
            target_cpu: arm64
            
          # Linux x64架构
          - os: ubuntu-latest
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            
          # Linux ARM64架构
          - os: ubuntu-latest
            platform: arm64_linux
            arch: arm64
            target_os: linux
            target_cpu: arm64
            
          # Android x64架构
          - os: ubuntu-latest
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            
          # Android ARM64架构
          - os: ubuntu-latest
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64

    steps:
    # 检出代码仓库
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 设置Python运行环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    # 安装Linux系统依赖包
    - name: 安装Linux系统依赖
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 安装基础构建工具
        sudo apt-get install -y build-essential ninja-build
        # 安装图形和字体相关依赖
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev
        # 安装Vulkan开发库
        sudo apt-get install -y libvulkan-dev vulkan-tools
        # 安装其他图形库
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        # 安装ICU和HarfBuzz
        sudo apt-get install -y libicu-dev libharfbuzz-dev
        # 如果是ARM64平台，安装交叉编译工具链
        if [ "${{ matrix.target_cpu }}" = "arm64" ] && [ "${{ matrix.target_os }}" = "linux" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
        
    # 安装macOS系统依赖
    - name: 安装macOS系统依赖
      if: runner.os == 'macOS'
      run: |
        # 安装Xcode命令行工具
        xcode-select --install 2>/dev/null || true
        # 安装ninja构建工具
        brew install ninja || true
        echo "使用Skia内置的依赖库"
        
    # 安装Windows系统依赖
    - name: 安装Windows系统依赖
      if: runner.os == 'Windows'
      run: |
        # 安装ninja构建工具
        choco install ninja -y
        
    # 设置Android NDK环境（仅限Android平台）
    - name: 设置Android NDK
      if: matrix.target_os == 'android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    # 获取Google的depot_tools工具集
    - name: 获取depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
      shell: bash
      
    # 设置Windows系统的depot_tools环境变量
    - name: 设置depot_tools环境变量
      if: runner.os == 'Windows'
      run: |
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用depot_tools自动下载工具链
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    # 获取Skia源代码并同步依赖
    - name: 获取Skia源代码
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
      shell: bash
      
    # 配置各平台的构建参数
    - name: 配置构建参数
      run: |
        cd skia
        
        # 基础构建参数设置 - 启用全量功能并生成动态库
        args="is_official_build=true"
        args="$args is_component_build=true"
        args="$args skia_use_system_expat=false"
        args="$args skia_use_system_icu=false"
        args="$args skia_use_system_libjpeg_turbo=false"
        args="$args skia_use_system_libpng=false"
        args="$args skia_use_system_libwebp=false"
        args="$args skia_use_system_zlib=false"
        
        # 启用核心功能支持，使用内置依赖库
        args="$args skia_enable_pdf=true"
        args="$args skia_enable_skshaper=true"
        args="$args skia_enable_svg=true"
        args="$args skia_use_icu=true"
        
        # 启用GPU后端支持
        args="$args skia_enable_gpu=true"
        args="$args skia_use_gl=true"
        args="$args skia_use_vulkan=true"
        args="$args skia_enable_spirv_validation=false"
        
        # 禁用工具构建以避免测试工具API问题
        args="$args skia_enable_tools=false"
        
        # 设置目标平台和架构
        args="$args target_os=\"${{ matrix.target_os }}\""
        args="$args target_cpu=\"${{ matrix.target_cpu }}\""
        
        # 根据不同平台设置特定参数
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台特定配置 - 禁用有问题的模块
            args="$args skia_use_angle=true"
            args="$args skia_use_direct3d=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=false"
            args="$args skia_use_piex=false"
            args="$args skia_enable_skottie=true"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "mac")
            # macOS平台特定配置 - 禁用Skottie以避免链接问题
            args="$args skia_use_metal=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_fontconfig=false"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_pdf_subset_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            # 在macOS上暂时禁用Skottie避免链接问题
            args="$args skia_enable_skottie=false"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args target_cpu=\"arm64\""
            fi
            ;;
          "linux")
            # Linux平台特定配置
            args="$args skia_use_x11=true"
            args="$args skia_use_freetype=true"
            args="$args skia_use_fontconfig=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            args="$args skia_enable_skottie=true"
            if [ "${{ matrix.target_cpu }}" = "arm64" ]; then
              args="$args cc=\"aarch64-linux-gnu-gcc\""
              args="$args cxx=\"aarch64-linux-gnu-g++\""
              args="$args ar=\"aarch64-linux-gnu-ar\""
              args="$args skia_use_system_freetype2=false"
              args="$args skia_use_system_harfbuzz=false"
            else
              args="$args skia_use_system_freetype2=true"
              args="$args skia_use_system_harfbuzz=true"
            fi
            ;;
          "android")
            # Android平台特定配置
            args="$args ndk=\"$ANDROID_NDK_ROOT\""
            args="$args skia_use_system_freetype2=false"
            args="$args skia_use_freetype=true"
            args="$args skia_enable_fontmgr_android=true"
            args="$args skia_use_vulkan=true"
            args="$args skia_use_harfbuzz=true"
            args="$args skia_use_system_harfbuzz=false"
            args="$args skia_use_dng_sdk=true"
            args="$args skia_use_piex=true"
            args="$args skia_enable_skottie=true"
            ;;
        esac
        
        echo "构建参数: $args"
        echo "BUILD_ARGS=$args" >> $GITHUB_ENV
      shell: bash
      
    # 使用GN生成构建文件
    - name: 生成构建文件
      run: |
        cd skia
        bin/gn gen out/Release --args="$BUILD_ARGS"
      shell: bash
      
    # 使用Ninja编译Skia
    - name: 编译Skia
      run: |
        cd skia
        ninja -C out/Release
      shell: bash
      
    # 创建发布包并整理文件
    - name: 创建发布包
      run: |
        cd skia
        
        # 创建输出目录结构
        mkdir -p package/include
        mkdir -p package/lib
        mkdir -p package/bin
        mkdir -p package/docs
        mkdir -p package/examples
        
        # 复制头文件到包目录
        cp -r include/* package/include/
        
        # 复制模块相关头文件
        if [ -d "modules" ]; then
          mkdir -p package/include/modules
          cp -r modules/*/include/* package/include/modules/ 2>/dev/null || true
        fi
        
        # 根据不同平台复制相应的库文件和可执行文件
        case "${{ matrix.target_os }}" in
          "win")
            # Windows平台文件复制 - 静态库到lib，动态库到bin
            find out/Release -name "*.lib" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.dll" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -name "*.exe" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
          "mac")
            # macOS平台文件复制 - 静态库到lib，动态库到bin
            find out/Release -name "*.a" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.dylib" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -not -name "*.dylib" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
          "linux"|"android")
            # Linux和Android平台文件复制 - 静态库到lib，动态库到bin
            find out/Release -name "*.a" -exec cp {} package/lib/ \; 2>/dev/null || true
            find out/Release -name "*.so" -exec cp {} package/bin/ \; 2>/dev/null || true
            find out/Release -type f -perm +111 -name "*" -not -name "*.so" -exec cp {} package/bin/ \; 2>/dev/null || true
            ;;
        esac
        
        # 复制示例文件
        if [ -d "resources" ]; then
          cp -r resources/* package/examples/ 2>/dev/null || true
        fi
        
        # 创建构建信息文件
        cat > package/BUILD_INFO.txt << EOF
        Skia 动态库构建信息
        ==================
        平台: ${{ matrix.target_os }}
        架构: ${{ matrix.target_cpu }}
        包名: ${{ matrix.platform }}
        构建模式: Release (官方动态库构建)
        
        支持的功能:
        - GPU渲染 (OpenGL + Vulkan)
        - PDF导出 (内置HarfBuzz)
        - SVG支持
        - 文本整形 (内置HarfBuzz)
        - 字体管理 (内置FreeType)
        - 图像编解码
        
        图形后端:
        - OpenGL/OpenGL ES
        - Vulkan
        - Metal (仅macOS)
        - Direct3D (仅Windows)
        
        动态库说明:
        - 动态库位于 bin/ 目录
        - 静态库位于 lib/ 目录
        - CMake默认链接动态库
        - 使用内置依赖避免系统库冲突
        
        平台特殊说明:
        - macOS平台为避免链接问题暂时禁用了Skottie模块
        - 其他平台支持完整功能包括Skottie动画
        - 所有平台都支持核心2D渲染和GPU加速
        EOF
        
        # 创建使用说明文件
        cat > package/README.md << EOF
        # Skia 动态库构建包 - ${{ matrix.platform }}

        这是Skia图形库的动态库预编译构建包，包含核心功能模块。

        ## 包含内容

        - include/ - 完整的Skia C++ API头文件
        - lib/ - 静态库文件（备用）
        - bin/ - 动态库文件（主要使用）
        - examples/ - 示例资源文件
        - BUILD_INFO.txt - 详细构建信息
        - CMakeLists.txt - CMake配置文件，默认链接动态库

        ## 动态库特性

        ### 动态库位置
        - Windows: bin/*.dll
        - macOS: bin/*.dylib  
        - Linux: bin/*.so
        - Android: bin/*.so

        ### 优势
        - 更小的可执行文件体积
        - 便于库更新和维护
        - 支持多个程序共享同一库
        - 减少内存占用

        ## 支持的功能

        此动态库构建包含Skia的核心功能：
        
        ### 核心渲染功能
        - 2D绘图和路径渲染
        - 图像处理和滤镜效果
        - GPU加速渲染
        - 多线程渲染支持
        
        ### 图形后端
        - OpenGL/OpenGL ES
        - Vulkan
        - Metal (macOS)
        - Direct3D (Windows)
        
        ### 高级功能
        - PDF文档生成和导出
        - SVG矢量图形支持
        - 复杂文本布局和整形
        - 多种字体格式支持
        - 完整的图像编解码器
        
        ### 动画功能
        - Skottie Lottie动画（除macOS外）
        - macOS平台暂时不支持Skottie以确保构建稳定性

        ## CMake使用方法

        1. 将此包解压到你的项目目录中
        2. 在你的CMakeLists.txt中添加：
           \`\`\`cmake
           add_subdirectory(path/to/skia)
           target_link_libraries(your_target skia::skia)
           \`\`\`

        ### CMake自动配置
        - 自动链接bin目录中的动态库
        - 自动设置运行时库路径
        - 跨平台库文件格式自动适配

        ## 平台特殊说明

        ### macOS平台
        - 为确保构建稳定性，暂时禁用了Skottie动画模块
        - 支持所有其他功能包括Metal GPU渲染
        - 如需Skottie支持，请使用其他平台或自行编译

        ### 其他平台
        - 支持完整功能包括Skottie动画
        - 提供最佳的功能完整性

        ## 平台信息

        - 目标操作系统: ${{ matrix.target_os }}
        - 目标架构: ${{ matrix.target_cpu }}
        - 图形API: OpenGL + Vulkan
        - 库类型: 动态库（首选）+ 静态库（备用）
        
        ## 部署建议
        
        ### 开发阶段
        - 使用动态库便于调试和快速迭代
        - 确保动态库路径正确配置
        
        ### 生产部署
        - 将动态库与应用程序一起分发
        - 配置正确的库搜索路径
        - 考虑版本兼容性问题
        EOF
        
      shell: bash
      
    # 生成CMakeLists.txt文件
    - name: 生成CMakeLists.txt
      run: |
        cd skia/package
        
        # 生成CMakeLists.txt文件
        cat > CMakeLists.txt << 'EOF'
        # Skia动态库的CMake配置文件
        cmake_minimum_required(VERSION 3.15)
        
        # 设置项目信息
        project(SkiaPrebuilt
            VERSION 1.0.0
            DESCRIPTION "Skia动态库预编译包"
            LANGUAGES CXX C
        )
        
        # 设置C++标准
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # 获取当前目录
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        # 创建skia::skia接口库
        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)
        
        # 设置包含目录
        target_include_directories(skia INTERFACE
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include>
            $<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include/modules>
            $<INSTALL_INTERFACE:include>
            $<INSTALL_INTERFACE:include/modules>
        )
        
        # 查找动态库文件（优先使用）
        if(WIN32)
            file(GLOB SKIA_DYNAMIC_LIBRARIES "${SKIA_ROOT_DIR}/bin/*.dll")
            file(GLOB SKIA_IMPORT_LIBRARIES "${SKIA_ROOT_DIR}/lib/*.lib")
        elseif(APPLE)
            file(GLOB SKIA_DYNAMIC_LIBRARIES "${SKIA_ROOT_DIR}/bin/*.dylib")
        else()
            file(GLOB SKIA_DYNAMIC_LIBRARIES "${SKIA_ROOT_DIR}/bin/*.so")
        endif()
        
        # 查找静态库文件（备用）
        file(GLOB SKIA_STATIC_LIBRARIES "${SKIA_ROOT_DIR}/lib/*")
        
        # 根据平台设置特定的链接库和编译选项
        if(WIN32)
            # Windows平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_WIN=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
                UNICODE
                _UNICODE
            )
            
            # Windows优先使用动态库（DLL + 导入库）
            if(SKIA_DYNAMIC_LIBRARIES AND SKIA_IMPORT_LIBRARIES)
                target_link_libraries(skia INTERFACE ${SKIA_IMPORT_LIBRARIES})
                set_target_properties(skia PROPERTIES
                    INTERFACE_LINK_DIRECTORIES "${SKIA_ROOT_DIR}/bin"
                )
                message(STATUS "使用Skia动态库: ${SKIA_DYNAMIC_LIBRARIES}")
            else()
                target_link_libraries(skia INTERFACE ${SKIA_STATIC_LIBRARIES})
                message(STATUS "使用Skia静态库: ${SKIA_STATIC_LIBRARIES}")
            endif()
            
            # 添加Windows系统库
            target_link_libraries(skia INTERFACE
                OpenGL32 d3d11 dxgi d3dcompiler
                Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid Advapi32 Shell32 Usp10 Ws2_32
            )
            
        elseif(APPLE)
            # macOS平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_METAL=1
                SK_GL=1
                SK_VULKAN=1
                SK_BUILD_FOR_MAC=1
                SK_ENABLE_SVG=1
                # 注意：macOS版本暂不支持Skottie
            )
            
            # macOS优先使用动态库
            if(SKIA_DYNAMIC_LIBRARIES)
                target_link_libraries(skia INTERFACE ${SKIA_DYNAMIC_LIBRARIES})
                target_link_options(skia INTERFACE 
                    "-Wl,-rpath,${SKIA_ROOT_DIR}/bin"
                    "-Wl,-rpath,@loader_path"
                )
                message(STATUS "使用Skia动态库: ${SKIA_DYNAMIC_LIBRARIES}")
            else()
                target_link_libraries(skia INTERFACE ${SKIA_STATIC_LIBRARIES})
                message(STATUS "使用Skia静态库: ${SKIA_STATIC_LIBRARIES}")
            endif()
            
            # 查找macOS系统框架
            find_library(FOUNDATION_FRAMEWORK Foundation)
            find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
            find_library(CORETEXT_FRAMEWORK CoreText)
            find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
            find_library(COCOA_FRAMEWORK Cocoa)
            find_library(METAL_FRAMEWORK Metal)
            find_library(METALKIT_FRAMEWORK MetalKit)
            find_library(OPENGL_FRAMEWORK OpenGL)
            find_library(QUARTZCORE_FRAMEWORK QuartzCore)
            find_library(IOSURFACE_FRAMEWORK IOSurface)
            
            target_link_libraries(skia INTERFACE
                ${FOUNDATION_FRAMEWORK} ${COREGRAPHICS_FRAMEWORK} ${CORETEXT_FRAMEWORK}
                ${COREFOUNDATION_FRAMEWORK} ${COCOA_FRAMEWORK} ${METAL_FRAMEWORK}
                ${METALKIT_FRAMEWORK} ${OPENGL_FRAMEWORK} ${QUARTZCORE_FRAMEWORK} ${IOSURFACE_FRAMEWORK}
            )
            
        elseif(ANDROID)
            # Android平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_ANDROID=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # Android优先使用动态库
            if(SKIA_DYNAMIC_LIBRARIES)
                target_link_libraries(skia INTERFACE ${SKIA_DYNAMIC_LIBRARIES})
                message(STATUS "使用Skia动态库: ${SKIA_DYNAMIC_LIBRARIES}")
            else()
                target_link_libraries(skia INTERFACE ${SKIA_STATIC_LIBRARIES})
                message(STATUS "使用Skia静态库: ${SKIA_STATIC_LIBRARIES}")
            endif()
            
            target_link_libraries(skia INTERFACE
                GLESv2 EGL vulkan android log jnigraphics mediandk
            )
            
        else()
            # Linux平台配置
            target_compile_definitions(skia INTERFACE
                SK_GANESH=1
                SK_VULKAN=1
                SK_GL=1
                SK_BUILD_FOR_UNIX=1
                SK_ENABLE_SKOTTIE=1
                SK_ENABLE_SVG=1
            )
            
            # Linux优先使用动态库
            if(SKIA_DYNAMIC_LIBRARIES)
                target_link_libraries(skia INTERFACE ${SKIA_DYNAMIC_LIBRARIES})
                target_link_options(skia INTERFACE 
                    "-Wl,-rpath,${SKIA_ROOT_DIR}/bin"
                    "-Wl,-rpath,$ORIGIN"
                )
                message(STATUS "使用Skia动态库: ${SKIA_DYNAMIC_LIBRARIES}")
            else()
                target_link_libraries(skia INTERFACE ${SKIA_STATIC_LIBRARIES})
                message(STATUS "使用Skia静态库: ${SKIA_STATIC_LIBRARIES}")
            endif()
            
            # 查找必要的系统库
            find_package(PkgConfig QUIET)
            if(PKG_CONFIG_FOUND)
                pkg_check_modules(FONTCONFIG QUIET fontconfig)
                pkg_check_modules(HARFBUZZ QUIET harfbuzz)
            endif()
            
            find_package(Vulkan QUIET)
            find_package(X11 QUIET)
            
            target_link_libraries(skia INTERFACE GL pthread dl m)
            
            if(FONTCONFIG_FOUND)
                target_link_libraries(skia INTERFACE ${FONTCONFIG_LIBRARIES})
                target_include_directories(skia INTERFACE ${FONTCONFIG_INCLUDE_DIRS})
            endif()
            
            if(HARFBUZZ_FOUND)
                target_link_libraries(skia INTERFACE ${HARFBUZZ_LIBRARIES})
                target_include_directories(skia INTERFACE ${HARFBUZZ_INCLUDE_DIRS})
            endif()
            
            if(Vulkan_FOUND)
                target_link_libraries(skia INTERFACE ${Vulkan_LIBRARIES})
                target_include_directories(skia INTERFACE ${Vulkan_INCLUDE_DIRS})
            endif()
            
            if(X11_FOUND)
                target_link_libraries(skia INTERFACE
                    ${X11_LIBRARIES} ${X11_Xrandr_LIB} ${X11_Xinerama_LIB} 
                    ${X11_Xcursor_LIB} ${X11_Xi_LIB}
                )
                target_include_directories(skia INTERFACE ${X11_INCLUDE_DIR})
            endif()
        endif()
        
        # 设置编译选项
        target_compile_features(skia INTERFACE cxx_std_17)
        
        # 优化设置
        target_compile_options(skia INTERFACE
            $<$<CONFIG:Debug>:-g -O0>
            $<$<CONFIG:Release>:-O3 -DNDEBUG>
            $<$<CONFIG:RelWithDebInfo>:-O2 -g -DNDEBUG>
        )
        
        # 设置预处理器定义
        target_compile_definitions(skia INTERFACE
            $<$<CONFIG:Debug>:SK_DEBUG>
            $<$<CONFIG:Release>:SK_RELEASE>
        )
        
        # 显示配置信息
        message(STATUS "Skia动态库预编译包配置完成")
        message(STATUS "  - 包含目录: ${SKIA_ROOT_DIR}/include")
        message(STATUS "  - 模块包含目录: ${SKIA_ROOT_DIR}/include/modules")
        message(STATUS "  - 动态库目录: ${SKIA_ROOT_DIR}/bin")
        message(STATUS "  - 静态库目录: ${SKIA_ROOT_DIR}/lib")
        message(STATUS "  - 支持GPU渲染: OpenGL + Vulkan")
        message(STATUS "  - 支持核心功能: PDF, SVG")
        message(STATUS "  - 字体和文本: 内置FreeType + HarfBuzz")
        message(STATUS "  - 库类型: 动态库优先，静态库备用")
        if(APPLE)
            message(STATUS "  - 注意: macOS版本暂不包含Skottie模块")
        else()
            message(STATUS "  - 动画支持: Skottie Lottie动画")
        endif()
        
        # 创建便捷的配置检查函数
        function(check_skia_features)
            message(STATUS "Skia动态库功能检查:")
            message(STATUS "  ✓ 2D渲染和绘图")
            message(STATUS "  ✓ GPU加速 (OpenGL/Vulkan)")
            message(STATUS "  ✓ PDF文档生成")
            message(STATUS "  ✓ SVG矢量图形")
            message(STATUS "  ✓ 高级文本处理")
            message(STATUS "  ✓ 图像编解码")
            message(STATUS "  ✓ 动态库链接")
            message(STATUS "  ✓ 运行时路径配置")
            if(NOT APPLE)
                message(STATUS "  ✓ Skottie动画支持")
            else()
                message(STATUS "  ⚠ Skottie动画 (暂不支持)")
            endif()
        endfunction()
        
        # 自动调用功能检查
        check_skia_features()
        
        # 辅助函数：复制动态库到输出目录（可选）
        function(copy_skia_dlls TARGET_NAME)
            if(WIN32 AND SKIA_DYNAMIC_LIBRARIES)
                add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    ${SKIA_DYNAMIC_LIBRARIES}
                    $<TARGET_FILE_DIR:${TARGET_NAME}>
                    COMMENT "正在复制Skia动态库到输出目录"
                )
            endif()
        endfunction()
        
        # 使用说明
        message(STATUS "")
        message(STATUS "使用方法:")
        message(STATUS "  target_link_libraries(your_target skia::skia)")
        message(STATUS "  # Windows下可选择复制DLL:")
        message(STATUS "  # copy_skia_dlls(your_target)")
        EOF
        
      shell: bash
      
    # 打包构建产物为ZIP文件
    - name: 打包构建产物
      run: |
        cd skia/package
        
        # 根据运行平台选择合适的打包方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows系统使用PowerShell的Compress-Archive
          powershell "Compress-Archive -Path * -DestinationPath ../${{ matrix.platform }}.zip"
        else
          # Unix系统使用zip命令打包
          zip -r "../${{ matrix.platform }}.zip" *
        fi
        
        # 验证ZIP文件是否创建成功
        if [ -f "../${{ matrix.platform }}.zip" ]; then
          echo "构建包创建成功: ${{ matrix.platform }}.zip"
          ls -lh "../${{ matrix.platform }}.zip" 2>/dev/null || dir "../${{ matrix.platform }}.zip"
        else
          echo "构建包创建失败"
          exit 1
        fi
      shell: bash
      
    # 上传构建产物到GitHub Actions
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: skia/${{ matrix.platform }}.zip
        retention-days: 30
        compression-level: 0
        
  # 创建GitHub Release发布（仅在推送到主分支或定时任务时）
  create-release:
    needs: build-skia
    runs-on: ubuntu-latest
    # 在推送到主分支或定时任务且所有构建成功时才创建Release
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule'
    
    # 为此作业设置必要的权限
    permissions:
      contents: write
      packages: write
    
    steps:
    # 检出代码以访问仓库信息
    - name: 检出代码仓库
      uses: actions/checkout@v4
      
    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    # 验证所有构建产物的完整性
    - name: 验证所有构建产物
      run: |
        echo "正在验证构建产物..."
        total_size=0
        success_count=0
        
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            platform=$(basename "$dir")
            zip_file="$dir$platform.zip"
            if [ -f "$zip_file" ]; then
              size=$(stat -c%s "$zip_file")
              echo "✅ 构建包: $platform.zip - $(numfmt --to=iec $size)"
              total_size=$((total_size + size))
              success_count=$((success_count + 1))
            else
              echo "❌ 缺少构建包: $platform.zip"
            fi
          fi
        done
        
        echo "📊 成功构建: $success_count 个平台"
        echo "📊 所有构建包总大小: $(numfmt --to=iec $total_size)"
        
        # 如果没有任何成功的构建包，则退出
        if [ $success_count -eq 0 ]; then
          echo "❌ 没有找到任何构建包，跳过Release创建"
          exit 1
        fi
        
    # 创建发布说明文档
    - name: 创建发布说明
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # Skia 动态库多平台构建包

        这个发布包包含了Skia图形库在多个平台和架构上的动态库预编译版本，针对稳定性和兼容性进行了优化。

        ## 包含的平台

        ### Windows
        - x64_windows.zip - Windows x64架构
        - arm64_windows.zip - Windows ARM64架构

        ### macOS  
        - x64_macos.zip - macOS Intel架构
        - arm64_macos.zip - macOS Apple Silicon架构

        ### Linux
        - x64_linux.zip - Linux x64架构  
        - arm64_linux.zip - Linux ARM64架构

        ### Android
        - x64_android.zip - Android x64架构
        - arm64_android.zip - Android ARM64架构

        ## 每个包都包含

        - include/ - 完整的Skia C++ API头文件和模块头文件
        - lib/ - 静态库文件（备用）
        - **bin/ - 动态库文件（主要使用）**
        - examples/ - 示例资源文件
        - BUILD_INFO.txt - 详细的构建信息
        - README.md - 使用说明
        - CMakeLists.txt - CMake配置文件，默认链接动态库

        ## 动态库特性

        ### 动态库格式
        - **Windows**: bin/*.dll + lib/*.lib（导入库）
        - **macOS**: bin/*.dylib
        - **Linux**: bin/*.so
        - **Android**: bin/*.so

        ### 动态库优势
        - ✅ **更小的可执行文件** - 主程序体积显著减小
        - ✅ **便于更新维护** - 可单独更新库文件
        - ✅ **多程序共享** - 多个程序可共享同一库实例
        - ✅ **减少内存占用** - 系统级别的库共享
        - ✅ **模块化部署** - 可选择性部署所需功能

        ## 核心功能支持

        ### 高性能渲染
        - 高性能2D矢量图形渲染
        - 位图和像素操作
        - 路径绘制和填充
        - 渐变和图案填充
        - 图像滤镜和效果

        ### GPU加速渲染
        - **OpenGL/OpenGL ES** - 跨平台GPU渲染
        - **Vulkan** - 现代低开销GPU API  
        - **Metal** - macOS/iOS原生GPU API
        - **Direct3D** - Windows原生GPU API

        ### 高级功能
        - **PDF文档生成** - 完整的PDF导出功能，支持字体子集
        - **SVG矢量图形** - SVG文件解析和渲染
        - **复杂文本布局** - 内置HarfBuzz文本整形引擎
        - **多语言字体** - 内置FreeType字体渲染引擎
        - **图像编解码** - 支持多种图像格式
        - **DNG RAW图像** - RAW图像处理（除Windows平台外）

        ### 平台特殊功能支持

        #### Skottie动画支持
        - **Windows**: ✅ 完整支持Skottie Lottie动画
        - **Linux**: ✅ 完整支持Skottie Lottie动画  
        - **Android**: ✅ 完整支持Skottie Lottie动画
        - **macOS**: ❌ 暂时禁用（为确保构建稳定性）

        ## CMake集成（推荐方式）

        ### 基本用法
        ```cmake
        # 添加Skia子目录
        add_subdirectory(path/to/skia)

        # 链接到你的目标（自动使用动态库）
        target_link_libraries(your_target skia::skia)
        ```

        ### CMake自动特性
        - ✅ **优先链接动态库** - 自动检测并使用bin目录中的动态库
        - ✅ **自动设置运行时路径** - 配置rpath/runpath
        - ✅ **跨平台适配** - 自动适配不同平台的库格式
        - ✅ **依赖管理** - 自动链接所需的系统库
        - ✅ **备用静态库** - 动态库不可用时自动回退到静态库

        ## 平台特殊说明

        ### macOS平台限制
        由于Skottie模块在macOS平台存在链接器符号冲突问题，当前版本已禁用Skottie支持以确保构建稳定性。

        **macOS平台支持的功能：**
        - ✅ 完整的2D渲染和GPU加速
        - ✅ PDF文档生成
        - ✅ SVG矢量图形
        - ✅ Metal GPU渲染
        - ✅ 高级文本处理
        - ❌ Skottie动画（暂时禁用）

        **解决方案：**
        - 使用其他平台的构建包以获得Skottie支持
        - 或者等待未来版本的修复

        ### 其他平台
        Windows、Linux和Android平台支持完整功能，包括Skottie动画支持。

        ## 部署指南

        ### 开发环境
        1. 解压构建包到项目目录
        2. 使用CMake自动配置
        3. 确保动态库路径正确

        ### 生产环境
        1. **Windows**: 将DLL文件与可执行文件一起分发
        2. **macOS**: 使用`install_name_tool`配置rpath或bundle库文件
        3. **Linux**: 配置LD_LIBRARY_PATH或使用rpath
        4. **Android**: 将.so文件打包到APK的lib目录

        ## 性能特性

        - **GPU加速**: 支持硬件加速渲染
        - **多线程**: 支持并行渲染和处理  
        - **内存优化**: 动态库共享减少内存占用
        - **启动优化**: 延迟加载和按需加载
        - **缓存机制**: 智能的资源缓存
        - **文本优化**: 内置文本引擎提供最佳性能

        ## 使用建议

        ### 最佳实践
        1. **优先使用CMake** - 自动处理复杂的链接配置
        2. **测试运行时路径** - 确保程序能找到动态库
        3. **版本管理** - 注意动态库版本兼容性
        4. **功能选择** - 根据平台选择合适的功能
        5. **备用方案** - 准备静态库作为备选

        ### 动画功能建议
        - **需要Skottie**: 优先选择Windows、Linux或Android平台
        - **macOS开发**: 考虑使用其他动画库或等待后续版本

        ## 兼容性

        - **最低系统要求**: 
          - Windows 10+
          - macOS 10.15+  
          - Linux kernel 4.4+
          - Android API 21+
        - **GPU要求**: 支持OpenGL 3.3+或Vulkan 1.0+的显卡
        - **运行时**: 确保动态库路径正确配置

        ## 自动更新

        此构建包每天自动更新，确保包含最新的稳定Skia代码。我们会持续监控macOS平台的Skottie问题并在后续版本中修复。

        ## 技术支持

        如有问题，请查看包内的README.md文件。macOS平台的Skottie问题将在后续版本中解决。
        EOF
        
    # 获取发布标签
    - name: 获取发布标签
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          # 定时任务使用日期作为标签
          echo "tag=daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia动态库每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          # 手动触发使用构建编号
          echo "tag=skia-dynamic-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia动态库构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi
        
    # 创建GitHub Release发布版本
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body_path: RELEASE_NOTES.md
        files: |
          artifacts/*/**.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: 构建完成通知
      run: |
        echo "🎉 Skia动态库多平台构建完成！"
        echo "📦 已生成以下平台的动态库构建包："
        echo "   • Windows: x64, ARM64 (完整功能包括Skottie)"  
        echo "   • macOS: x64, ARM64 (除Skottie外的完整功能)"
        echo "   • Linux: x64, ARM64 (完整功能包括Skottie)"
        echo "   • Android: x64, ARM64 (完整功能包括Skottie)"
        echo "🔗 可在Actions页面下载，或在Releases中获取"
        echo "📋 每个包都包含动态库优先的CMakeLists.txt配置"
        echo "🎮 支持OpenGL和Vulkan GPU后端"
        echo "✨ 包含PDF、SVG等核心功能"
        echo "🔤 使用内置字体和文本引擎，无系统依赖"
        echo "📄 PDF导出支持字体子集功能"
        echo "🚀 动态库优化，便于部署和维护"
        echo "📁 动态库位于bin目录，CMake自动链接"
        echo "⚠️  macOS平台暂时禁用Skottie以确保构建稳定性"
