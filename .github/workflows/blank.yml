name: Build Skia and Dawn

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 设置Visual Studio环境
      uses: microsoft/setup-msbuild@v2

    - name: 安装Depot Tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$env:GITHUB_WORKSPACE\depot_tools" >> $env:GITHUB_PATH
      shell: powershell

    - name: 下载Skia源码
      run: |
        mkdir skia-build
        cd skia-build
        gclient config --name skia https://skia.googlesource.com/skia.git
        gclient sync
      shell: cmd

    - name: 下载Dawn源码
      run: |
        git clone --recursive https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        python tools/fetch_dawn_dependencies.py
      shell: cmd

    - name: 配置Skia构建 - Windows
      run: |
        cd skia-build\skia
        python tools/git-sync-deps
        gn gen out\${{ matrix.arch }}-windows --args="is_official_build=true is_debug=false extra_cflags=[\"/O2\", \"/Zi\"] target_cpu=\"${{ matrix.arch }}\" skia_use_dawn=true skia_use_gl=true skia_use_direct3d=true skia_use_vulkan=true cc=\"clang\" cxx=\"clang++\" clang_win=\"C:/Program Files/LLVM\""
      shell: cmd

    - name: 安装LLVM 18
      run: |
        choco install llvm --version=18.1.8 --force
        echo "C:\Program Files\LLVM\bin" >> $env:GITHUB_PATH
      shell: powershell

    - name: 配置Dawn构建 - Windows
      run: |
        cd dawn-source
        mkdir build-win-${{ matrix.arch }}
        cd build-win-${{ matrix.arch }}
        cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.arch == 'x64' && 'x64' || 'Win32' }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DDAWN_BUILD_SAMPLES=OFF -DDAWN_ENABLE_D3D11=ON -DDAWN_ENABLE_D3D12=ON -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON -DCMAKE_CXX_STANDARD=20
      shell: cmd

    - name: 编译Dawn - Windows
      run: |
        cd dawn-source\build-win-${{ matrix.arch }}
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
      shell: cmd

    - name: 编译Skia - Windows
      run: |
        cd skia-build\skia
        ninja -C out\${{ matrix.arch }}-windows -j 4
      shell: cmd

    - name: 收集Dawn生成文件 - Windows
      run: |
        mkdir dawn-generated\include\dawn
        mkdir dawn-generated\include\webgpu
        mkdir dawn-generated\src\dawn
        mkdir dawn-generated\src\emdawnwebgpu
        
        # 复制生成的头文件
        xcopy /E /I /Y dawn-source\build-win-${{ matrix.arch }}\gen\include\dawn dawn-generated\include\dawn\
        xcopy /E /I /Y dawn-source\build-win-${{ matrix.arch }}\gen\include\webgpu dawn-generated\include\webgpu\
        xcopy /E /I /Y dawn-source\build-win-${{ matrix.arch }}\gen\src\dawn dawn-generated\src\dawn\
        xcopy /E /I /Y dawn-source\build-win-${{ matrix.arch }}\gen\src\emdawnwebgpu dawn-generated\src\emdawnwebgpu\
        xcopy /E /I /Y dawn-source\build-win-${{ matrix.arch }}\gen\webgpu-headers dawn-generated\webgpu-headers\
      shell: cmd

    - name: 准备Windows输出目录
      run: |
        mkdir Skia\include\core
        mkdir Skia\include\dawn
        mkdir Skia\include\modules
        mkdir Skia\bin\Win\${{ matrix.arch }}
        mkdir Skia\lib\Win\${{ matrix.arch }}
        
        # 复制Skia头文件
        xcopy /E /I /Y skia-build\skia\include Skia\include\core\
        xcopy /E /I /Y skia-build\skia\modules Skia\include\modules\
        
        # 复制Dawn头文件和生成文件
        xcopy /E /I /Y dawn-source\include Skia\include\dawn\
        xcopy /E /I /Y dawn-generated\include\dawn Skia\include\dawn\
        xcopy /E /I /Y dawn-generated\include\webgpu Skia\include\dawn\
        
        # 复制二进制文件
        copy skia-build\skia\out\${{ matrix.arch }}-windows\*.exe Skia\bin\Win\${{ matrix.arch }}\ 2>nul || echo "No executables found"
        copy dawn-source\build-win-${{ matrix.arch }}\${{ env.BUILD_TYPE }}\*.exe Skia\bin\Win\${{ matrix.arch }}\ 2>nul || echo "No Dawn executables found"
        
        # 复制库文件
        copy skia-build\skia\out\${{ matrix.arch }}-windows\*.lib Skia\lib\Win\${{ matrix.arch }}\
        copy dawn-source\build-win-${{ matrix.arch }}\${{ env.BUILD_TYPE }}\*.lib Skia\lib\Win\${{ matrix.arch }}\
      shell: cmd

    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-windows-${{ matrix.arch }}
        path: Skia/

  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git python3 python3-pip curl
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev
        sudo apt-get install -y libvulkan-dev vulkan-tools
        sudo apt-get install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        sudo apt-get install -y ninja-build cmake

    - name: 安装Clang 18
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100

    - name: 安装GCC 13
      run: |
        sudo apt-get install -y gcc-13 g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

    - name: 安装Depot Tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH

    - name: 下载Skia源码
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        mkdir skia-build
        cd skia-build
        gclient config --name skia https://skia.googlesource.com/skia.git
        gclient sync

    - name: 下载Dawn源码
      run: |
        git clone --recursive https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        python3 tools/fetch_dawn_dependencies.py

    - name: 配置Skia构建 - Linux
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        python3 tools/git-sync-deps
        gn gen out/${{ matrix.arch }}-linux --args='is_official_build=true is_debug=false extra_cflags=["-O2", "-g"] target_cpu="${{ matrix.arch }}" skia_use_dawn=true skia_use_gl=true skia_use_vulkan=true cc="clang-18" cxx="clang++-18"'

    - name: 配置Dawn构建 - Linux
      run: |
        cd dawn-source
        mkdir build-linux-${{ matrix.arch }}
        cd build-linux-${{ matrix.arch }}
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DDAWN_BUILD_SAMPLES=OFF -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON -DCMAKE_CXX_STANDARD=20 -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18

    - name: 编译Dawn - Linux
      run: |
        cd dawn-source/build-linux-${{ matrix.arch }}
        ninja

    - name: 编译Skia - Linux
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        ninja -C out/${{ matrix.arch }}-linux -j 4

    - name: 收集Dawn生成文件 - Linux
      run: |
        mkdir -p dawn-generated/include/dawn
        mkdir -p dawn-generated/include/webgpu
        mkdir -p dawn-generated/src/dawn
        mkdir -p dawn-generated/src/emdawnwebgpu
        
        # 复制生成的头文件
        cp -r dawn-source/build-linux-${{ matrix.arch }}/gen/include/dawn/* dawn-generated/include/dawn/ 2>/dev/null || true
        cp -r dawn-source/build-linux-${{ matrix.arch }}/gen/include/webgpu/* dawn-generated/include/webgpu/ 2>/dev/null || true
        cp -r dawn-source/build-linux-${{ matrix.arch }}/gen/src/dawn/* dawn-generated/src/dawn/ 2>/dev/null || true
        cp -r dawn-source/build-linux-${{ matrix.arch }}/gen/src/emdawnwebgpu/* dawn-generated/src/emdawnwebgpu/ 2>/dev/null || true
        cp -r dawn-source/build-linux-${{ matrix.arch }}/gen/webgpu-headers dawn-generated/ 2>/dev/null || true

    - name: 准备Linux输出目录
      run: |
        mkdir -p Skia/include/{core,dawn,modules}
        mkdir -p Skia/bin/Linux/${{ matrix.arch }}
        mkdir -p Skia/lib/Linux/${{ matrix.arch }}
        
        # 复制Skia头文件
        cp -r skia-build/skia/include/* Skia/include/core/
        cp -r skia-build/skia/modules/* Skia/include/modules/
        
        # 复制Dawn头文件和生成文件
        cp -r dawn-source/include/* Skia/include/dawn/
        cp -r dawn-generated/include/dawn/* Skia/include/dawn/ 2>/dev/null || true
        cp -r dawn-generated/include/webgpu/* Skia/include/dawn/ 2>/dev/null || true
        
        # 复制二进制文件
        find skia-build/skia/out/${{ matrix.arch }}-linux -type f -executable -exec cp {} Skia/bin/Linux/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn-source/build-linux-${{ matrix.arch }} -name "*.so" -exec cp {} Skia/bin/Linux/${{ matrix.arch }}/ \; 2>/dev/null || true
        
        # 复制库文件
        find skia-build/skia/out/${{ matrix.arch }}-linux -name "*.a" -exec cp {} Skia/lib/Linux/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn-source/build-linux-${{ matrix.arch }} -name "*.a" -exec cp {} Skia/lib/Linux/${{ matrix.arch }}/ \; 2>/dev/null || true

    - name: 上传Linux构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-linux-${{ matrix.arch }}
        path: Skia/

  build-android:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [arm64, x64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 安装基本依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git python3 python3-pip curl unzip
        sudo apt-get install -y ninja-build cmake

    - name: 设置Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d

    - name: 安装Depot Tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH

    - name: 下载Skia源码
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        mkdir skia-build
        cd skia-build
        gclient config --name skia https://skia.googlesource.com/skia.git
        gclient sync

    - name: 下载Dawn源码
      run: |
        git clone --recursive https://dawn.googlesource.com/dawn.git dawn-source
        cd dawn-source
        python3 tools/fetch_dawn_dependencies.py

    - name: 配置Skia构建 - Android
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        python3 tools/git-sync-deps
        
        # 设置Android架构
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ANDROID_ARCH="arm64"
          ANDROID_ABI="arm64-v8a"
        else
          ANDROID_ARCH="x64"
          ANDROID_ABI="x86_64"
        fi
        
        gn gen out/${{ matrix.arch }}-android --args="is_official_build=true is_debug=false target_os=\"android\" target_cpu=\"${ANDROID_ARCH}\" skia_use_dawn=true skia_use_vulkan=true skia_use_gl=true ndk=\"${ANDROID_NDK_HOME}\" android_ndk_api_level=24"

    - name: 配置Dawn构建 - Android
      run: |
        cd dawn-source
        mkdir build-android-${{ matrix.arch }}
        cd build-android-${{ matrix.arch }}
        
        # 设置Android架构和ABI
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ANDROID_ABI="arm64-v8a"
        else
          ANDROID_ABI="x86_64"
        fi
        
        cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_SYSTEM_NAME=Android \
          -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
          -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME} \
          -DCMAKE_ANDROID_STL_TYPE=c++_static \
          -DCMAKE_ANDROID_API=24 \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DDAWN_ENABLE_VULKAN=ON \
          -DDAWN_ENABLE_OPENGLES=ON \
          -DCMAKE_CXX_STANDARD=20

    - name: 编译Dawn - Android
      run: |
        cd dawn-source/build-android-${{ matrix.arch }}
        ninja

    - name: 编译Skia - Android
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        cd skia-build/skia
        ninja -C out/${{ matrix.arch }}-android -j 4

    - name: 收集Dawn生成文件 - Android
      run: |
        mkdir -p dawn-generated/include/dawn
        mkdir -p dawn-generated/include/webgpu
        mkdir -p dawn-generated/src/dawn
        mkdir -p dawn-generated/src/emdawnwebgpu
        
        # 复制生成的头文件
        cp -r dawn-source/build-android-${{ matrix.arch }}/gen/include/dawn/* dawn-generated/include/dawn/ 2>/dev/null || true
        cp -r dawn-source/build-android-${{ matrix.arch }}/gen/include/webgpu/* dawn-generated/include/webgpu/ 2>/dev/null || true
        cp -r dawn-source/build-android-${{ matrix.arch }}/gen/src/dawn/* dawn-generated/src/dawn/ 2>/dev/null || true
        cp -r dawn-source/build-android-${{ matrix.arch }}/gen/src/emdawnwebgpu/* dawn-generated/src/emdawnwebgpu/ 2>/dev/null || true
        cp -r dawn-source/build-android-${{ matrix.arch }}/gen/webgpu-headers dawn-generated/ 2>/dev/null || true

    - name: 准备Android输出目录
      run: |
        mkdir -p Skia/include/{core,dawn,modules}
        mkdir -p Skia/bin/Android/${{ matrix.arch }}
        mkdir -p Skia/lib/Android/${{ matrix.arch }}
        
        # 复制Skia头文件
        cp -r skia-build/skia/include/* Skia/include/core/
        cp -r skia-build/skia/modules/* Skia/include/modules/
        
        # 复制Dawn头文件和生成文件
        cp -r dawn-source/include/* Skia/include/dawn/
        cp -r dawn-generated/include/dawn/* Skia/include/dawn/ 2>/dev/null || true
        cp -r dawn-generated/include/webgpu/* Skia/include/dawn/ 2>/dev/null || true
        
        # 复制库文件
        find skia-build/skia/out/${{ matrix.arch }}-android -name "*.a" -exec cp {} Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn-source/build-android-${{ matrix.arch }} -name "*.a" -exec cp {} Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true
        find dawn-source/build-android-${{ matrix.arch }} -name "*.so" -exec cp {} Skia/lib/Android/${{ matrix.arch }}/ \; 2>/dev/null || true

    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-android-${{ matrix.arch }}
        path: Skia/

  package-final:
    runs-on: ubuntu-24.04
    needs: [build-windows, build-linux, build-android]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: 合并所有构建产物
      run: |
        mkdir -p Skia-Final
        
        # 合并所有平台的构建产物
        for artifact in artifacts/skia-dawn-*; do
          if [ -d "$artifact" ]; then
            echo "合并 $artifact"
            cp -r "$artifact"/* Skia-Final/ 2>/dev/null || true
          fi
        done
        
        # 确保目录结构正确
        mkdir -p Skia-Final/include/{core,dawn,modules}
        mkdir -p Skia-Final/bin/{Win/x64,Linux/x64,Android/{arm64,x64}}
        mkdir -p Skia-Final/lib/{Win/x64,Linux/x64,Android/{arm64,x64}}

    - name: 创建CMakeLists.txt
      run: |
        cat > Skia-Final/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.20)
        project(SkiaDawn LANGUAGES CXX C)

        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # 检测当前平台和架构
        if(WIN32)
            set(PLATFORM_DIR "Win")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        elseif(ANDROID)
            set(PLATFORM_DIR "Android")
            if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
                set(ARCH_DIR "arm64")
            elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
                set(ARCH_DIR "x64")
            endif()
        elseif(UNIX)
            set(PLATFORM_DIR "Linux")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(ARCH_DIR "x64")
            else()
                set(ARCH_DIR "x86")
            endif()
        endif()

        # 设置库和二进制文件路径
        set(LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
        set(BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

        # Dawn动态库目标
        add_library(DawnDynamic INTERFACE)
        target_include_directories(DawnDynamic INTERFACE
            ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
            ${CMAKE_CURRENT_SOURCE_DIR}/include/core
        )

        # 查找Dawn生成的库文件
        file(GLOB DAWN_LIBS "${LIB_DIR}/*dawn*.a" "${LIB_DIR}/*dawn*.lib" "${LIB_DIR}/*webgpu*.a" "${LIB_DIR}/*webgpu*.lib")
        if(DAWN_LIBS)
            target_link_libraries(DawnDynamic INTERFACE ${DAWN_LIBS})
        endif()

        # Skia主目标
        add_library(Skia INTERFACE)
        target_include_directories(Skia INTERFACE
            ${CMAKE_CURRENT_SOURCE_DIR}/include/core
            ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
            ${CMAKE_CURRENT_SOURCE_DIR}/include/modules
        )

        # 查找Skia库文件
        file(GLOB SKIA_LIBS "${LIB_DIR}/*skia*.a" "${LIB_DIR}/*skia*.lib")
        if(SKIA_LIBS)
            target_link_libraries(Skia INTERFACE ${SKIA_LIBS})
        endif()

        # 链接Dawn到Skia
        target_link_libraries(Skia INTERFACE DawnDynamic)

        # 平台特定链接
        if(WIN32)
            target_link_libraries(Skia INTERFACE
                d3d11 d3d12 dxgi dxguid
                opengl32 gdi32 user32 kernel32
                vulkan-1
            )
        elseif(ANDROID)
            target_link_libraries(Skia INTERFACE
                GLESv2 EGL vulkan
                android log
            )
        elseif(UNIX)
            target_link_libraries(Skia INTERFACE
                GL vulkan
                X11 Xrandr Xinerama Xcursor Xi
            )
        endif()

        # 设置编译定义
        target_compile_definitions(Skia INTERFACE
            SK_GANESH=1
            SK_GL=1
            SK_VULKAN=1
        )

        if(WIN32)
            target_compile_definitions(Skia INTERFACE
                SK_DIRECT3D=1
            )
        endif()

        # 导出目标
        export(TARGETS Skia DawnDynamic FILE SkiaTargets.cmake)
        EOF

    - name: 创建配置文件
      run: |
        # 创建版本配置文件
        cat > Skia-Final/SkiaConfig.cmake << 'EOF'
        include(CMakeFindDependencyMacro)

        # 包含目标定义
        include("${CMAKE_CURRENT_LIST_DIR}/SkiaTargets.cmake")

        # 提供组件信息
        set(Skia_FOUND TRUE)
        set(Skia_VERSION "1.0.0")
        EOF

        # 创建版本文件
        cat > Skia-Final/SkiaConfigVersion.cmake << 'EOF'
        set(PACKAGE_VERSION "1.0.0")

        if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
        else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if(PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
                set(PACKAGE_VERSION_EXACT TRUE)
            endif()
        endif()
        EOF

    - name: 创建使用示例
      run: |
        cat > Skia-Final/example.cpp << 'EOF'
        #include "include/core/SkCanvas.h"
        #include "include/core/SkSurface.h"
        #include "include/core/SkImage.h"
        #include "include/gpu/GrDirectContext.h"
        #include "include/gpu/GrBackendSurface.h"

        #ifdef SK_DAWN
        #include "include/gpu/dawn/GrDawnTypes.h"
        #include "include/dawn/webgpu_cpp.h"
        #endif

        // Skia和Dawn集成使用示例
        int main() {
            // 这里可以添加您的Skia+Dawn渲染代码
            return 0;
        }
        EOF

        cat > Skia-Final/CMakeExample.txt << 'EOF'
        # 使用示例CMakeLists.txt
        cmake_minimum_required(VERSION 3.20)
        project(MySkiaApp)

        set(CMAKE_CXX_STANDARD 20)

        # 查找Skia包
        find_package(Skia REQUIRED PATHS /path/to/Skia)

        # 创建您的应用程序
        add_executable(MyApp main.cpp)
        target_link_libraries(MyApp Skia)
        EOF

    - name: 创建构建信息文件
      run: |
        cat > Skia-Final/BuildInfo.md << 'EOF'
        # Skia + Dawn 预编译库

        ## 构建信息
        - 构建类型: RelWithDebInfo
        - C++ 标准: C++20
        - 编译器: Clang 18, GCC 13, MSVC 2022

        ## 支持平台
        ### Windows (x64)
        - DirectX 11/12
        - Vulkan
        - OpenGL
        - 编译器: MSVC 2022

        ### Linux (x64, Ubuntu 24.04)
        - Vulkan
        - OpenGL
        - 编译器: Clang 18

        ### Android (arm64, x64)
        - Vulkan
        - OpenGL ES (EGL)
        - API Level: 24+

        ## 目录结构
        ```
        Skia/
        ├── include/
        │   ├── core/          # Skia核心头文件
        │   ├── dawn/          # Dawn WebGPU头文件
        │   └── modules/       # Skia模块头文件
        ├── bin/               # 可执行文件和动态库
        │   ├── Win/x64/
        │   ├── Linux/x64/
        │   └── Android/{arm64,x64}/
        ├── lib/               # 静态库文件
        │   ├── Win/x64/
        │   ├── Linux/x64/
        │   └── Android/{arm64,x64}/
        └── CMakeLists.txt     # CMake配置文件
        ```

        ## 使用方法
        1. 将Skia目录复制到您的项目中
        2. 在CMakeLists.txt中添加:
           ```cmake
           find_package(Skia REQUIRED PATHS /path/to/Skia)
           target_link_libraries(your_target Skia)
           ```

        ## 注意事项
        - Dawn生成的动态头文件已包含在内
        - 所有后端已合并编译，无需单独链接
        - 支持所有主要图形API
        EOF

    - name: 创建最终压缩包
      run: |
        cd Skia-Final
        zip -r ../Skia.zip . -x "*.git*"
        cd ..
        echo "文件大小:"
        du -h Skia.zip

    - name: 上传最终构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Skia-Final-Package
        path: Skia.zip

    - name: 发布Release (仅主分支)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: build-${{ github.run_number }}
        name: Skia + Dawn 预编译库 v${{ github.run_number }}
        body: |
          # Skia + Dawn 预编译库

          此版本包含完整的Skia和Dawn预编译库，支持多平台和多图形后端。

          ## 支持的平台和后端
          - **Windows x64**: DirectX 11/12, Vulkan, OpenGL
          - **Linux x64**: Vulkan, OpenGL
          - **Android arm64/x64**: Vulkan, OpenGL ES

          ## 特性
          - C++20 标准
          - RelWithDebInfo 构建配置
          - Dawn动态生成文件已包含
          - CMake 集成支持
          - 所有后端合并编译

          请下载 `Skia.zip` 文件并按照README中的说明使用。
        files: Skia.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
