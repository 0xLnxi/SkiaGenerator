name: Build Skia and Dawn

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SKIA_VERSION: chrome/m130
  DAWN_VERSION: main

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [msvc2022, clang18]
        backend: [dx12, dx11, vulkan, opengl]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 安装依赖工具
      run: |
        # 安装depot_tools
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # 安装Ninja
        choco install ninja
        
        # 设置Git配置
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: 设置MSVC环境 (MSVC编译器)
      if: matrix.compiler == 'msvc2022'
      uses: microsoft/setup-msbuild@v1.3

    - name: 设置Clang环境 (Clang编译器)
      if: matrix.compiler == 'clang18'
      run: |
        # 下载并安装LLVM/Clang 18
        $clangUrl = "https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/LLVM-18.1.8-win64.exe"
        Invoke-WebRequest -Uri $clangUrl -OutFile "llvm-installer.exe"
        Start-Process -FilePath "llvm-installer.exe" -ArgumentList "/S" -Wait
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: 下载并编译Skia
      run: |
        # 创建工作目录
        mkdir skia-build
        cd skia-build
        
        # 获取Skia源代码
        git clone https://skia.googlesource.com/skia.git
        cd skia
        git checkout ${{ env.SKIA_VERSION }}
        
        # 同步依赖
        python tools/git-sync-deps
        
        # 配置编译参数
        $gn_args = @()
        $gn_args += "is_official_build=true"
        $gn_args += "is_component_build=false"
        $gn_args += "target_cpu=`"x64`""
        $gn_args += "cc=`"clang`""
        $gn_args += "cxx=`"clang++`""
        $gn_args += "clang_use_chrome_plugins=false"
        $gn_args += "extra_cflags_cc=[`"-std=c++20`"]"
        
        # 根据编译器设置
        if ("${{ matrix.compiler }}" -eq "msvc2022") {
          $gn_args += "win_vc=`"2022`""
          $gn_args += "is_clang=false"
        } else {
          $gn_args += "is_clang=true"
        }
        
        # 根据后端设置
        switch ("${{ matrix.backend }}") {
          "dx12" { 
            $gn_args += "skia_use_direct3d=true"
            $gn_args += "skia_use_dawn=true"
          }
          "dx11" { 
            $gn_args += "skia_use_direct3d=true"
          }
          "vulkan" { 
            $gn_args += "skia_use_vulkan=true"
          }
          "opengl" { 
            $gn_args += "skia_use_gl=true"
          }
        }
        
        $gn_args += "skia_use_system_harfbuzz=false"
        $gn_args += "skia_use_system_icu=false"
        $gn_args += "skia_use_system_libjpeg_turbo=false"
        $gn_args += "skia_use_system_libpng=false"
        $gn_args += "skia_use_system_libwebp=false"
        $gn_args += "skia_use_system_zlib=false"
        
        # 生成构建文件
        $args_string = $gn_args -join " "
        gn gen out/Release --args="$args_string"
        
        # 编译Skia
        ninja -C out/Release

    - name: 下载并编译Dawn
      run: |
        cd skia-build
        
        # 获取Dawn源代码
        git clone https://dawn.googlesource.com/dawn.git
        cd dawn
        git checkout ${{ env.DAWN_VERSION }}
        
        # 同步依赖
        cp scripts/standalone.gclient .gclient
        gclient sync
        
        # 配置CMake编译参数
        $cmake_args = @()
        $cmake_args += "-DCMAKE_BUILD_TYPE=Release"
        $cmake_args += "-DCMAKE_CXX_STANDARD=20"
        $cmake_args += "-DDAWN_FETCH_DEPENDENCIES=ON"
        $cmake_args += "-DDAWN_USE_GLFW=OFF"
        $cmake_args += "-DTINT_BUILD_TESTS=OFF"
        $cmake_args += "-DDAWN_BUILD_SAMPLES=OFF"
        
        # 根据编译器设置
        if ("${{ matrix.compiler }}" -eq "clang18") {
          $cmake_args += "-DCMAKE_C_COMPILER=clang"
          $cmake_args += "-DCMAKE_CXX_COMPILER=clang++"
        }
        
        # 根据后端设置
        switch ("${{ matrix.backend }}") {
          "dx12" { 
            $cmake_args += "-DDAWN_ENABLE_D3D12=ON"
            $cmake_args += "-DDAWN_ENABLE_D3D11=OFF"
            $cmake_args += "-DDAWN_ENABLE_VULKAN=OFF"
            $cmake_args += "-DDAWN_ENABLE_OPENGL=OFF"
          }
          "dx11" { 
            $cmake_args += "-DDAWN_ENABLE_D3D11=ON"
            $cmake_args += "-DDAWN_ENABLE_D3D12=OFF"
            $cmake_args += "-DDAWN_ENABLE_VULKAN=OFF"
            $cmake_args += "-DDAWN_ENABLE_OPENGL=OFF"
          }
          "vulkan" { 
            $cmake_args += "-DDAWN_ENABLE_VULKAN=ON"
            $cmake_args += "-DDAWN_ENABLE_D3D12=OFF"
            $cmake_args += "-DDAWN_ENABLE_D3D11=OFF"
            $cmake_args += "-DDAWN_ENABLE_OPENGL=OFF"
          }
          "opengl" { 
            $cmake_args += "-DDAWN_ENABLE_OPENGL=ON"
            $cmake_args += "-DDAWN_ENABLE_D3D12=OFF"
            $cmake_args += "-DDAWN_ENABLE_D3D11=OFF"
            $cmake_args += "-DDAWN_ENABLE_VULKAN=OFF"
          }
        }
        
        # 生成构建文件
        mkdir build
        cd build
        cmake .. $cmake_args -G "Ninja"
        
        # 编译Dawn
        ninja

    - name: 收集和打包文件
      run: |
        # 创建输出目录结构
        mkdir -p Skia/include/skia
        mkdir -p Skia/include/dawn
        mkdir -p Skia/include/modules
        mkdir -p Skia/bin/Win/x64
        mkdir -p Skia/lib/Win/x64
        
        # 复制Skia头文件
        Copy-Item -Recurse skia-build/skia/include/* Skia/include/skia/
        
        # 复制Skia模块头文件
        if (Test-Path "skia-build/skia/modules") {
          Copy-Item -Recurse skia-build/skia/modules/*/include/* Skia/include/modules/ -ErrorAction SilentlyContinue
        }
        
        # 复制Skia库文件
        Copy-Item skia-build/skia/out/Release/*.lib Skia/lib/Win/x64/ -ErrorAction SilentlyContinue
        Copy-Item skia-build/skia/out/Release/*.dll Skia/bin/Win/x64/ -ErrorAction SilentlyContinue
        
        # 复制Dawn头文件
        Copy-Item -Recurse skia-build/dawn/include/* Skia/include/dawn/
        
        # 复制Dawn生成的头文件和源码
        if (Test-Path "skia-build/dawn/build/gen") {
          Copy-Item -Recurse skia-build/dawn/build/gen/include/* Skia/include/dawn/ -ErrorAction SilentlyContinue
        }
        
        # 复制Dawn库文件
        Copy-Item skia-build/dawn/build/src/dawn/*.lib Skia/lib/Win/x64/ -ErrorAction SilentlyContinue
        Copy-Item skia-build/dawn/build/src/dawn/*.dll Skia/bin/Win/x64/ -ErrorAction SilentlyContinue

    - name: 创建CMakeLists.txt
      run: |
        $cmake_content = @"
cmake_minimum_required(VERSION 3.20)
project(SkiaDawn VERSION 1.0.0 LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 平台检测
if(WIN32)
    set(PLATFORM_DIR "Win")
    set(ARCH_DIR "x64")
elseif(ANDROID)
    set(PLATFORM_DIR "Android")
    if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
        set(ARCH_DIR "arm64")
    else()
        set(ARCH_DIR "x64")
    endif()
else()
    set(PLATFORM_DIR "Linux")
    set(ARCH_DIR "x64")
endif()

# 设置库和二进制文件路径
set(LIB_DIR "`${CMAKE_CURRENT_SOURCE_DIR}/lib/`${PLATFORM_DIR}/`${ARCH_DIR}")
set(BIN_DIR "`${CMAKE_CURRENT_SOURCE_DIR}/bin/`${PLATFORM_DIR}/`${ARCH_DIR}")

# Skia目标
add_library(Skia INTERFACE)

# 设置包含目录
target_include_directories(Skia INTERFACE
    `${CMAKE_CURRENT_SOURCE_DIR}/include/skia
    `${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
    `${CMAKE_CURRENT_SOURCE_DIR}/include/modules
)

# 链接Skia库
if(WIN32)
    # Windows平台的库
    find_library(SKIA_LIB skia PATHS `${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE `${SKIA_LIB})
    
    # 链接系统库
    target_link_libraries(Skia INTERFACE
        user32 gdi32 opengl32 d3d11 d3d12 dxgi
        dxguid d3dcompiler
    )
elseif(ANDROID)
    # Android平台的库
    find_library(SKIA_LIB skia PATHS `${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE `${SKIA_LIB})
    
    # 链接Android系统库
    target_link_libraries(Skia INTERFACE
        GLESv2 EGL android log
    )
else()
    # Linux平台的库
    find_library(SKIA_LIB skia PATHS `${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE `${SKIA_LIB})
    
    # 链接Linux系统库
    target_link_libraries(Skia INTERFACE
        GL X11 pthread dl
    )
endif()

# Dawn动态库目标
add_library(DawnDym INTERFACE)

# Dawn包含目录
target_include_directories(DawnDym INTERFACE
    `${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
)

# 链接Dawn库
if(WIN32)
    find_library(DAWN_NATIVE_LIB dawn_native PATHS `${LIB_DIR} REQUIRED)
    find_library(DAWN_PROC_LIB dawn_proc PATHS `${LIB_DIR} REQUIRED)
    find_library(DAWN_COMMON_LIB dawn_common PATHS `${LIB_DIR} REQUIRED)
    find_library(DAWN_UTILS_LIB dawn_utils PATHS `${LIB_DIR} REQUIRED)
    
    target_link_libraries(DawnDym INTERFACE
        `${DAWN_NATIVE_LIB}
        `${DAWN_PROC_LIB}
        `${DAWN_COMMON_LIB}
        `${DAWN_UTILS_LIB}
    )
endif()

# 将Dawn链接到Skia
target_link_libraries(Skia INTERFACE DawnDym)

# 编译定义
target_compile_definitions(Skia INTERFACE
    SK_GL=1
    SK_VULKAN=1
)

if(WIN32)
    target_compile_definitions(Skia INTERFACE
        SK_DIRECT3D=1
        DAWN_ENABLE_BACKEND_D3D11=1
        DAWN_ENABLE_BACKEND_D3D12=1
    )
endif()

# 导出目标
export(TARGETS Skia DawnDym FILE SkiaDawnTargets.cmake)
"@
        
        $cmake_content | Out-File -FilePath "Skia/CMakeLists.txt" -Encoding utf8

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-windows-${{ matrix.compiler }}-${{ matrix.backend }}
        path: Skia/
        retention-days: 30

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: [gcc13, clang18]
        backend: [vulkan, opengl]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装编译器和依赖
      run: |
        sudo apt-get update
        
        # 安装基础依赖
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-pip \
          ninja-build \
          pkg-config \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libvulkan-dev \
          vulkan-validationlayers-dev \
          spirv-tools
        
        # 安装指定编译器
        if [ "${{ matrix.compiler }}" = "gcc13" ]; then
          sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        else
          # 安装Clang 18
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        fi
        
        # 安装depot_tools
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH
        
        # 设置Git配置
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: 下载并编译Skia
      run: |
        # 创建工作目录
        mkdir skia-build
        cd skia-build
        
        # 获取Skia源代码
        git clone https://skia.googlesource.com/skia.git
        cd skia
        git checkout ${{ env.SKIA_VERSION }}
        
        # 同步依赖
        python3 tools/git-sync-deps
        
        # 配置编译参数
        gn_args=""
        gn_args="$gn_args is_official_build=true"
        gn_args="$gn_args is_component_build=false"
        gn_args="$gn_args target_cpu=\"x64\""
        gn_args="$gn_args extra_cflags_cc=[\"-std=c++20\"]"
        
        # 根据编译器设置
        if [ "${{ matrix.compiler }}" = "gcc13" ]; then
          gn_args="$gn_args is_clang=false"
          gn_args="$gn_args cc=\"gcc\""
          gn_args="$gn_args cxx=\"g++\""
        else
          gn_args="$gn_args is_clang=true"
          gn_args="$gn_args cc=\"clang\""
          gn_args="$gn_args cxx=\"clang++\""
          gn_args="$gn_args clang_use_chrome_plugins=false"
        fi
        
        # 根据后端设置
        case "${{ matrix.backend }}" in
          "vulkan")
            gn_args="$gn_args skia_use_vulkan=true"
            ;;
          "opengl")
            gn_args="$gn_args skia_use_gl=true"
            ;;
        esac
        
        gn_args="$gn_args skia_use_system_harfbuzz=false"
        gn_args="$gn_args skia_use_system_icu=false"
        gn_args="$gn_args skia_use_system_libjpeg_turbo=false"
        gn_args="$gn_args skia_use_system_libpng=false"
        gn_args="$gn_args skia_use_system_libwebp=false"
        gn_args="$gn_args skia_use_system_zlib=false"
        
        # 生成构建文件
        gn gen out/Release --args="$gn_args"
        
        # 编译Skia
        ninja -C out/Release

    - name: 下载并编译Dawn
      run: |
        cd skia-build
        
        # 获取Dawn源代码
        git clone https://dawn.googlesource.com/dawn.git
        cd dawn
        git checkout ${{ env.DAWN_VERSION }}
        
        # 同步依赖
        cp scripts/standalone.gclient .gclient
        gclient sync
        
        # 配置CMake编译参数
        cmake_args=""
        cmake_args="$cmake_args -DCMAKE_BUILD_TYPE=Release"
        cmake_args="$cmake_args -DCMAKE_CXX_STANDARD=20"
        cmake_args="$cmake_args -DDAWN_FETCH_DEPENDENCIES=ON"
        cmake_args="$cmake_args -DDAWN_USE_GLFW=OFF"
        cmake_args="$cmake_args -DTINT_BUILD_TESTS=OFF"
        cmake_args="$cmake_args -DDAWN_BUILD_SAMPLES=OFF"
        
        # 根据编译器设置
        if [ "${{ matrix.compiler }}" = "clang18" ]; then
          cmake_args="$cmake_args -DCMAKE_C_COMPILER=clang"
          cmake_args="$cmake_args -DCMAKE_CXX_COMPILER=clang++"
        else
          cmake_args="$cmake_args -DCMAKE_C_COMPILER=gcc"
          cmake_args="$cmake_args -DCMAKE_CXX_COMPILER=g++"
        fi
        
        # 根据后端设置
        case "${{ matrix.backend }}" in
          "vulkan")
            cmake_args="$cmake_args -DDAWN_ENABLE_VULKAN=ON"
            cmake_args="$cmake_args -DDAWN_ENABLE_OPENGL=OFF"
            ;;
          "opengl")
            cmake_args="$cmake_args -DDAWN_ENABLE_OPENGL=ON"
            cmake_args="$cmake_args -DDAWN_ENABLE_VULKAN=OFF"
            ;;
        esac
        
        # 生成构建文件
        mkdir build
        cd build
        cmake .. $cmake_args -G "Ninja"
        
        # 编译Dawn
        ninja

    - name: 收集和打包文件
      run: |
        # 创建输出目录结构
        mkdir -p Skia/include/skia
        mkdir -p Skia/include/dawn
        mkdir -p Skia/include/modules
        mkdir -p Skia/bin/Linux/x64
        mkdir -p Skia/lib/Linux/x64
        
        # 复制Skia头文件
        cp -r skia-build/skia/include/* Skia/include/skia/
        
        # 复制Skia模块头文件
        if [ -d "skia-build/skia/modules" ]; then
          find skia-build/skia/modules -name "include" -type d -exec cp -r {}/* Skia/include/modules/ \; 2>/dev/null || true
        fi
        
        # 复制Skia库文件
        cp skia-build/skia/out/Release/*.a Skia/lib/Linux/x64/ 2>/dev/null || true
        cp skia-build/skia/out/Release/*.so Skia/bin/Linux/x64/ 2>/dev/null || true
        
        # 复制Dawn头文件
        cp -r skia-build/dawn/include/* Skia/include/dawn/
        
        # 复制Dawn生成的头文件和源码
        if [ -d "skia-build/dawn/build/gen" ]; then
          cp -r skia-build/dawn/build/gen/include/* Skia/include/dawn/ 2>/dev/null || true
        fi
        
        # 复制Dawn库文件
        find skia-build/dawn/build -name "*.a" -exec cp {} Skia/lib/Linux/x64/ \; 2>/dev/null || true
        find skia-build/dawn/build -name "*.so" -exec cp {} Skia/bin/Linux/x64/ \; 2>/dev/null || true

    - name: 创建CMakeLists.txt (Linux)
      run: |
        cat > Skia/CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.20)
project(SkiaDawn VERSION 1.0.0 LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 平台检测
if(WIN32)
    set(PLATFORM_DIR "Win")
    set(ARCH_DIR "x64")
elseif(ANDROID)
    set(PLATFORM_DIR "Android")
    if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
        set(ARCH_DIR "arm64")
    else()
        set(ARCH_DIR "x64")
    endif()
else()
    set(PLATFORM_DIR "Linux")
    set(ARCH_DIR "x64")
endif()

# 设置库和二进制文件路径
set(LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
set(BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

# Skia目标
add_library(Skia INTERFACE)

# 设置包含目录
target_include_directories(Skia INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/include/skia
    ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
    ${CMAKE_CURRENT_SOURCE_DIR}/include/modules
)

# 链接Skia库
if(WIN32)
    # Windows平台的库
    find_library(SKIA_LIB skia PATHS ${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE ${SKIA_LIB})
    
    # 链接系统库
    target_link_libraries(Skia INTERFACE
        user32 gdi32 opengl32 d3d11 d3d12 dxgi
        dxguid d3dcompiler
    )
elseif(ANDROID)
    # Android平台的库
    find_library(SKIA_LIB skia PATHS ${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE ${SKIA_LIB})
    
    # 链接Android系统库
    target_link_libraries(Skia INTERFACE
        GLESv2 EGL android log
    )
else()
    # Linux平台的库
    find_library(SKIA_LIB skia PATHS ${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE ${SKIA_LIB})
    
    # 链接Linux系统库
    target_link_libraries(Skia INTERFACE
        GL X11 pthread dl
    )
endif()

# Dawn动态库目标
add_library(DawnDym INTERFACE)

# Dawn包含目录
target_include_directories(DawnDym INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
)

# 链接Dawn库
if(UNIX AND NOT ANDROID)
    file(GLOB DAWN_LIBS "${LIB_DIR}/libdawn*.a")
    target_link_libraries(DawnDym INTERFACE ${DAWN_LIBS})
endif()

# 将Dawn链接到Skia
target_link_libraries(Skia INTERFACE DawnDym)

# 编译定义
target_compile_definitions(Skia INTERFACE
    SK_GL=1
    SK_VULKAN=1
)

if(WIN32)
    target_compile_definitions(Skia INTERFACE
        SK_DIRECT3D=1
        DAWN_ENABLE_BACKEND_D3D11=1
        DAWN_ENABLE_BACKEND_D3D12=1
    )
endif()

# 导出目标
export(TARGETS Skia DawnDym FILE SkiaDawnTargets.cmake)
EOF

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-linux-${{ matrix.compiler }}-${{ matrix.backend }}
        path: Skia/
        retention-days: 30

  build-android:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [arm64, x64]
        backend: [vulkan, gles]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c

    - name: 安装依赖工具
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-pip \
          ninja-build \
          pkg-config
        
        # 安装depot_tools
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH
        
        # 设置Git配置
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: 下载并编译Skia (Android)
      run: |
        # 设置Android环境变量
        export ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        
        # 创建工作目录
        mkdir skia-build
        cd skia-build
        
        # 获取Skia源代码
        git clone https://skia.googlesource.com/skia.git
        cd skia
        git checkout ${{ env.SKIA_VERSION }}
        
        # 同步依赖
        python3 tools/git-sync-deps
        
        # 设置架构
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          target_cpu="arm64"
          android_abi="arm64-v8a"
        else
          target_cpu="x64"
          android_abi="x86_64"
        fi
        
        # 配置编译参数
        gn_args=""
        gn_args="$gn_args target_os=\"android\""
        gn_args="$gn_args target_cpu=\"$target_cpu\""
        gn_args="$gn_args is_official_build=true"
        gn_args="$gn_args is_component_build=false"
        gn_args="$gn_args is_clang=true"
        gn_args="$gn_args clang_use_chrome_plugins=false"
        gn_args="$gn_args extra_cflags_cc=[\"-std=c++20\"]"
        gn_args="$gn_args android_ndk_root=\"$ANDROID_NDK_ROOT\""
        gn_args="$gn_args ndk_api=21"
        
        # 根据后端设置
        case "${{ matrix.backend }}" in
          "vulkan")
            gn_args="$gn_args skia_use_vulkan=true"
            gn_args="$gn_args skia_use_gl=false"
            ;;
          "gles")
            gn_args="$gn_args skia_use_gl=true"
            gn_args="$gn_args skia_use_vulkan=false"
            ;;
        esac
        
        gn_args="$gn_args skia_use_system_harfbuzz=false"
        gn_args="$gn_args skia_use_system_icu=false"
        gn_args="$gn_args skia_use_system_libjpeg_turbo=false"
        gn_args="$gn_args skia_use_system_libpng=false"
        gn_args="$gn_args skia_use_system_libwebp=false"
        gn_args="$gn_args skia_use_system_zlib=false"
        
        # 生成构建文件
        gn gen out/Release --args="$gn_args"
        
        # 编译Skia
        ninja -C out/Release

    - name: 下载并编译Dawn (Android)
      run: |
        cd skia-build
        
        # 设置Android环境变量
        export ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        
        # 获取Dawn源代码
        git clone https://dawn.googlesource.com/dawn.git
        cd dawn
        git checkout ${{ env.DAWN_VERSION }}
        
        # 同步依赖
        cp scripts/standalone.gclient .gclient
        gclient sync
        
        # 设置架构
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          android_abi="arm64-v8a"
        else
          android_abi="x86_64"
        fi
        
        # 配置CMake编译参数
        cmake_args=""
        cmake_args="$cmake_args -DCMAKE_BUILD_TYPE=Release"
        cmake_args="$cmake_args -DCMAKE_CXX_STANDARD=20"
        cmake_args="$cmake_args -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake"
        cmake_args="$cmake_args -DANDROID_ABI=$android_abi"
        cmake_args="$cmake_args -DANDROID_NATIVE_API_LEVEL=21"
        cmake_args="$cmake_args -DANDROID_STL=c++_shared"
        cmake_args="$cmake_args -DDAWN_FETCH_DEPENDENCIES=ON"
        cmake_args="$cmake_args -DDAWN_USE_GLFW=OFF"
        cmake_args="$cmake_args -DTINT_BUILD_TESTS=OFF"
        cmake_args="$cmake_args -DDAWN_BUILD_SAMPLES=OFF"
        
        # 根据后端设置
        case "${{ matrix.backend }}" in
          "vulkan")
            cmake_args="$cmake_args -DDAWN_ENABLE_VULKAN=ON"
            cmake_args="$cmake_args -DDAWN_ENABLE_OPENGLES=OFF"
            ;;
          "gles")
            cmake_args="$cmake_args -DDAWN_ENABLE_OPENGLES=ON"
            cmake_args="$cmake_args -DDAWN_ENABLE_VULKAN=OFF"
            ;;
        esac
        
        # 生成构建文件
        mkdir build
        cd build
        cmake .. $cmake_args -G "Ninja"
        
        # 编译Dawn
        ninja

    - name: 收集和打包文件 (Android)
      run: |
        # 设置架构目录
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          arch_dir="arm64"
        else
          arch_dir="x64"
        fi
        
        # 创建输出目录结构
        mkdir -p Skia/include/skia
        mkdir -p Skia/include/dawn
        mkdir -p Skia/include/modules
        mkdir -p Skia/bin/Android/$arch_dir
        mkdir -p Skia/lib/Android/$arch_dir
        
        # 复制Skia头文件
        cp -r skia-build/skia/include/* Skia/include/skia/
        
        # 复制Skia模块头文件
        if [ -d "skia-build/skia/modules" ]; then
          find skia-build/skia/modules -name "include" -type d -exec cp -r {}/* Skia/include/modules/ \; 2>/dev/null || true
        fi
        
        # 复制Skia库文件
        cp skia-build/skia/out/Release/*.a Skia/lib/Android/$arch_dir/ 2>/dev/null || true
        cp skia-build/skia/out/Release/*.so Skia/bin/Android/$arch_dir/ 2>/dev/null || true
        
        # 复制Dawn头文件
        cp -r skia-build/dawn/include/* Skia/include/dawn/
        
        # 复制Dawn生成的头文件和源码
        if [ -d "skia-build/dawn/build/gen" ]; then
          cp -r skia-build/dawn/build/gen/include/* Skia/include/dawn/ 2>/dev/null || true
        fi
        
        # 复制Dawn库文件
        find skia-build/dawn/build -name "*.a" -exec cp {} Skia/lib/Android/$arch_dir/ \; 2>/dev/null || true
        find skia-build/dawn/build -name "*.so" -exec cp {} Skia/bin/Android/$arch_dir/ \; 2>/dev/null || true

    - name: 创建CMakeLists.txt (Android)
      run: |
        cat > Skia/CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.20)
project(SkiaDawn VERSION 1.0.0 LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 平台检测
if(WIN32)
    set(PLATFORM_DIR "Win")
    set(ARCH_DIR "x64")
elseif(ANDROID)
    set(PLATFORM_DIR "Android")
    if(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
        set(ARCH_DIR "arm64")
    else()
        set(ARCH_DIR "x64")
    endif()
else()
    set(PLATFORM_DIR "Linux")
    set(ARCH_DIR "x64")
endif()

# 设置库和二进制文件路径
set(LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/${PLATFORM_DIR}/${ARCH_DIR}")
set(BIN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_DIR}/${ARCH_DIR}")

# Skia目标
add_library(Skia INTERFACE)

# 设置包含目录
target_include_directories(Skia INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/include/skia
    ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
    ${CMAKE_CURRENT_SOURCE_DIR}/include/modules
)

# 链接Skia库
if(WIN32)
    # Windows平台的库
    find_library(SKIA_LIB skia PATHS ${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE ${SKIA_LIB})
    
    # 链接系统库
    target_link_libraries(Skia INTERFACE
        user32 gdi32 opengl32 d3d11 d3d12 dxgi
        dxguid d3dcompiler
    )
elseif(ANDROID)
    # Android平台的库
    find_library(SKIA_LIB skia PATHS ${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE ${SKIA_LIB})
    
    # 链接Android系统库
    target_link_libraries(Skia INTERFACE
        GLESv2 EGL android log
    )
else()
    # Linux平台的库
    find_library(SKIA_LIB skia PATHS ${LIB_DIR} REQUIRED)
    target_link_libraries(Skia INTERFACE ${SKIA_LIB})
    
    # 链接Linux系统库
    target_link_libraries(Skia INTERFACE
        GL X11 pthread dl
    )
endif()

# Dawn动态库目标
add_library(DawnDym INTERFACE)

# Dawn包含目录
target_include_directories(DawnDym INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/include/dawn
)

# 链接Dawn库
if(ANDROID)
    file(GLOB DAWN_LIBS "${LIB_DIR}/libdawn*.a")
    target_link_libraries(DawnDym INTERFACE ${DAWN_LIBS})
endif()

# 将Dawn链接到Skia
target_link_libraries(Skia INTERFACE DawnDym)

# 编译定义
target_compile_definitions(Skia INTERFACE
    SK_GL=1
    SK_VULKAN=1
)

if(WIN32)
    target_compile_definitions(Skia INTERFACE
        SK_DIRECT3D=1
        DAWN_ENABLE_BACKEND_D3D11=1
        DAWN_ENABLE_BACKEND_D3D12=1
    )
elseif(ANDROID)
    target_compile_definitions(Skia INTERFACE
        SK_BUILD_FOR_ANDROID=1
        DAWN_ENABLE_BACKEND_OPENGLES=1
        DAWN_ENABLE_BACKEND_VULKAN=1
    )
endif()

# 导出目标
export(TARGETS Skia DawnDym FILE SkiaDawnTargets.cmake)
EOF

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: skia-dawn-android-${{ matrix.arch }}-${{ matrix.backend }}
        path: Skia/
        retention-days: 30

  package-release:
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 合并构建结果
      run: |
        mkdir -p Skia-Release/include
        mkdir -p Skia-Release/bin
        mkdir -p Skia-Release/lib
        
        # 合并所有头文件（只需要一份）
        first_artifact=$(find artifacts -name "skia-dawn-*" -type d | head -n 1)
        if [ -n "$first_artifact" ]; then
          cp -r "$first_artifact"/include/* Skia-Release/include/
          cp "$first_artifact"/CMakeLists.txt Skia-Release/
        fi
        
        # 合并所有平台的二进制文件和库文件
        for artifact_dir in artifacts/skia-dawn-*; do
          if [ -d "$artifact_dir/bin" ]; then
            cp -r "$artifact_dir"/bin/* Skia-Release/bin/
          fi
          if [ -d "$artifact_dir/lib" ]; then
            cp -r "$artifact_dir"/lib/* Skia-Release/lib/
          fi
        done

    - name: 创建最终压缩包
      run: |
        cd Skia-Release
        tar -czf ../Skia.tar.gz .
        cd ..
        zip -r Skia.zip Skia-Release/

    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Skia + Dawn 预编译库 v${{ github.run_number }}
        body: |
          ## Skia + Dawn 预编译库
          
          这个release包含了为多个平台和编译器编译的Skia和Dawn库：
          
          ### 支持的平台和编译器：
          - **Windows x64**: MSVC 2022, Clang 18
          - **Linux x64**: GCC 13, Clang 18  
          - **Android**: ARM64, x64
          
          ### 支持的图形后端：
          - **Windows**: DirectX 12, DirectX 11, Vulkan, OpenGL
          - **Linux**: Vulkan, OpenGL
          - **Android**: Vulkan, OpenGL ES (EGL)
          
          ### 使用方法：
          1. 解压Skia.zip到你的项目目录
          2. 在CMakeLists.txt中添加：
             ```cmake
             add_subdirectory(Skia)
             target_link_libraries(your_target Skia)
             ```
          
          ### 目录结构：
          ```
          Skia/
          ├── include/          # 头文件
          │   ├── skia/        # Skia头文件
          │   ├── dawn/        # Dawn头文件（包含生成的文件）
          │   └── modules/     # Skia模块头文件
          ├── bin/             # 动态库文件
          │   ├── Win/x64/     # Windows二进制文件
          │   ├── Linux/x64/   # Linux二进制文件
          │   └── Android/     # Android二进制文件
          ├── lib/             # 静态库文件
          │   ├── Win/x64/     # Windows库文件
          │   ├── Linux/x64/   # Linux库文件
          │   └── Android/     # Android库文件
          └── CMakeLists.txt   # CMake配置文件
          ```
          
          构建于: ${{ github.sha }}
        files: |
          Skia.zip
          Skia.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
