# .github/workflows/build-skia-dawn.yml
name: 编译 Skia + Dawn 全平台构建包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write
  actions: read

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-skia-dawn:
    name: 构建 ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            platform: x64_windows
            arch: x64
            target_os: win
            target_cpu: x64
            compiler: msvc2022
          - os: ubuntu-24.04
            platform: x64_linux
            arch: x64
            target_os: linux
            target_cpu: x64
            compiler: clang18
          - os: ubuntu-24.04
            platform: x64_android
            arch: x64
            target_os: android
            target_cpu: x64
            android_api: 21
            compiler: clang18
          - os: ubuntu-24.04
            platform: arm64_android
            arch: arm64
            target_os: android
            target_cpu: arm64
            android_api: 21
            compiler: clang18

    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装 Linux 系统依赖
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build cmake clang-18 gcc-13 g++-13 \
            libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libvulkan-dev vulkan-tools \
            libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libx11-dev \
            libicu-dev libharfbuzz-dev openjdk-11-jdk
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: 安装 Windows 系统依赖
        if: runner.os == 'Windows'
        run: |
          choco install ninja -y
          choco install llvm --version=18.1.8 --force -y
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 设置 Visual Studio 环境
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: 设置 Android NDK
        if: matrix.target_os == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: 获取 depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "${{ github.workspace }}/depot_tools" >> $GITHUB_PATH
        shell: bash

      - name: 设置 depot_tools 环境变量 (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: 获取 Skia 源代码
        run: |
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          mkdir skia-build && cd skia-build
          gclient config --name skia https://skia.googlesource.com/skia.git
          gclient sync
        shell: bash

      - name: 获取 Dawn 源代码
        run: |
          git clone --recursive https://dawn.googlesource.com/dawn.git dawn-source
          cd dawn-source
          python3 tools/fetch_dawn_dependencies.py
        shell: bash

      - name: 配置 Dawn 构建
        run: |
          cd dawn-source
          mkdir -p build-${{ matrix.platform }} && cd build-${{ matrix.platform }}

          case "${{ matrix.target_os }}" in
            win)
              cmake .. -G "Visual Studio 17 2022" -A x64 \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_D3D11=ON -DDAWN_ENABLE_D3D12=ON \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON \
                -DCMAKE_CXX_STANDARD=20 -DDAWN_USE_BUILT_DXC=ON
              ;;
            linux)
              cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGL=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
            android)
              if [ "${{ matrix.arch }}" = "arm64" ]; then ANDROID_ABI="arm64-v8a"; else ANDROID_ABI="x86_64"; fi
              cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_SYSTEM_NAME=Android \
                -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
                -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME} \
                -DCMAKE_ANDROID_STL_TYPE=c++_static \
                -DCMAKE_ANDROID_API=${{ matrix.android_api }} \
                -DDAWN_BUILD_SAMPLES=OFF -DDAWN_BUILD_TESTS=OFF \
                -DDAWN_ENABLE_VULKAN=ON -DDAWN_ENABLE_OPENGLES=ON \
                -DCMAKE_CXX_STANDARD=20
              ;;
          esac
        shell: bash

      - name: 编译 Dawn
        run: |
          cd dawn-source/build-${{ matrix.platform }}
          if [ "${{ matrix.target_os }}" = "win" ]; then
            cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
          else
            ninja -j4
          fi
          echo "✅ Dawn 编译完成"
        shell: bash

      - name: 配置 Skia 构建
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          python3 tools/git-sync-deps

          args="is_official_build=false is_debug=false extra_cflags=[\"-O2\",\"-g\"]"
          args="$args skia_use_dawn=true skia_dawn_dir=\"../../dawn-source\""
          args="$args skia_enable_pdf=true skia_enable_skottie=true skia_enable_skshaper=true skia_enable_svg=true skia_use_icu=true"
          args="$args skia_enable_gpu=true skia_use_gl=true skia_use_vulkan=true skia_enable_spirv_validation=false skia_enable_tools=false"
          args="$args target_os=\"${{ matrix.target_os }}\" target_cpu=\"${{ matrix.target_cpu }}\" cc=\"clang-18\" cxx=\"clang++-18\""

          if [ "${{ matrix.target_os }}" = "win" ]; then
            args="$args skia_use_angle=true skia_use_direct3d=true skia_use_freetype=true skia_use_system_freetype2=false skia_use_harfbuzz=true skia_use_system_harfbuzz=false"
            args="$args cc=\"clang\" cxx=\"clang++\" clang_win=\"C:/Program Files/LLVM\""
          elif [ "${{ matrix.target_os }}" = "linux" ]; then
            args="$args skia_use_x11=true skia_use_fontconfig=true skia_use_freetype=true skia_use_harfbuzz=true"
          else
            args="$args ndk=\"$ANDROID_NDK_HOME\" android_api_level=${{ matrix.android_api }} skia_enable_fontmgr_android=true skia_use_freetype=true skia_use_harfbuzz=true skia_use_system_harfbuzz=false"
          fi

          echo "BUILD_ARGS=$args" >> $GITHUB_ENV
        shell: bash

      - name: 生成 Skia 构建文件
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          bin/gn gen out/Release --args="$BUILD_ARGS"
        shell: bash

      - name: 编译 Skia
        run: |
          cd skia-build/skia
          export PATH=${{ github.workspace }}/depot_tools:$PATH
          ninja -C out/Release -j4
          echo "✅ Skia 编译完成"
        shell: bash

      - name: 收集 Dawn 生成文件
        run: |
          mkdir -p dawn-generated/{include/dawn,include/webgpu,src/dawn,src/emdawnwebgpu,webgpu-headers}
          cp -r dawn-source/build-${{ matrix.platform }}/gen/include/dawn/* dawn-generated/include/dawn/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/include/webgpu/* dawn-generated/include/webgpu/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/src/dawn/* dawn-generated/src/dawn/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/src/emdawnwebgpu/* dawn-generated/src/emdawnwebgpu/ 2>/dev/null || true
          cp -r dawn-source/build-${{ matrix.platform }}/gen/webgpu-headers/* dawn-generated/webgpu-headers/ 2>/dev/null || true
          echo "✅ Dawn 生成文件收集完成"
        shell: bash

      - name: 创建发布包结构
        run: |
          mkdir -p Skia/{include/{core,dawn,modules},lib/${{ matrix.target_os }}/${{ matrix.arch }},bin/${{ matrix.target_os }}/${{ matrix.arch }}}
          # 复制 Skia 头文件
          cp -r skia-build/skia/include/* Skia/include/core/
          cp -r skia-build/skia/modules/* Skia/include/modules/ 2>/dev/null || true
          # 复制 Dawn 头和生成文件
          cp -r dawn-source/include/* Skia/include/dawn/ 2>/dev/null || true
          cp -r dawn-generated/include/* Skia/include/dawn/ 2>/dev/null || true
          # 复制第三方模块
          if [ -d "skia-build/skia/third_party/skcms" ]; then
            mkdir -p Skia/third_party && cp -r skia-build/skia/third_party/skcms Skia/third_party/
          fi

          case "${{ matrix.target_os }}" in
            win)
              find skia-build/skia/out/Release -name "*.lib" -exec cp {} Skia/lib/win/${{ matrix.arch }}/ \;
              find skia-build/skia/out/Release -name "*.dll" -exec cp {} Skia/bin/win/${{ matrix.arch }}/ \;
              find dawn-source/build-${{ matrix.platform }}/${{ env.BUILD_TYPE }} -name "*.lib" -exec cp {} Skia/lib/win/${{ matrix.arch }}/ \;
              find dawn-source/build-${{ matrix.platform }}/${{ env.BUILD_TYPE }} -name "*.dll" -exec cp {} Skia/bin/win/${{ matrix.arch }}/ \;
              ;;
            *)
              find skia-build/skia/out/Release -name "*.a" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find skia-build/skia/out/Release -name "*.so" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find dawn-source/build-${{ matrix.platform }} -name "*.a" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              find dawn-source/build-${{ matrix.platform }} -name "*.so" -exec cp {} Skia/lib/${{ matrix.target_os }}/${{ matrix.arch }}/ \;
              ;;
          esac

          echo "✅ ${ matrix.platform } 构建包创建完成"
        shell: bash

      - name: 打包构建产物
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            powershell "Compress-Archive -Path Skia\\* -DestinationPath ${{ matrix.platform }}.zip"
          else
            zip -r "${{ matrix.platform }}.zip" Skia/
          fi
          echo "✅ ${{ matrix.platform }}.zip 构建包创建完成"
        shell: bash

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.platform }}.zip
          retention-days: 30
          compression-level: 0

  create-release:
    needs: build-skia-dawn
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
      || github.event_name == 'schedule'
    permissions:
      contents: write
      packages: write

    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 生成 Release 信息
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "tag=skia-dawn-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
            echo "name=Skia+Dawn 全平台每日构建包 $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          else
            echo "tag=skia-dawn-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "name=Skia+Dawn 全平台构建包 v${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: ${{ steps.get_tag.outputs.name }}
          body: |
            # Skia + Dawn WebGPU 全平台构建包

            此发布包含预编译的 Skia 图形库和 Dawn WebGPU 库，支持 Windows、Linux 和 Android 多种后端和架构。

            ## 编译规格
            - 编译器：Clang 18、GCC 13、MSVC 2022
            - C++ 标准：C++20
            - 构建类型：RelWithDebInfo
            - Dawn 完整集成

            ## 平台
            - Windows x64: DirectX11/12、Vulkan、OpenGL、Dawn WebGPU
            - Linux x64: Vulkan、OpenGL、Dawn WebGPU (Ubuntu20.04+)
            - Android arm64/x64: Vulkan、OpenGL ES、Dawn WebGPU

            ## 目录结构
            ```
            Skia/
            ├── include/{core,dawn,modules}
            ├── lib/{win,linux,android}/{arch}
            ├── bin/{win,linux,android}/{arch}
            └── CMakeLists.txt
            ```

            ## 使用示例
            ```cmake
            add_subdirectory(path/to/Skia)
            target_link_libraries(your_target skia::skia)
            ```

          files: |
            artifacts/**/*.zip
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
